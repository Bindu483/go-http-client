// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.12.4
// source: proto/rc_spec/rc_spec.proto

package rc_spec

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type FieldType int32

const (
	FieldType_FieldTypeUnknown FieldType = 0
	FieldType_SmallText        FieldType = 1
	FieldType_LargeText        FieldType = 2
	FieldType_Integer          FieldType = 3
	FieldType_Enum             FieldType = 4
	FieldType_Boolean          FieldType = 5
	FieldType_Secret           FieldType = 6
	FieldType_RcSupplied       FieldType = 7
	FieldType_ReadOnly         FieldType = 8
	FieldType_UploadSecret     FieldType = 9
	FieldType_UploadConfig     FieldType = 10
)

// Enum value maps for FieldType.
var (
	FieldType_name = map[int32]string{
		0:  "FieldTypeUnknown",
		1:  "SmallText",
		2:  "LargeText",
		3:  "Integer",
		4:  "Enum",
		5:  "Boolean",
		6:  "Secret",
		7:  "RcSupplied",
		8:  "ReadOnly",
		9:  "UploadSecret",
		10: "UploadConfig",
	}
	FieldType_value = map[string]int32{
		"FieldTypeUnknown": 0,
		"SmallText":        1,
		"LargeText":        2,
		"Integer":          3,
		"Enum":             4,
		"Boolean":          5,
		"Secret":           6,
		"RcSupplied":       7,
		"ReadOnly":         8,
		"UploadSecret":     9,
		"UploadConfig":     10,
	}
)

func (x FieldType) Enum() *FieldType {
	p := new(FieldType)
	*p = x
	return p
}

func (x FieldType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FieldType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_rc_spec_rc_spec_proto_enumTypes[0].Descriptor()
}

func (FieldType) Type() protoreflect.EnumType {
	return &file_proto_rc_spec_rc_spec_proto_enumTypes[0]
}

func (x FieldType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FieldType.Descriptor instead.
func (FieldType) EnumDescriptor() ([]byte, []int) {
	return file_proto_rc_spec_rc_spec_proto_rawDescGZIP(), []int{0}
}

type HttpPayloadType int32

const (
	HttpPayloadType_HttpPayloadUnknown HttpPayloadType = 0
	HttpPayloadType_JSON               HttpPayloadType = 1
	HttpPayloadType_XML                HttpPayloadType = 2
)

// Enum value maps for HttpPayloadType.
var (
	HttpPayloadType_name = map[int32]string{
		0: "HttpPayloadUnknown",
		1: "JSON",
		2: "XML",
	}
	HttpPayloadType_value = map[string]int32{
		"HttpPayloadUnknown": 0,
		"JSON":               1,
		"XML":                2,
	}
)

func (x HttpPayloadType) Enum() *HttpPayloadType {
	p := new(HttpPayloadType)
	*p = x
	return p
}

func (x HttpPayloadType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HttpPayloadType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_rc_spec_rc_spec_proto_enumTypes[1].Descriptor()
}

func (HttpPayloadType) Type() protoreflect.EnumType {
	return &file_proto_rc_spec_rc_spec_proto_enumTypes[1]
}

func (x HttpPayloadType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HttpPayloadType.Descriptor instead.
func (HttpPayloadType) EnumDescriptor() ([]byte, []int) {
	return file_proto_rc_spec_rc_spec_proto_rawDescGZIP(), []int{1}
}

type HttpMethod int32

const (
	HttpMethod_HttpMethodUnknown HttpMethod = 0
	HttpMethod_GET               HttpMethod = 1
	HttpMethod_POST              HttpMethod = 2
	HttpMethod_PUT               HttpMethod = 3
	HttpMethod_DELETE            HttpMethod = 4
	HttpMethod_HEAD              HttpMethod = 5
	HttpMethod_PATCH             HttpMethod = 6
)

// Enum value maps for HttpMethod.
var (
	HttpMethod_name = map[int32]string{
		0: "HttpMethodUnknown",
		1: "GET",
		2: "POST",
		3: "PUT",
		4: "DELETE",
		5: "HEAD",
		6: "PATCH",
	}
	HttpMethod_value = map[string]int32{
		"HttpMethodUnknown": 0,
		"GET":               1,
		"POST":              2,
		"PUT":               3,
		"DELETE":            4,
		"HEAD":              5,
		"PATCH":             6,
	}
)

func (x HttpMethod) Enum() *HttpMethod {
	p := new(HttpMethod)
	*p = x
	return p
}

func (x HttpMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HttpMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_rc_spec_rc_spec_proto_enumTypes[2].Descriptor()
}

func (HttpMethod) Type() protoreflect.EnumType {
	return &file_proto_rc_spec_rc_spec_proto_enumTypes[2]
}

func (x HttpMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HttpMethod.Descriptor instead.
func (HttpMethod) EnumDescriptor() ([]byte, []int) {
	return file_proto_rc_spec_rc_spec_proto_rawDescGZIP(), []int{2}
}

type RCPostDeployStepType int32

const (
	RCPostDeployStepType_RCPostDeployStepTypeUnknown RCPostDeployStepType = 0
	RCPostDeployStepType_Endpoint                    RCPostDeployStepType = 1
	RCPostDeployStepType_Instruction                 RCPostDeployStepType = 2
)

// Enum value maps for RCPostDeployStepType.
var (
	RCPostDeployStepType_name = map[int32]string{
		0: "RCPostDeployStepTypeUnknown",
		1: "Endpoint",
		2: "Instruction",
	}
	RCPostDeployStepType_value = map[string]int32{
		"RCPostDeployStepTypeUnknown": 0,
		"Endpoint":                    1,
		"Instruction":                 2,
	}
)

func (x RCPostDeployStepType) Enum() *RCPostDeployStepType {
	p := new(RCPostDeployStepType)
	*p = x
	return p
}

func (x RCPostDeployStepType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RCPostDeployStepType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_rc_spec_rc_spec_proto_enumTypes[3].Descriptor()
}

func (RCPostDeployStepType) Type() protoreflect.EnumType {
	return &file_proto_rc_spec_rc_spec_proto_enumTypes[3]
}

func (x RCPostDeployStepType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RCPostDeployStepType.Descriptor instead.
func (RCPostDeployStepType) EnumDescriptor() ([]byte, []int) {
	return file_proto_rc_spec_rc_spec_proto_rawDescGZIP(), []int{3}
}

type RCManagedService int32

const (
	RCManagedService_RCManagedServiceUnknown RCManagedService = 0
	RCManagedService_ArangoDB                RCManagedService = 1
)

// Enum value maps for RCManagedService.
var (
	RCManagedService_name = map[int32]string{
		0: "RCManagedServiceUnknown",
		1: "ArangoDB",
	}
	RCManagedService_value = map[string]int32{
		"RCManagedServiceUnknown": 0,
		"ArangoDB":                1,
	}
)

func (x RCManagedService) Enum() *RCManagedService {
	p := new(RCManagedService)
	*p = x
	return p
}

func (x RCManagedService) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RCManagedService) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_rc_spec_rc_spec_proto_enumTypes[4].Descriptor()
}

func (RCManagedService) Type() protoreflect.EnumType {
	return &file_proto_rc_spec_rc_spec_proto_enumTypes[4]
}

func (x RCManagedService) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RCManagedService.Descriptor instead.
func (RCManagedService) EnumDescriptor() ([]byte, []int) {
	return file_proto_rc_spec_rc_spec_proto_rawDescGZIP(), []int{4}
}

type RCSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config            *RCConfigurationSpec       `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	SolutionInfo      *RCSolutionInfo            `protobuf:"bytes,2,opt,name=solution_info,json=solutionInfo,proto3" json:"solution_info,omitempty"`
	PostDeploy        *RCPostDeploy              `protobuf:"bytes,3,opt,name=post_deploy,json=postDeploy,proto3" json:"post_deploy,omitempty"`
	Services          *RCServices                `protobuf:"bytes,4,opt,name=services,proto3" json:"services,omitempty"`
	Upgrades          *RCUpgrades                `protobuf:"bytes,5,opt,name=upgrades,proto3" json:"upgrades,omitempty"`
	ManagedServices   map[string]*OperatorConfig `protobuf:"bytes,6,rep,name=managed_services,json=managedServices,proto3" json:"managed_services,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PlatformVariables map[string]string          `protobuf:"bytes,7,rep,name=platform_variables,json=platformVariables,proto3" json:"platform_variables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RCSpec) Reset() {
	*x = RCSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rc_spec_rc_spec_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RCSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RCSpec) ProtoMessage() {}

func (x *RCSpec) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rc_spec_rc_spec_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RCSpec.ProtoReflect.Descriptor instead.
func (*RCSpec) Descriptor() ([]byte, []int) {
	return file_proto_rc_spec_rc_spec_proto_rawDescGZIP(), []int{0}
}

func (x *RCSpec) GetConfig() *RCConfigurationSpec {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *RCSpec) GetSolutionInfo() *RCSolutionInfo {
	if x != nil {
		return x.SolutionInfo
	}
	return nil
}

func (x *RCSpec) GetPostDeploy() *RCPostDeploy {
	if x != nil {
		return x.PostDeploy
	}
	return nil
}

func (x *RCSpec) GetServices() *RCServices {
	if x != nil {
		return x.Services
	}
	return nil
}

func (x *RCSpec) GetUpgrades() *RCUpgrades {
	if x != nil {
		return x.Upgrades
	}
	return nil
}

func (x *RCSpec) GetManagedServices() map[string]*OperatorConfig {
	if x != nil {
		return x.ManagedServices
	}
	return nil
}

func (x *RCSpec) GetPlatformVariables() map[string]string {
	if x != nil {
		return x.PlatformVariables
	}
	return nil
}

type RCConfigurationSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field []*Field `protobuf:"bytes,1,rep,name=field,proto3" json:"field,omitempty"`
}

func (x *RCConfigurationSpec) Reset() {
	*x = RCConfigurationSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rc_spec_rc_spec_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RCConfigurationSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RCConfigurationSpec) ProtoMessage() {}

func (x *RCConfigurationSpec) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rc_spec_rc_spec_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RCConfigurationSpec.ProtoReflect.Descriptor instead.
func (*RCConfigurationSpec) Descriptor() ([]byte, []int) {
	return file_proto_rc_spec_rc_spec_proto_rawDescGZIP(), []int{1}
}

func (x *RCConfigurationSpec) GetField() []*Field {
	if x != nil {
		return x.Field
	}
	return nil
}

type Field struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldName        string    `protobuf:"bytes,1,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"`
	FieldType        FieldType `protobuf:"varint,2,opt,name=field_type,json=fieldType,proto3,enum=rc_spec.FieldType" json:"field_type,omitempty"`
	FieldDescription string    `protobuf:"bytes,3,opt,name=field_description,json=fieldDescription,proto3" json:"field_description,omitempty"`
	DefaultValue     string    `protobuf:"bytes,4,opt,name=default_value,json=defaultValue,proto3" json:"default_value,omitempty"`
	AdditionHelpText string    `protobuf:"bytes,5,opt,name=addition_help_text,json=additionHelpText,proto3" json:"addition_help_text,omitempty"`
	Required         bool      `protobuf:"varint,6,opt,name=required,proto3" json:"required,omitempty"`
	FieldValue       string    `protobuf:"bytes,7,opt,name=field_value,json=fieldValue,proto3" json:"field_value,omitempty"`
	Values           []string  `protobuf:"bytes,8,rep,name=values,proto3" json:"values,omitempty"`
	Limits           bool      `protobuf:"varint,9,opt,name=limits,proto3" json:"limits,omitempty"`
	UpperLimit       int32     `protobuf:"varint,10,opt,name=upper_limit,json=upperLimit,proto3" json:"upper_limit,omitempty"`
	LowerLimit       int32     `protobuf:"varint,11,opt,name=lower_limit,json=lowerLimit,proto3" json:"lower_limit,omitempty"`
	Immutable        bool      `protobuf:"varint,12,opt,name=immutable,proto3" json:"immutable,omitempty"`
	FieldLabel       string    `protobuf:"bytes,13,opt,name=field_label,json=fieldLabel,proto3" json:"field_label,omitempty"`
}

func (x *Field) Reset() {
	*x = Field{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rc_spec_rc_spec_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Field) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Field) ProtoMessage() {}

func (x *Field) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rc_spec_rc_spec_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Field.ProtoReflect.Descriptor instead.
func (*Field) Descriptor() ([]byte, []int) {
	return file_proto_rc_spec_rc_spec_proto_rawDescGZIP(), []int{2}
}

func (x *Field) GetFieldName() string {
	if x != nil {
		return x.FieldName
	}
	return ""
}

func (x *Field) GetFieldType() FieldType {
	if x != nil {
		return x.FieldType
	}
	return FieldType_FieldTypeUnknown
}

func (x *Field) GetFieldDescription() string {
	if x != nil {
		return x.FieldDescription
	}
	return ""
}

func (x *Field) GetDefaultValue() string {
	if x != nil {
		return x.DefaultValue
	}
	return ""
}

func (x *Field) GetAdditionHelpText() string {
	if x != nil {
		return x.AdditionHelpText
	}
	return ""
}

func (x *Field) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

func (x *Field) GetFieldValue() string {
	if x != nil {
		return x.FieldValue
	}
	return ""
}

func (x *Field) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *Field) GetLimits() bool {
	if x != nil {
		return x.Limits
	}
	return false
}

func (x *Field) GetUpperLimit() int32 {
	if x != nil {
		return x.UpperLimit
	}
	return 0
}

func (x *Field) GetLowerLimit() int32 {
	if x != nil {
		return x.LowerLimit
	}
	return 0
}

func (x *Field) GetImmutable() bool {
	if x != nil {
		return x.Immutable
	}
	return false
}

func (x *Field) GetFieldLabel() string {
	if x != nil {
		return x.FieldLabel
	}
	return ""
}

type RCSolutionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SolutionId string `protobuf:"bytes,1,opt,name=solution_id,json=solutionId,proto3" json:"solution_id,omitempty"`
	VendorId   string `protobuf:"bytes,2,opt,name=vendor_id,json=vendorId,proto3" json:"vendor_id,omitempty"`
	ApiPrefix  string `protobuf:"bytes,3,opt,name=api_prefix,json=apiPrefix,proto3" json:"api_prefix,omitempty"`
}

func (x *RCSolutionInfo) Reset() {
	*x = RCSolutionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rc_spec_rc_spec_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RCSolutionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RCSolutionInfo) ProtoMessage() {}

func (x *RCSolutionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rc_spec_rc_spec_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RCSolutionInfo.ProtoReflect.Descriptor instead.
func (*RCSolutionInfo) Descriptor() ([]byte, []int) {
	return file_proto_rc_spec_rc_spec_proto_rawDescGZIP(), []int{3}
}

func (x *RCSolutionInfo) GetSolutionId() string {
	if x != nil {
		return x.SolutionId
	}
	return ""
}

func (x *RCSolutionInfo) GetVendorId() string {
	if x != nil {
		return x.VendorId
	}
	return ""
}

func (x *RCSolutionInfo) GetApiPrefix() string {
	if x != nil {
		return x.ApiPrefix
	}
	return ""
}

type RCPostDeploy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PostInstallReadinessUri string             `protobuf:"bytes,1,opt,name=post_install_readiness_uri,json=postInstallReadinessUri,proto3" json:"post_install_readiness_uri,omitempty"`
	PostInstallCompletedUri string             `protobuf:"bytes,2,opt,name=post_install_completed_uri,json=postInstallCompletedUri,proto3" json:"post_install_completed_uri,omitempty"`
	Steps                   *RCPostDeploySteps `protobuf:"bytes,3,opt,name=steps,proto3" json:"steps,omitempty"`
}

func (x *RCPostDeploy) Reset() {
	*x = RCPostDeploy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rc_spec_rc_spec_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RCPostDeploy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RCPostDeploy) ProtoMessage() {}

func (x *RCPostDeploy) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rc_spec_rc_spec_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RCPostDeploy.ProtoReflect.Descriptor instead.
func (*RCPostDeploy) Descriptor() ([]byte, []int) {
	return file_proto_rc_spec_rc_spec_proto_rawDescGZIP(), []int{4}
}

func (x *RCPostDeploy) GetPostInstallReadinessUri() string {
	if x != nil {
		return x.PostInstallReadinessUri
	}
	return ""
}

func (x *RCPostDeploy) GetPostInstallCompletedUri() string {
	if x != nil {
		return x.PostInstallCompletedUri
	}
	return ""
}

func (x *RCPostDeploy) GetSteps() *RCPostDeploySteps {
	if x != nil {
		return x.Steps
	}
	return nil
}

type RCPostDeploySteps struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StepNumber       int32                `protobuf:"varint,1,opt,name=step_number,json=stepNumber,proto3" json:"step_number,omitempty"`
	StepType         RCPostDeployStepType `protobuf:"varint,2,opt,name=step_type,json=stepType,proto3,enum=rc_spec.RCPostDeployStepType" json:"step_type,omitempty"`
	Uri              string               `protobuf:"bytes,3,opt,name=uri,proto3" json:"uri,omitempty"`
	Method           HttpMethod           `protobuf:"varint,4,opt,name=method,proto3,enum=rc_spec.HttpMethod" json:"method,omitempty"`
	PayloadType      HttpPayloadType      `protobuf:"varint,5,opt,name=payload_type,json=payloadType,proto3,enum=rc_spec.HttpPayloadType" json:"payload_type,omitempty"`
	Payload          string               `protobuf:"bytes,6,opt,name=payload,proto3" json:"payload,omitempty"`
	SuccessMandatory bool                 `protobuf:"varint,7,opt,name=success_mandatory,json=successMandatory,proto3" json:"success_mandatory,omitempty"`
	Instruction      string               `protobuf:"bytes,8,opt,name=instruction,proto3" json:"instruction,omitempty"`
}

func (x *RCPostDeploySteps) Reset() {
	*x = RCPostDeploySteps{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rc_spec_rc_spec_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RCPostDeploySteps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RCPostDeploySteps) ProtoMessage() {}

func (x *RCPostDeploySteps) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rc_spec_rc_spec_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RCPostDeploySteps.ProtoReflect.Descriptor instead.
func (*RCPostDeploySteps) Descriptor() ([]byte, []int) {
	return file_proto_rc_spec_rc_spec_proto_rawDescGZIP(), []int{5}
}

func (x *RCPostDeploySteps) GetStepNumber() int32 {
	if x != nil {
		return x.StepNumber
	}
	return 0
}

func (x *RCPostDeploySteps) GetStepType() RCPostDeployStepType {
	if x != nil {
		return x.StepType
	}
	return RCPostDeployStepType_RCPostDeployStepTypeUnknown
}

func (x *RCPostDeploySteps) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *RCPostDeploySteps) GetMethod() HttpMethod {
	if x != nil {
		return x.Method
	}
	return HttpMethod_HttpMethodUnknown
}

func (x *RCPostDeploySteps) GetPayloadType() HttpPayloadType {
	if x != nil {
		return x.PayloadType
	}
	return HttpPayloadType_HttpPayloadUnknown
}

func (x *RCPostDeploySteps) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

func (x *RCPostDeploySteps) GetSuccessMandatory() bool {
	if x != nil {
		return x.SuccessMandatory
	}
	return false
}

func (x *RCPostDeploySteps) GetInstruction() string {
	if x != nil {
		return x.Instruction
	}
	return ""
}

type RCServices struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expose []*Service `protobuf:"bytes,1,rep,name=expose,proto3" json:"expose,omitempty"`
}

func (x *RCServices) Reset() {
	*x = RCServices{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rc_spec_rc_spec_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RCServices) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RCServices) ProtoMessage() {}

func (x *RCServices) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rc_spec_rc_spec_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RCServices.ProtoReflect.Descriptor instead.
func (*RCServices) Descriptor() ([]byte, []int) {
	return file_proto_rc_spec_rc_spec_proto_rawDescGZIP(), []int{6}
}

func (x *RCServices) GetExpose() []*Service {
	if x != nil {
		return x.Expose
	}
	return nil
}

type Service struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ServiceName  string `protobuf:"bytes,2,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	Port         int32  `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	DomainPrefix string `protobuf:"bytes,4,opt,name=domain_prefix,json=domainPrefix,proto3" json:"domain_prefix,omitempty"`
	Primary      bool   `protobuf:"varint,5,opt,name=primary,proto3" json:"primary,omitempty"`
}

func (x *Service) Reset() {
	*x = Service{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rc_spec_rc_spec_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Service) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service) ProtoMessage() {}

func (x *Service) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rc_spec_rc_spec_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service.ProtoReflect.Descriptor instead.
func (*Service) Descriptor() ([]byte, []int) {
	return file_proto_rc_spec_rc_spec_proto_rawDescGZIP(), []int{7}
}

func (x *Service) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Service) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *Service) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Service) GetDomainPrefix() string {
	if x != nil {
		return x.DomainPrefix
	}
	return ""
}

func (x *Service) GetPrimary() bool {
	if x != nil {
		return x.Primary
	}
	return false
}

type RCUpgrades struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompatibleVersions []string `protobuf:"bytes,1,rep,name=compatible_versions,json=compatibleVersions,proto3" json:"compatible_versions,omitempty"`
	FromVersion        string   `protobuf:"bytes,2,opt,name=from_version,json=fromVersion,proto3" json:"from_version,omitempty"`
}

func (x *RCUpgrades) Reset() {
	*x = RCUpgrades{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rc_spec_rc_spec_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RCUpgrades) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RCUpgrades) ProtoMessage() {}

func (x *RCUpgrades) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rc_spec_rc_spec_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RCUpgrades.ProtoReflect.Descriptor instead.
func (*RCUpgrades) Descriptor() ([]byte, []int) {
	return file_proto_rc_spec_rc_spec_proto_rawDescGZIP(), []int{8}
}

func (x *RCUpgrades) GetCompatibleVersions() []string {
	if x != nil {
		return x.CompatibleVersions
	}
	return nil
}

func (x *RCUpgrades) GetFromVersion() string {
	if x != nil {
		return x.FromVersion
	}
	return ""
}

type RCPipeline struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RcPipelineVariables *RCPipelineVariables `protobuf:"bytes,1,opt,name=rc_pipeline_variables,json=rcPipelineVariables,proto3" json:"rc_pipeline_variables,omitempty"`
}

func (x *RCPipeline) Reset() {
	*x = RCPipeline{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rc_spec_rc_spec_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RCPipeline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RCPipeline) ProtoMessage() {}

func (x *RCPipeline) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rc_spec_rc_spec_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RCPipeline.ProtoReflect.Descriptor instead.
func (*RCPipeline) Descriptor() ([]byte, []int) {
	return file_proto_rc_spec_rc_spec_proto_rawDescGZIP(), []int{9}
}

func (x *RCPipeline) GetRcPipelineVariables() *RCPipelineVariables {
	if x != nil {
		return x.RcPipelineVariables
	}
	return nil
}

type RCPipelineVariables struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HelmDeploymentTimeout string `protobuf:"bytes,1,opt,name=helm_deployment_timeout,json=helmDeploymentTimeout,proto3" json:"helm_deployment_timeout,omitempty"`
}

func (x *RCPipelineVariables) Reset() {
	*x = RCPipelineVariables{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rc_spec_rc_spec_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RCPipelineVariables) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RCPipelineVariables) ProtoMessage() {}

func (x *RCPipelineVariables) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rc_spec_rc_spec_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RCPipelineVariables.ProtoReflect.Descriptor instead.
func (*RCPipelineVariables) Descriptor() ([]byte, []int) {
	return file_proto_rc_spec_rc_spec_proto_rawDescGZIP(), []int{10}
}

func (x *RCPipelineVariables) GetHelmDeploymentTimeout() string {
	if x != nil {
		return x.HelmDeploymentTimeout
	}
	return ""
}

type OperatorConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version string   `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	Config  []*Field `protobuf:"bytes,2,rep,name=config,proto3" json:"config,omitempty"`
}

func (x *OperatorConfig) Reset() {
	*x = OperatorConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rc_spec_rc_spec_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperatorConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperatorConfig) ProtoMessage() {}

func (x *OperatorConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rc_spec_rc_spec_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperatorConfig.ProtoReflect.Descriptor instead.
func (*OperatorConfig) Descriptor() ([]byte, []int) {
	return file_proto_rc_spec_rc_spec_proto_rawDescGZIP(), []int{11}
}

func (x *OperatorConfig) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *OperatorConfig) GetConfig() []*Field {
	if x != nil {
		return x.Config
	}
	return nil
}

var File_proto_rc_spec_rc_spec_proto protoreflect.FileDescriptor

var file_proto_rc_spec_rc_spec_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x63, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x2f,
	0x72, 0x63, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x72,
	0x63, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x22, 0xe1, 0x04, 0x0a, 0x06, 0x52, 0x43, 0x53, 0x70, 0x65,
	0x63, 0x12, 0x34, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x63, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x52, 0x43, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x52,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3c, 0x0a, 0x0d, 0x73, 0x6f, 0x6c, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x72, 0x63, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x52, 0x43, 0x53, 0x6f, 0x6c, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x36, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x63, 0x5f,
	0x73, 0x70, 0x65, 0x63, 0x2e, 0x52, 0x43, 0x50, 0x6f, 0x73, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x12, 0x2f, 0x0a,
	0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x72, 0x63, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x52, 0x43, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x2f,
	0x0a, 0x08, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x72, 0x63, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x52, 0x43, 0x55, 0x70, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x73, 0x52, 0x08, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x73, 0x12,
	0x4f, 0x0a, 0x10, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x72, 0x63, 0x5f, 0x73,
	0x70, 0x65, 0x63, 0x2e, 0x52, 0x43, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x12, 0x55, 0x0a, 0x12, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x76, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x72,
	0x63, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x52, 0x43, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x50, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x1a, 0x5b, 0x0a, 0x14, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x72, 0x63, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x44, 0x0a, 0x16, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x3b, 0x0a, 0x13, 0x52, 0x43,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65,
	0x63, 0x12, 0x24, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x72, 0x63, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x22, 0xc7, 0x03, 0x0a, 0x05, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x31, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x72, 0x63, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x68, 0x65, 0x6c, 0x70, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x6c, 0x70, 0x54,
	0x65, 0x78, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x75, 0x70, 0x70, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x22, 0x6d, 0x0a, 0x0e, 0x52, 0x43, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x70, 0x69, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x70, 0x69, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x22, 0xba, 0x01, 0x0a, 0x0c, 0x52, 0x43, 0x50, 0x6f, 0x73, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x12, 0x3b, 0x0a, 0x1a, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x72, 0x69, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x70, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6c, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x72, 0x69, 0x12, 0x3b,
	0x0a, 0x1a, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x5f, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x17, 0x70, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x55, 0x72, 0x69, 0x12, 0x30, 0x0a, 0x05, 0x73,
	0x74, 0x65, 0x70, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x63, 0x5f,
	0x73, 0x70, 0x65, 0x63, 0x2e, 0x52, 0x43, 0x50, 0x6f, 0x73, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x53, 0x74, 0x65, 0x70, 0x73, 0x52, 0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x22, 0xd5, 0x02,
	0x0a, 0x11, 0x52, 0x43, 0x50, 0x6f, 0x73, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x53, 0x74,
	0x65, 0x70, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x65, 0x70, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x65, 0x70, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x09, 0x73, 0x74, 0x65, 0x70, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x72, 0x63, 0x5f, 0x73, 0x70, 0x65,
	0x63, 0x2e, 0x52, 0x43, 0x50, 0x6f, 0x73, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x53, 0x74,
	0x65, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x73, 0x74, 0x65, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75,
	0x72, 0x69, 0x12, 0x2b, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x13, 0x2e, 0x72, 0x63, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x48, 0x74, 0x74,
	0x70, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12,
	0x3b, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x72, 0x63, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x2e,
	0x48, 0x74, 0x74, 0x70, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x10, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x61, 0x6e, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x36, 0x0a, 0x0a, 0x52, 0x43, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72, 0x63, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x22, 0x93, 0x01,
	0x0a, 0x07, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x69,
	0x6d, 0x61, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x70, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x22, 0x60, 0x0a, 0x0a, 0x52, 0x43, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x73, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x5e, 0x0a, 0x0a, 0x52, 0x43, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x12, 0x50, 0x0a, 0x15, 0x72, 0x63, 0x5f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x63, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x52, 0x43, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x52, 0x13, 0x72, 0x63, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x22, 0x4d, 0x0a, 0x13, 0x52, 0x43, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x17,
	0x68, 0x65, 0x6c, 0x6d, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x68,
	0x65, 0x6c, 0x6d, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x22, 0x52, 0x0a, 0x0e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x26, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x72, 0x63, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2a, 0xb1, 0x01, 0x0a, 0x09, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09,
	0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x54, 0x65, 0x78, 0x74, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x4c,
	0x61, 0x72, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x6e,
	0x74, 0x65, 0x67, 0x65, 0x72, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x10,
	0x04, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x10, 0x05, 0x12, 0x0a,
	0x0a, 0x06, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x63,
	0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x10, 0x07, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x65,
	0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x10, 0x08, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x10, 0x09, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x10, 0x0a, 0x2a, 0x3c, 0x0a, 0x0f,
	0x48, 0x74, 0x74, 0x70, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x16, 0x0a, 0x12, 0x48, 0x74, 0x74, 0x70, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4a, 0x53, 0x4f, 0x4e, 0x10,
	0x01, 0x12, 0x07, 0x0a, 0x03, 0x58, 0x4d, 0x4c, 0x10, 0x02, 0x2a, 0x60, 0x0a, 0x0a, 0x48, 0x74,
	0x74, 0x70, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x15, 0x0a, 0x11, 0x48, 0x74, 0x74, 0x70,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12,
	0x07, 0x0a, 0x03, 0x47, 0x45, 0x54, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x4f, 0x53, 0x54,
	0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x55, 0x54, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x44,
	0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x45, 0x41, 0x44, 0x10,
	0x05, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x41, 0x54, 0x43, 0x48, 0x10, 0x06, 0x2a, 0x56, 0x0a, 0x14,
	0x52, 0x43, 0x50, 0x6f, 0x73, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x53, 0x74, 0x65, 0x70,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x52, 0x43, 0x50, 0x6f, 0x73, 0x74, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x53, 0x74, 0x65, 0x70, 0x54, 0x79, 0x70, 0x65, 0x55, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x10, 0x02, 0x2a, 0x3d, 0x0a, 0x10, 0x52, 0x43, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x43, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x44,
	0x42, 0x10, 0x01, 0x42, 0x37, 0x5a, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x72, 0x65, 0x79, 0x6e, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x72, 0x74, 0x2f, 0x72, 0x63,
	0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2d, 0x6c, 0x69, 0x62, 0x2f, 0x76, 0x32, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x63, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_rc_spec_rc_spec_proto_rawDescOnce sync.Once
	file_proto_rc_spec_rc_spec_proto_rawDescData = file_proto_rc_spec_rc_spec_proto_rawDesc
)

func file_proto_rc_spec_rc_spec_proto_rawDescGZIP() []byte {
	file_proto_rc_spec_rc_spec_proto_rawDescOnce.Do(func() {
		file_proto_rc_spec_rc_spec_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_rc_spec_rc_spec_proto_rawDescData)
	})
	return file_proto_rc_spec_rc_spec_proto_rawDescData
}

var file_proto_rc_spec_rc_spec_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_proto_rc_spec_rc_spec_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_proto_rc_spec_rc_spec_proto_goTypes = []interface{}{
	(FieldType)(0),              // 0: rc_spec.FieldType
	(HttpPayloadType)(0),        // 1: rc_spec.HttpPayloadType
	(HttpMethod)(0),             // 2: rc_spec.HttpMethod
	(RCPostDeployStepType)(0),   // 3: rc_spec.RCPostDeployStepType
	(RCManagedService)(0),       // 4: rc_spec.RCManagedService
	(*RCSpec)(nil),              // 5: rc_spec.RCSpec
	(*RCConfigurationSpec)(nil), // 6: rc_spec.RCConfigurationSpec
	(*Field)(nil),               // 7: rc_spec.Field
	(*RCSolutionInfo)(nil),      // 8: rc_spec.RCSolutionInfo
	(*RCPostDeploy)(nil),        // 9: rc_spec.RCPostDeploy
	(*RCPostDeploySteps)(nil),   // 10: rc_spec.RCPostDeploySteps
	(*RCServices)(nil),          // 11: rc_spec.RCServices
	(*Service)(nil),             // 12: rc_spec.Service
	(*RCUpgrades)(nil),          // 13: rc_spec.RCUpgrades
	(*RCPipeline)(nil),          // 14: rc_spec.RCPipeline
	(*RCPipelineVariables)(nil), // 15: rc_spec.RCPipelineVariables
	(*OperatorConfig)(nil),      // 16: rc_spec.OperatorConfig
	nil,                         // 17: rc_spec.RCSpec.ManagedServicesEntry
	nil,                         // 18: rc_spec.RCSpec.PlatformVariablesEntry
}
var file_proto_rc_spec_rc_spec_proto_depIdxs = []int32{
	6,  // 0: rc_spec.RCSpec.config:type_name -> rc_spec.RCConfigurationSpec
	8,  // 1: rc_spec.RCSpec.solution_info:type_name -> rc_spec.RCSolutionInfo
	9,  // 2: rc_spec.RCSpec.post_deploy:type_name -> rc_spec.RCPostDeploy
	11, // 3: rc_spec.RCSpec.services:type_name -> rc_spec.RCServices
	13, // 4: rc_spec.RCSpec.upgrades:type_name -> rc_spec.RCUpgrades
	17, // 5: rc_spec.RCSpec.managed_services:type_name -> rc_spec.RCSpec.ManagedServicesEntry
	18, // 6: rc_spec.RCSpec.platform_variables:type_name -> rc_spec.RCSpec.PlatformVariablesEntry
	7,  // 7: rc_spec.RCConfigurationSpec.field:type_name -> rc_spec.Field
	0,  // 8: rc_spec.Field.field_type:type_name -> rc_spec.FieldType
	10, // 9: rc_spec.RCPostDeploy.steps:type_name -> rc_spec.RCPostDeploySteps
	3,  // 10: rc_spec.RCPostDeploySteps.step_type:type_name -> rc_spec.RCPostDeployStepType
	2,  // 11: rc_spec.RCPostDeploySteps.method:type_name -> rc_spec.HttpMethod
	1,  // 12: rc_spec.RCPostDeploySteps.payload_type:type_name -> rc_spec.HttpPayloadType
	12, // 13: rc_spec.RCServices.expose:type_name -> rc_spec.Service
	15, // 14: rc_spec.RCPipeline.rc_pipeline_variables:type_name -> rc_spec.RCPipelineVariables
	7,  // 15: rc_spec.OperatorConfig.config:type_name -> rc_spec.Field
	16, // 16: rc_spec.RCSpec.ManagedServicesEntry.value:type_name -> rc_spec.OperatorConfig
	17, // [17:17] is the sub-list for method output_type
	17, // [17:17] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_proto_rc_spec_rc_spec_proto_init() }
func file_proto_rc_spec_rc_spec_proto_init() {
	if File_proto_rc_spec_rc_spec_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_rc_spec_rc_spec_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RCSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rc_spec_rc_spec_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RCConfigurationSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rc_spec_rc_spec_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Field); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rc_spec_rc_spec_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RCSolutionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rc_spec_rc_spec_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RCPostDeploy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rc_spec_rc_spec_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RCPostDeploySteps); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rc_spec_rc_spec_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RCServices); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rc_spec_rc_spec_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Service); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rc_spec_rc_spec_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RCUpgrades); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rc_spec_rc_spec_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RCPipeline); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rc_spec_rc_spec_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RCPipelineVariables); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rc_spec_rc_spec_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperatorConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_rc_spec_rc_spec_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_rc_spec_rc_spec_proto_goTypes,
		DependencyIndexes: file_proto_rc_spec_rc_spec_proto_depIdxs,
		EnumInfos:         file_proto_rc_spec_rc_spec_proto_enumTypes,
		MessageInfos:      file_proto_rc_spec_rc_spec_proto_msgTypes,
	}.Build()
	File_proto_rc_spec_rc_spec_proto = out.File
	file_proto_rc_spec_rc_spec_proto_rawDesc = nil
	file_proto_rc_spec_rc_spec_proto_goTypes = nil
	file_proto_rc_spec_rc_spec_proto_depIdxs = nil
}
