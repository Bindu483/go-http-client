// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.12.4
// source: proto/deployment_manager.proto

package deploymentManager

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	app "github.com/reynencourt/rc-common-lib/v2/proto/app"
	deploy_app "github.com/reynencourt/rc-common-lib/v2/proto/deploy_app"
	rc_spec "github.com/reynencourt/rc-common-lib/v2/proto/rc_spec"
	resource "github.com/reynencourt/rc-common-lib/v2/proto/resource"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ManagedServiceDeployStatus int32

const (
	ManagedServiceDeployStatus_ManagedServiceDeployStatusUnknown  ManagedServiceDeployStatus = 0
	ManagedServiceDeployStatus_ManagedServiceDeployStatusSuccess  ManagedServiceDeployStatus = 1
	ManagedServiceDeployStatus_ManagedServiceDeployStatusFailed   ManagedServiceDeployStatus = 2
	ManagedServiceDeployStatus_ManagedServiceDeployStatusProgress ManagedServiceDeployStatus = 3
)

// Enum value maps for ManagedServiceDeployStatus.
var (
	ManagedServiceDeployStatus_name = map[int32]string{
		0: "ManagedServiceDeployStatusUnknown",
		1: "ManagedServiceDeployStatusSuccess",
		2: "ManagedServiceDeployStatusFailed",
		3: "ManagedServiceDeployStatusProgress",
	}
	ManagedServiceDeployStatus_value = map[string]int32{
		"ManagedServiceDeployStatusUnknown":  0,
		"ManagedServiceDeployStatusSuccess":  1,
		"ManagedServiceDeployStatusFailed":   2,
		"ManagedServiceDeployStatusProgress": 3,
	}
)

func (x ManagedServiceDeployStatus) Enum() *ManagedServiceDeployStatus {
	p := new(ManagedServiceDeployStatus)
	*p = x
	return p
}

func (x ManagedServiceDeployStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ManagedServiceDeployStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_deployment_manager_proto_enumTypes[0].Descriptor()
}

func (ManagedServiceDeployStatus) Type() protoreflect.EnumType {
	return &file_proto_deployment_manager_proto_enumTypes[0]
}

func (x ManagedServiceDeployStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ManagedServiceDeployStatus.Descriptor instead.
func (ManagedServiceDeployStatus) EnumDescriptor() ([]byte, []int) {
	return file_proto_deployment_manager_proto_rawDescGZIP(), []int{0}
}

type AppDownloadState int32

const (
	AppDownloadState_AppDownloadStateUnknown       AppDownloadState = 0
	AppDownloadState_Success                       AppDownloadState = 1
	AppDownloadState_AppDownloadStateFailed        AppDownloadState = 2
	AppDownloadState_InProgress                    AppDownloadState = 3
	AppDownloadState_DownloadingDependencies       AppDownloadState = 4
	AppDownloadState_DownloadingDependenciesFailed AppDownloadState = 5
)

// Enum value maps for AppDownloadState.
var (
	AppDownloadState_name = map[int32]string{
		0: "AppDownloadStateUnknown",
		1: "Success",
		2: "AppDownloadStateFailed",
		3: "InProgress",
		4: "DownloadingDependencies",
		5: "DownloadingDependenciesFailed",
	}
	AppDownloadState_value = map[string]int32{
		"AppDownloadStateUnknown":       0,
		"Success":                       1,
		"AppDownloadStateFailed":        2,
		"InProgress":                    3,
		"DownloadingDependencies":       4,
		"DownloadingDependenciesFailed": 5,
	}
)

func (x AppDownloadState) Enum() *AppDownloadState {
	p := new(AppDownloadState)
	*p = x
	return p
}

func (x AppDownloadState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AppDownloadState) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_deployment_manager_proto_enumTypes[1].Descriptor()
}

func (AppDownloadState) Type() protoreflect.EnumType {
	return &file_proto_deployment_manager_proto_enumTypes[1]
}

func (x AppDownloadState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AppDownloadState.Descriptor instead.
func (AppDownloadState) EnumDescriptor() ([]byte, []int) {
	return file_proto_deployment_manager_proto_rawDescGZIP(), []int{1}
}

type EventTriggeredByAction int32

const (
	EventTriggeredByAction_DeploymentEventType_Unknown EventTriggeredByAction = 0
	EventTriggeredByAction_Deployment                  EventTriggeredByAction = 1
	EventTriggeredByAction_ConfigUpdate                EventTriggeredByAction = 2
	EventTriggeredByAction_Upgrade                     EventTriggeredByAction = 3
	EventTriggeredByAction_Backup                      EventTriggeredByAction = 4
	EventTriggeredByAction_Restore                     EventTriggeredByAction = 5
	EventTriggeredByAction_HealthCheck                 EventTriggeredByAction = 6
)

// Enum value maps for EventTriggeredByAction.
var (
	EventTriggeredByAction_name = map[int32]string{
		0: "DeploymentEventType_Unknown",
		1: "Deployment",
		2: "ConfigUpdate",
		3: "Upgrade",
		4: "Backup",
		5: "Restore",
		6: "HealthCheck",
	}
	EventTriggeredByAction_value = map[string]int32{
		"DeploymentEventType_Unknown": 0,
		"Deployment":                  1,
		"ConfigUpdate":                2,
		"Upgrade":                     3,
		"Backup":                      4,
		"Restore":                     5,
		"HealthCheck":                 6,
	}
)

func (x EventTriggeredByAction) Enum() *EventTriggeredByAction {
	p := new(EventTriggeredByAction)
	*p = x
	return p
}

func (x EventTriggeredByAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventTriggeredByAction) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_deployment_manager_proto_enumTypes[2].Descriptor()
}

func (EventTriggeredByAction) Type() protoreflect.EnumType {
	return &file_proto_deployment_manager_proto_enumTypes[2]
}

func (x EventTriggeredByAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventTriggeredByAction.Descriptor instead.
func (EventTriggeredByAction) EnumDescriptor() ([]byte, []int) {
	return file_proto_deployment_manager_proto_rawDescGZIP(), []int{2}
}

type UpgradeOperationType int32

const (
	UpgradeOperationType_UpgradeOperationTypeUnknown UpgradeOperationType = 0
	UpgradeOperationType_AppUpgrade                  UpgradeOperationType = 1
	UpgradeOperationType_AppConfigUpdate             UpgradeOperationType = 2
)

// Enum value maps for UpgradeOperationType.
var (
	UpgradeOperationType_name = map[int32]string{
		0: "UpgradeOperationTypeUnknown",
		1: "AppUpgrade",
		2: "AppConfigUpdate",
	}
	UpgradeOperationType_value = map[string]int32{
		"UpgradeOperationTypeUnknown": 0,
		"AppUpgrade":                  1,
		"AppConfigUpdate":             2,
	}
)

func (x UpgradeOperationType) Enum() *UpgradeOperationType {
	p := new(UpgradeOperationType)
	*p = x
	return p
}

func (x UpgradeOperationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpgradeOperationType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_deployment_manager_proto_enumTypes[3].Descriptor()
}

func (UpgradeOperationType) Type() protoreflect.EnumType {
	return &file_proto_deployment_manager_proto_enumTypes[3]
}

func (x UpgradeOperationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpgradeOperationType.Descriptor instead.
func (UpgradeOperationType) EnumDescriptor() ([]byte, []int) {
	return file_proto_deployment_manager_proto_rawDescGZIP(), []int{3}
}

type SolutionType int32

const (
	SolutionType_SolutionType_Unknown SolutionType = 0
	SolutionType_Vendor               SolutionType = 1
)

// Enum value maps for SolutionType.
var (
	SolutionType_name = map[int32]string{
		0: "SolutionType_Unknown",
		1: "Vendor",
	}
	SolutionType_value = map[string]int32{
		"SolutionType_Unknown": 0,
		"Vendor":               1,
	}
)

func (x SolutionType) Enum() *SolutionType {
	p := new(SolutionType)
	*p = x
	return p
}

func (x SolutionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SolutionType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_deployment_manager_proto_enumTypes[4].Descriptor()
}

func (SolutionType) Type() protoreflect.EnumType {
	return &file_proto_deployment_manager_proto_enumTypes[4]
}

func (x SolutionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SolutionType.Descriptor instead.
func (SolutionType) EnumDescriptor() ([]byte, []int) {
	return file_proto_deployment_manager_proto_rawDescGZIP(), []int{4}
}

type EventType int32

const (
	EventType_BackupEvent                EventType = 0
	EventType_IngressControllerEvent     EventType = 1
	EventType_RollbackEvent              EventType = 2
	EventType_RollbackResourceQuotaEvent EventType = 3
)

// Enum value maps for EventType.
var (
	EventType_name = map[int32]string{
		0: "BackupEvent",
		1: "IngressControllerEvent",
		2: "RollbackEvent",
		3: "RollbackResourceQuotaEvent",
	}
	EventType_value = map[string]int32{
		"BackupEvent":                0,
		"IngressControllerEvent":     1,
		"RollbackEvent":              2,
		"RollbackResourceQuotaEvent": 3,
	}
)

func (x EventType) Enum() *EventType {
	p := new(EventType)
	*p = x
	return p
}

func (x EventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_deployment_manager_proto_enumTypes[5].Descriptor()
}

func (EventType) Type() protoreflect.EnumType {
	return &file_proto_deployment_manager_proto_enumTypes[5]
}

func (x EventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventType.Descriptor instead.
func (EventType) EnumDescriptor() ([]byte, []int) {
	return file_proto_deployment_manager_proto_rawDescGZIP(), []int{5}
}

type EventTypeStatus int32

const (
	EventTypeStatus_Completed  EventTypeStatus = 0
	EventTypeStatus_Init       EventTypeStatus = 1
	EventTypeStatus_Failed     EventTypeStatus = 2
	EventTypeStatus_Inprogress EventTypeStatus = 3
)

// Enum value maps for EventTypeStatus.
var (
	EventTypeStatus_name = map[int32]string{
		0: "Completed",
		1: "Init",
		2: "Failed",
		3: "Inprogress",
	}
	EventTypeStatus_value = map[string]int32{
		"Completed":  0,
		"Init":       1,
		"Failed":     2,
		"Inprogress": 3,
	}
)

func (x EventTypeStatus) Enum() *EventTypeStatus {
	p := new(EventTypeStatus)
	*p = x
	return p
}

func (x EventTypeStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventTypeStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_deployment_manager_proto_enumTypes[6].Descriptor()
}

func (EventTypeStatus) Type() protoreflect.EnumType {
	return &file_proto_deployment_manager_proto_enumTypes[6]
}

func (x EventTypeStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventTypeStatus.Descriptor instead.
func (EventTypeStatus) EnumDescriptor() ([]byte, []int) {
	return file_proto_deployment_manager_proto_rawDescGZIP(), []int{6}
}

type K8SResourceType int32

const (
	K8SResourceType_ALL       K8SResourceType = 0
	K8SResourceType_PV        K8SResourceType = 1
	K8SResourceType_PVC       K8SResourceType = 2
	K8SResourceType_SERVICE   K8SResourceType = 3
	K8SResourceType_INGRESS   K8SResourceType = 4
	K8SResourceType_SECRETS   K8SResourceType = 5
	K8SResourceType_CONFIGMAP K8SResourceType = 6
	K8SResourceType_CRD       K8SResourceType = 7
)

// Enum value maps for K8SResourceType.
var (
	K8SResourceType_name = map[int32]string{
		0: "ALL",
		1: "PV",
		2: "PVC",
		3: "SERVICE",
		4: "INGRESS",
		5: "SECRETS",
		6: "CONFIGMAP",
		7: "CRD",
	}
	K8SResourceType_value = map[string]int32{
		"ALL":       0,
		"PV":        1,
		"PVC":       2,
		"SERVICE":   3,
		"INGRESS":   4,
		"SECRETS":   5,
		"CONFIGMAP": 6,
		"CRD":       7,
	}
)

func (x K8SResourceType) Enum() *K8SResourceType {
	p := new(K8SResourceType)
	*p = x
	return p
}

func (x K8SResourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (K8SResourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_deployment_manager_proto_enumTypes[7].Descriptor()
}

func (K8SResourceType) Type() protoreflect.EnumType {
	return &file_proto_deployment_manager_proto_enumTypes[7]
}

func (x K8SResourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use K8SResourceType.Descriptor instead.
func (K8SResourceType) EnumDescriptor() ([]byte, []int) {
	return file_proto_deployment_manager_proto_rawDescGZIP(), []int{7}
}

type DeploymentEventLevel int32

const (
	DeploymentEventLevel_DeploymentEventLevel_Unknown DeploymentEventLevel = 0
	DeploymentEventLevel_Debug                        DeploymentEventLevel = 1
	DeploymentEventLevel_Error                        DeploymentEventLevel = 2
	DeploymentEventLevel_Fatal                        DeploymentEventLevel = 3
	DeploymentEventLevel_Info                         DeploymentEventLevel = 4
	DeploymentEventLevel_Panic                        DeploymentEventLevel = 5
	DeploymentEventLevel_Trace                        DeploymentEventLevel = 6
	DeploymentEventLevel_Warn                         DeploymentEventLevel = 7
)

// Enum value maps for DeploymentEventLevel.
var (
	DeploymentEventLevel_name = map[int32]string{
		0: "DeploymentEventLevel_Unknown",
		1: "Debug",
		2: "Error",
		3: "Fatal",
		4: "Info",
		5: "Panic",
		6: "Trace",
		7: "Warn",
	}
	DeploymentEventLevel_value = map[string]int32{
		"DeploymentEventLevel_Unknown": 0,
		"Debug":                        1,
		"Error":                        2,
		"Fatal":                        3,
		"Info":                         4,
		"Panic":                        5,
		"Trace":                        6,
		"Warn":                         7,
	}
)

func (x DeploymentEventLevel) Enum() *DeploymentEventLevel {
	p := new(DeploymentEventLevel)
	*p = x
	return p
}

func (x DeploymentEventLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeploymentEventLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_deployment_manager_proto_enumTypes[8].Descriptor()
}

func (DeploymentEventLevel) Type() protoreflect.EnumType {
	return &file_proto_deployment_manager_proto_enumTypes[8]
}

func (x DeploymentEventLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeploymentEventLevel.Descriptor instead.
func (DeploymentEventLevel) EnumDescriptor() ([]byte, []int) {
	return file_proto_deployment_manager_proto_rawDescGZIP(), []int{8}
}

type ManagedServiceDownloadStatus int32

const (
	ManagedServiceDownloadStatus_ManagedServiceDownloadStatusUnknown        ManagedServiceDownloadStatus = 0
	ManagedServiceDownloadStatus_ManagedServiceDownloadStatusSuccess        ManagedServiceDownloadStatus = 1
	ManagedServiceDownloadStatus_ManagedServiceDownloadStatusFailed         ManagedServiceDownloadStatus = 2
	ManagedServiceDownloadStatus_ManagedServiceDownloadStatusProgress       ManagedServiceDownloadStatus = 3
	ManagedServiceDownloadStatus_ManagedServiceDownloadStatusToBeDownloaded ManagedServiceDownloadStatus = 4
)

// Enum value maps for ManagedServiceDownloadStatus.
var (
	ManagedServiceDownloadStatus_name = map[int32]string{
		0: "ManagedServiceDownloadStatusUnknown",
		1: "ManagedServiceDownloadStatusSuccess",
		2: "ManagedServiceDownloadStatusFailed",
		3: "ManagedServiceDownloadStatusProgress",
		4: "ManagedServiceDownloadStatusToBeDownloaded",
	}
	ManagedServiceDownloadStatus_value = map[string]int32{
		"ManagedServiceDownloadStatusUnknown":        0,
		"ManagedServiceDownloadStatusSuccess":        1,
		"ManagedServiceDownloadStatusFailed":         2,
		"ManagedServiceDownloadStatusProgress":       3,
		"ManagedServiceDownloadStatusToBeDownloaded": 4,
	}
)

func (x ManagedServiceDownloadStatus) Enum() *ManagedServiceDownloadStatus {
	p := new(ManagedServiceDownloadStatus)
	*p = x
	return p
}

func (x ManagedServiceDownloadStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ManagedServiceDownloadStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_deployment_manager_proto_enumTypes[9].Descriptor()
}

func (ManagedServiceDownloadStatus) Type() protoreflect.EnumType {
	return &file_proto_deployment_manager_proto_enumTypes[9]
}

func (x ManagedServiceDownloadStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ManagedServiceDownloadStatus.Descriptor instead.
func (ManagedServiceDownloadStatus) EnumDescriptor() ([]byte, []int) {
	return file_proto_deployment_manager_proto_rawDescGZIP(), []int{9}
}

type UpdateStep int32

const (
	UpdateStep_UpdateStep_Unknown    UpdateStep = 0
	UpdateStep_RemoveIngress         UpdateStep = 1
	UpdateStep_BackupDeployment      UpdateStep = 2
	UpdateStep_IncreaseResourceQuota UpdateStep = 3
	UpdateStep_Process               UpdateStep = 4
	UpdateStep_RollBackResourceQuota UpdateStep = 5
	UpdateStep_RollbackIngress       UpdateStep = 6
)

// Enum value maps for UpdateStep.
var (
	UpdateStep_name = map[int32]string{
		0: "UpdateStep_Unknown",
		1: "RemoveIngress",
		2: "BackupDeployment",
		3: "IncreaseResourceQuota",
		4: "Process",
		5: "RollBackResourceQuota",
		6: "RollbackIngress",
	}
	UpdateStep_value = map[string]int32{
		"UpdateStep_Unknown":    0,
		"RemoveIngress":         1,
		"BackupDeployment":      2,
		"IncreaseResourceQuota": 3,
		"Process":               4,
		"RollBackResourceQuota": 5,
		"RollbackIngress":       6,
	}
)

func (x UpdateStep) Enum() *UpdateStep {
	p := new(UpdateStep)
	*p = x
	return p
}

func (x UpdateStep) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateStep) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_deployment_manager_proto_enumTypes[10].Descriptor()
}

func (UpdateStep) Type() protoreflect.EnumType {
	return &file_proto_deployment_manager_proto_enumTypes[10]
}

func (x UpdateStep) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateStep.Descriptor instead.
func (UpdateStep) EnumDescriptor() ([]byte, []int) {
	return file_proto_deployment_manager_proto_rawDescGZIP(), []int{10}
}

type DeploymentKongEventOperation int32

const (
	DeploymentKongEventOperation_DeploymentEventOperationUnknown DeploymentKongEventOperation = 0
	DeploymentKongEventOperation_Create                          DeploymentKongEventOperation = 1
	DeploymentKongEventOperation_Delete                          DeploymentKongEventOperation = 2
)

// Enum value maps for DeploymentKongEventOperation.
var (
	DeploymentKongEventOperation_name = map[int32]string{
		0: "DeploymentEventOperationUnknown",
		1: "Create",
		2: "Delete",
	}
	DeploymentKongEventOperation_value = map[string]int32{
		"DeploymentEventOperationUnknown": 0,
		"Create":                          1,
		"Delete":                          2,
	}
)

func (x DeploymentKongEventOperation) Enum() *DeploymentKongEventOperation {
	p := new(DeploymentKongEventOperation)
	*p = x
	return p
}

func (x DeploymentKongEventOperation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeploymentKongEventOperation) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_deployment_manager_proto_enumTypes[11].Descriptor()
}

func (DeploymentKongEventOperation) Type() protoreflect.EnumType {
	return &file_proto_deployment_manager_proto_enumTypes[11]
}

func (x DeploymentKongEventOperation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeploymentKongEventOperation.Descriptor instead.
func (DeploymentKongEventOperation) EnumDescriptor() ([]byte, []int) {
	return file_proto_deployment_manager_proto_rawDescGZIP(), []int{11}
}

type Metadata_Engine int32

const (
	Metadata_UNKNOWN Metadata_Engine = 0
	Metadata_GOTPL   Metadata_Engine = 1
)

// Enum value maps for Metadata_Engine.
var (
	Metadata_Engine_name = map[int32]string{
		0: "UNKNOWN",
		1: "GOTPL",
	}
	Metadata_Engine_value = map[string]int32{
		"UNKNOWN": 0,
		"GOTPL":   1,
	}
)

func (x Metadata_Engine) Enum() *Metadata_Engine {
	p := new(Metadata_Engine)
	*p = x
	return p
}

func (x Metadata_Engine) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Metadata_Engine) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_deployment_manager_proto_enumTypes[12].Descriptor()
}

func (Metadata_Engine) Type() protoreflect.EnumType {
	return &file_proto_deployment_manager_proto_enumTypes[12]
}

func (x Metadata_Engine) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Metadata_Engine.Descriptor instead.
func (Metadata_Engine) EnumDescriptor() ([]byte, []int) {
	return file_proto_deployment_manager_proto_rawDescGZIP(), []int{67, 0}
}

type MoveClusterReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	ProjectId string `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
}

func (x *MoveClusterReq) Reset() {
	*x = MoveClusterReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_deployment_manager_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoveClusterReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveClusterReq) ProtoMessage() {}

func (x *MoveClusterReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_deployment_manager_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveClusterReq.ProtoReflect.Descriptor instead.
func (*MoveClusterReq) Descriptor() ([]byte, []int) {
	return file_proto_deployment_manager_proto_rawDescGZIP(), []int{0}
}

func (x *MoveClusterReq) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *MoveClusterReq) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

type MoveClusterRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *MoveClusterRes) Reset() {
	*x = MoveClusterRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_deployment_manager_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoveClusterRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveClusterRes) ProtoMessage() {}

func (x *MoveClusterRes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_deployment_manager_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveClusterRes.ProtoReflect.Descriptor instead.
func (*MoveClusterRes) Descriptor() ([]byte, []int) {
	return file_proto_deployment_manager_proto_rawDescGZIP(), []int{1}
}

func (x *MoveClusterRes) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type GetAppMetadataReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SolutionId string `protobuf:"bytes,1,opt,name=solution_id,json=solutionId,proto3" json:"solution_id,omitempty"`
	Version    string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *GetAppMetadataReq) Reset() {
	*x = GetAppMetadataReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_deployment_manager_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppMetadataReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppMetadataReq) ProtoMessage() {}

func (x *GetAppMetadataReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_deployment_manager_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppMetadataReq.ProtoReflect.Descriptor instead.
func (*GetAppMetadataReq) Descriptor() ([]byte, []int) {
	return file_proto_deployment_manager_proto_rawDescGZIP(), []int{2}
}

func (x *GetAppMetadataReq) GetSolutionId() string {
	if x != nil {
		return x.SolutionId
	}
	return ""
}

func (x *GetAppMetadataReq) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type GetAppMetadataRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *AppMetadata `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetAppMetadataRes) Reset() {
	*x = GetAppMetadataRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_deployment_manager_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppMetadataRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppMetadataRes) ProtoMessage() {}

func (x *GetAppMetadataRes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_deployment_manager_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppMetadataRes.ProtoReflect.Descriptor instead.
func (*GetAppMetadataRes) Descriptor() ([]byte, []int) {
	return file_proto_deployment_manager_proto_rawDescGZIP(), []int{3}
}

func (x *GetAppMetadataRes) GetData() *AppMetadata {
	if x != nil {
		return x.Data
	}
	return nil
}

type AppMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SolutionId            string                                    `protobuf:"bytes,1,opt,name=solution_id,json=solutionId,proto3" json:"solution_id,omitempty"`
	SolutionName          string                                    `protobuf:"bytes,2,opt,name=solution_name,json=solutionName,proto3" json:"solution_name,omitempty"`
	Icon                  string                                    `protobuf:"bytes,3,opt,name=icon,proto3" json:"icon,omitempty"`
	AppVersion            string                                    `protobuf:"bytes,4,opt,name=app_version,json=appVersion,proto3" json:"app_version,omitempty"`
	ChartVersion          string                                    `protobuf:"bytes,5,opt,name=chart_version,json=chartVersion,proto3" json:"chart_version,omitempty"`
	Status                AppDownloadState                          `protobuf:"varint,6,opt,name=status,proto3,enum=deploymentManager.AppDownloadState" json:"status,omitempty"`
	Type                  SolutionType                              `protobuf:"varint,7,opt,name=type,proto3,enum=deploymentManager.SolutionType" json:"type,omitempty"`
	DownloadedTime        string                                    `protobuf:"bytes,8,opt,name=downloaded_time,json=downloadedTime,proto3" json:"downloaded_time,omitempty"`
	ChartMetadata         *Metadata                                 `protobuf:"bytes,9,opt,name=chart_metadata,json=chartMetadata,proto3" json:"chart_metadata,omitempty"`
	ManagedServicesStatus map[string]*ManagedServiceDownloadDetails `protobuf:"bytes,10,rep,name=managed_services_status,json=managedServicesStatus,proto3" json:"managed_services_status,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AppMetadata) Reset() {
	*x = AppMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_deployment_manager_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppMetadata) ProtoMessage() {}

func (x *AppMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_proto_deployment_manager_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppMetadata.ProtoReflect.Descriptor instead.
func (*AppMetadata) Descriptor() ([]byte, []int) {
	return file_proto_deployment_manager_proto_rawDescGZIP(), []int{4}
}

func (x *AppMetadata) GetSolutionId() string {
	if x != nil {
		return x.SolutionId
	}
	return ""
}

func (x *AppMetadata) GetSolutionName() string {
	if x != nil {
		return x.SolutionName
	}
	return ""
}

func (x *AppMetadata) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *AppMetadata) GetAppVersion() string {
	if x != nil {
		return x.AppVersion
	}
	return ""
}

func (x *AppMetadata) GetChartVersion() string {
	if x != nil {
		return x.ChartVersion
	}
	return ""
}

func (x *AppMetadata) GetStatus() AppDownloadState {
	if x != nil {
		return x.Status
	}
	return AppDownloadState_AppDownloadStateUnknown
}

func (x *AppMetadata) GetType() SolutionType {
	if x != nil {
		return x.Type
	}
	return SolutionType_SolutionType_Unknown
}

func (x *AppMetadata) GetDownloadedTime() string {
	if x != nil {
		return x.DownloadedTime
	}
	return ""
}

func (x *AppMetadata) GetChartMetadata() *Metadata {
	if x != nil {
		return x.ChartMetadata
	}
	return nil
}

func (x *AppMetadata) GetManagedServicesStatus() map[string]*ManagedServiceDownloadDetails {
	if x != nil {
		return x.ManagedServicesStatus
	}
	return nil
}

type GetSolutionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SolutionId string `protobuf:"bytes,1,opt,name=solution_id,json=solutionId,proto3" json:"solution_id,omitempty"`
}

func (x *GetSolutionRequest) Reset() {
	*x = GetSolutionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_deployment_manager_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSolutionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSolutionRequest) ProtoMessage() {}

func (x *GetSolutionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_deployment_manager_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSolutionRequest.ProtoReflect.Descriptor instead.
func (*GetSolutionRequest) Descriptor() ([]byte, []int) {
	return file_proto_deployment_manager_proto_rawDescGZIP(), []int{5}
}

func (x *GetSolutionRequest) GetSolutionId() string {
	if x != nil {
		return x.SolutionId
	}
	return ""
}

type GetSolutionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *Solution `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetSolutionResponse) Reset() {
	*x = GetSolutionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_deployment_manager_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSolutionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSolutionResponse) ProtoMessage() {}

func (x *GetSolutionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_deployment_manager_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSolutionResponse.ProtoReflect.Descriptor instead.
func (*GetSolutionResponse) Descriptor() ([]byte, []int) {
	return file_proto_deployment_manager_proto_rawDescGZIP(), []int{6}
}

func (x *GetSolutionResponse) GetData() *Solution {
	if x != nil {
		return x.Data
	}
	return nil
}

type ListDeploymentsWithFilterReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueryParams map[string]string `protobuf:"bytes,1,rep,name=query_params,json=queryParams,proto3" json:"query_params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ListDeploymentsWithFilterReq) Reset() {
	*x = ListDeploymentsWithFilterReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_deployment_manager_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDeploymentsWithFilterReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDeploymentsWithFilterReq) ProtoMessage() {}

func (x *ListDeploymentsWithFilterReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_deployment_manager_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDeploymentsWithFilterReq.ProtoReflect.Descriptor instead.
func (*ListDeploymentsWithFilterReq) Descriptor() ([]byte, []int) {
	return file_proto_deployment_manager_proto_rawDescGZIP(), []int{7}
}

func (x *ListDeploymentsWithFilterReq) GetQueryParams() map[string]string {
	if x != nil {
		return x.QueryParams
	}
	return nil
}

type ListDeploymentsWithFilterRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*DeploymentInfo `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ListDeploymentsWithFilterRes) Reset() {
	*x = ListDeploymentsWithFilterRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_deployment_manager_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDeploymentsWithFilterRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDeploymentsWithFilterRes) ProtoMessage() {}

func (x *ListDeploymentsWithFilterRes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_deployment_manager_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDeploymentsWithFilterRes.ProtoReflect.Descriptor instead.
func (*ListDeploymentsWithFilterRes) Descriptor() ([]byte, []int) {
	return file_proto_deployment_manager_proto_rawDescGZIP(), []int{8}
}

func (x *ListDeploymentsWithFilterRes) GetData() []*DeploymentInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type UpgradeAppResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *UpgradeAppResponse) Reset() {
	*x = UpgradeAppResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_deployment_manager_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpgradeAppResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeAppResponse) ProtoMessage() {}

func (x *UpgradeAppResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_deployment_manager_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeAppResponse.ProtoReflect.Descriptor instead.
func (*UpgradeAppResponse) Descriptor() ([]byte, []int) {
	return file_proto_deployment_manager_proto_rawDescGZIP(), []int{9}
}

func (x *UpgradeAppResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type UpgradeAppRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpgradeToVersion string        `protobuf:"bytes,1,opt,name=upgrade_to_version,json=upgradeToVersion,proto3" json:"upgrade_to_version,omitempty"`
	DeploymentId     string        `protobuf:"bytes,2,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
	Config           *DeployConfig `protobuf:"bytes,3,opt,name=config,proto3" json:"config,omitempty"`
	User             string        `protobuf:"bytes,4,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *UpgradeAppRequest) Reset() {
	*x = UpgradeAppRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_deployment_manager_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpgradeAppRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeAppRequest) ProtoMessage() {}

func (x *UpgradeAppRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_deployment_manager_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeAppRequest.ProtoReflect.Descriptor instead.
func (*UpgradeAppRequest) Descriptor() ([]byte, []int) {
	return file_proto_deployment_manager_proto_rawDescGZIP(), []int{10}
}

func (x *UpgradeAppRequest) GetUpgradeToVersion() string {
	if x != nil {
		return x.UpgradeToVersion
	}
	return ""
}

func (x *UpgradeAppRequest) GetDeploymentId() string {
	if x != nil {
		return x.DeploymentId
	}
	return ""
}

func (x *UpgradeAppRequest) GetConfig() *DeployConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *UpgradeAppRequest) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

type DownloadReleaseReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SolutionId string `protobuf:"bytes,1,opt,name=solution_id,json=solutionId,proto3" json:"solution_id,omitempty"`
	Version    string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *DownloadReleaseReq) Reset() {
	*x = DownloadReleaseReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_deployment_manager_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadReleaseReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadReleaseReq) ProtoMessage() {}

func (x *DownloadReleaseReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_deployment_manager_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadReleaseReq.ProtoReflect.Descriptor instead.
func (*DownloadReleaseReq) Descriptor() ([]byte, []int) {
	return file_proto_deployment_manager_proto_rawDescGZIP(), []int{11}
}

func (x *DownloadReleaseReq) GetSolutionId() string {
	if x != nil {
		return x.SolutionId
	}
	return ""
}

func (x *DownloadReleaseReq) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type DownloadReleaseRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *DownloadReleaseRes) Reset() {
	*x = DownloadReleaseRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_deployment_manager_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadReleaseRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadReleaseRes) ProtoMessage() {}

func (x *DownloadReleaseRes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_deployment_manager_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadReleaseRes.ProtoReflect.Descriptor instead.
func (*DownloadReleaseRes) Descriptor() ([]byte, []int) {
	return file_proto_deployment_manager_proto_rawDescGZIP(), []int{12}
}

func (x *DownloadReleaseRes) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type ResourceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Requested *resource.Resources `protobuf:"bytes,1,opt,name=requested,proto3" json:"requested,omitempty"`
	Used      *resource.Resources `protobuf:"bytes,2,opt,name=used,proto3" json:"used,omitempty"`
}

func (x *ResourceInfo) Reset() {
	*x = ResourceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_deployment_manager_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceInfo) ProtoMessage() {}

func (x *ResourceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_deployment_manager_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceInfo.ProtoReflect.Descriptor instead.
func (*ResourceInfo) Descriptor() ([]byte, []int) {
	return file_proto_deployment_manager_proto_rawDescGZIP(), []int{13}
}

func (x *ResourceInfo) GetRequested() *resource.Resources {
	if x != nil {
		return x.Requested
	}
	return nil
}

func (x *ResourceInfo) GetUsed() *resource.Resources {
	if x != nil {
		return x.Used
	}
	return nil
}

type ManagedService struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string                     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version      string                     `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Input        map[string]string          `protobuf:"bytes,3,rep,name=input,proto3" json:"input,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Output       map[string]string          `protobuf:"bytes,4,rep,name=output,proto3" json:"output,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DeployStatus ManagedServiceDeployStatus `protobuf:"varint,5,opt,name=deploy_status,json=deployStatus,proto3,enum=deploymentManager.ManagedServiceDeployStatus" json:"deploy_status,omitempty"`
}

func (x *ManagedService) Reset() {
	*x = ManagedService{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_deployment_manager_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManagedService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagedService) ProtoMessage() {}

func (x *ManagedService) ProtoReflect() protoreflect.Message {
	mi := &file_proto_deployment_manager_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagedService.ProtoReflect.Descriptor instead.
func (*ManagedService) Descriptor() ([]byte, []int) {
	return file_proto_deployment_manager_proto_rawDescGZIP(), []int{14}
}

func (x *ManagedService) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ManagedService) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ManagedService) GetInput() map[string]string {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *ManagedService) GetOutput() map[string]string {
	if x != nil {
		return x.Output
	}
	return nil
}

func (x *ManagedService) GetDeployStatus() ManagedServiceDeployStatus {
	if x != nil {
		return x.DeployStatus
	}
	return ManagedServiceDeployStatus_ManagedServiceDeployStatusUnknown
}

type DeployAppRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId      string        `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	SolutionId     string        `protobuf:"bytes,2,opt,name=solution_id,json=solutionId,proto3" json:"solution_id,omitempty"`
	Version        string        `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	DeploymentName string        `protobuf:"bytes,4,opt,name=deployment_name,json=deploymentName,proto3" json:"deployment_name,omitempty"`
	Config         *DeployConfig `protobuf:"bytes,5,opt,name=config,proto3" json:"config,omitempty"`
	User           string        `protobuf:"bytes,6,opt,name=user,proto3" json:"user,omitempty"`
	DeploymentId   string        `protobuf:"bytes,7,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
	ProjectId      string        `protobuf:"bytes,8,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
}

func (x *DeployAppRequest) Reset() {
	*x = DeployAppRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_deployment_manager_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeployAppRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeployAppRequest) ProtoMessage() {}

func (x *DeployAppRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_deployment_manager_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeployAppRequest.ProtoReflect.Descriptor instead.
func (*DeployAppRequest) Descriptor() ([]byte, []int) {
	return file_proto_deployment_manager_proto_rawDescGZIP(), []int{15}
}

func (x *DeployAppRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *DeployAppRequest) GetSolutionId() string {
	if x != nil {
		return x.SolutionId
	}
	return ""
}

func (x *DeployAppRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *DeployAppRequest) GetDeploymentName() string {
	if x != nil {
		return x.DeploymentName
	}
	return ""
}

func (x *DeployAppRequest) GetConfig() *DeployConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *DeployAppRequest) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *DeployAppRequest) GetDeploymentId() string {
	if x != nil {
		return x.DeploymentId
	}
	return ""
}

func (x *DeployAppRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

type Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config map[string]string `protobuf:"bytes,1,rep,name=config,proto3" json:"config,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Config) Reset() {
	*x = Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_deployment_manager_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_proto_deployment_manager_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_proto_deployment_manager_proto_rawDescGZIP(), []int{16}
}

func (x *Config) GetConfig() map[string]string {
	if x != nil {
		return x.Config
	}
	return nil
}

type DeployConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppConfig           *Config            `protobuf:"bytes,1,opt,name=app_config,json=appConfig,proto3" json:"app_config,omitempty"`
	OperatorConfig      map[string]*Config `protobuf:"bytes,2,rep,name=operator_config,json=operatorConfig,proto3" json:"operator_config,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StorageClassMapping map[string]string  `protobuf:"bytes,3,rep,name=storage_class_mapping,json=storageClassMapping,proto3" json:"storage_class_mapping,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DeployConfig) Reset() {
	*x = DeployConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_deployment_manager_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeployConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeployConfig) ProtoMessage() {}

func (x *DeployConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_deployment_manager_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeployConfig.ProtoReflect.Descriptor instead.
func (*DeployConfig) Descriptor() ([]byte, []int) {
	return file_proto_deployment_manager_proto_rawDescGZIP(), []int{17}
}

func (x *DeployConfig) GetAppConfig() *Config {
	if x != nil {
		return x.AppConfig
	}
	return nil
}

func (x *DeployConfig) GetOperatorConfig() map[string]*Config {
	if x != nil {
		return x.OperatorConfig
	}
	return nil
}

func (x *DeployConfig) GetStorageClassMapping() map[string]string {
	if x != nil {
		return x.StorageClassMapping
	}
	return nil
}

type DeployAppResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success      bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	DeploymentId string `protobuf:"bytes,2,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
}

func (x *DeployAppResponse) Reset() {
	*x = DeployAppResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_deployment_manager_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeployAppResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeployAppResponse) ProtoMessage() {}

func (x *DeployAppResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_deployment_manager_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeployAppResponse.ProtoReflect.Descriptor instead.
func (*DeployAppResponse) Descriptor() ([]byte, []int) {
	return file_proto_deployment_manager_proto_rawDescGZIP(), []int{18}
}

func (x *DeployAppResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DeployAppResponse) GetDeploymentId() string {
	if x != nil {
		return x.DeploymentId
	}
	return ""
}

type GetAppRcSpecReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SolutionId string `protobuf:"bytes,1,opt,name=solution_id,json=solutionId,proto3" json:"solution_id,omitempty"`
	Version    string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *GetAppRcSpecReq) Reset() {
	*x = GetAppRcSpecReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_deployment_manager_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppRcSpecReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppRcSpecReq) ProtoMessage() {}

func (x *GetAppRcSpecReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_deployment_manager_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppRcSpecReq.ProtoReflect.Descriptor instead.
func (*GetAppRcSpecReq) Descriptor() ([]byte, []int) {
	return file_proto_deployment_manager_proto_rawDescGZIP(), []int{19}
}

func (x *GetAppRcSpecReq) GetSolutionId() string {
	if x != nil {
		return x.SolutionId
	}
	return ""
}

func (x *GetAppRcSpecReq) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type GetAppRcSpecRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SolutionId string          `protobuf:"bytes,1,opt,name=solution_id,json=solutionId,proto3" json:"solution_id,omitempty"`
	Version    string          `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	RcSpec     *rc_spec.RCSpec `protobuf:"bytes,3,opt,name=rc_spec,json=rcSpec,proto3" json:"rc_spec,omitempty"`
}

func (x *GetAppRcSpecRes) Reset() {
	*x = GetAppRcSpecRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_deployment_manager_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppRcSpecRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppRcSpecRes) ProtoMessage() {}

func (x *GetAppRcSpecRes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_deployment_manager_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppRcSpecRes.ProtoReflect.Descriptor instead.
func (*GetAppRcSpecRes) Descriptor() ([]byte, []int) {
	return file_proto_deployment_manager_proto_rawDescGZIP(), []int{20}
}

func (x *GetAppRcSpecRes) GetSolutionId() string {
	if x != nil {
		return x.SolutionId
	}
	return ""
}

func (x *GetAppRcSpecRes) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *GetAppRcSpecRes) GetRcSpec() *rc_spec.RCSpec {
	if x != nil {
		return x.RcSpec
	}
	return nil
}

type ListSolutionVersionsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SolutionId string `protobuf:"bytes,1,opt,name=solution_id,json=solutionId,proto3" json:"solution_id,omitempty"`
}

func (x *ListSolutionVersionsReq) Reset() {
	*x = ListSolutionVersionsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_deployment_manager_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSolutionVersionsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSolutionVersionsReq) ProtoMessage() {}

func (x *ListSolutionVersionsReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_deployment_manager_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSolutionVersionsReq.ProtoReflect.Descriptor instead.
func (*ListSolutionVersionsReq) Descriptor() ([]byte, []int) {
	return file_proto_deployment_manager_proto_rawDescGZIP(), []int{21}
}

func (x *ListSolutionVersionsReq) GetSolutionId() string {
	if x != nil {
		return x.SolutionId
	}
	return ""
}

type ListSolutionVersionsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Versions []*SolutionVersionMetadata `protobuf:"bytes,1,rep,name=versions,proto3" json:"versions,omitempty"`
}

func (x *ListSolutionVersionsRes) Reset() {
	*x = ListSolutionVersionsRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_deployment_manager_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSolutionVersionsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSolutionVersionsRes) ProtoMessage() {}

func (x *ListSolutionVersionsRes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_deployment_manager_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSolutionVersionsRes.ProtoReflect.Descriptor instead.
func (*ListSolutionVersionsRes) Descriptor() ([]byte, []int) {
	return file_proto_deployment_manager_proto_rawDescGZIP(), []int{22}
}

func (x *ListSolutionVersionsRes) GetVersions() []*SolutionVersionMetadata {
	if x != nil {
		return x.Versions
	}
	return nil
}

type SolutionVersionMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DownloadState AppDownloadState `protobuf:"varint,1,opt,name=download_state,json=downloadState,proto3,enum=deploymentManager.AppDownloadState" json:"download_state,omitempty"`
	ChartVersion  string           `protobuf:"bytes,2,opt,name=chart_version,json=chartVersion,proto3" json:"chart_version,omitempty"`
	AppVersion    string           `protobuf:"bytes,3,opt,name=app_version,json=appVersion,proto3" json:"app_version,omitempty"`
	AppType       SolutionType     `protobuf:"varint,4,opt,name=app_type,json=appType,proto3,enum=deploymentManager.SolutionType" json:"app_type,omitempty"`
	DownloadDate  string           `protobuf:"bytes,5,opt,name=download_date,json=downloadDate,proto3" json:"download_date,omitempty"`
}

func (x *SolutionVersionMetadata) Reset() {
	*x = SolutionVersionMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_deployment_manager_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolutionVersionMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolutionVersionMetadata) ProtoMessage() {}

func (x *SolutionVersionMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_proto_deployment_manager_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolutionVersionMetadata.ProtoReflect.Descriptor instead.
func (*SolutionVersionMetadata) Descriptor() ([]byte, []int) {
	return file_proto_deployment_manager_proto_rawDescGZIP(), []int{23}
}

func (x *SolutionVersionMetadata) GetDownloadState() AppDownloadState {
	if x != nil {
		return x.DownloadState
	}
	return AppDownloadState_AppDownloadStateUnknown
}

func (x *SolutionVersionMetadata) GetChartVersion() string {
	if x != nil {
		return x.ChartVersion
	}
	return ""
}

func (x *SolutionVersionMetadata) GetAppVersion() string {
	if x != nil {
		return x.AppVersion
	}
	return ""
}

func (x *SolutionVersionMetadata) GetAppType() SolutionType {
	if x != nil {
		return x.AppType
	}
	return SolutionType_SolutionType_Unknown
}

func (x *SolutionVersionMetadata) GetDownloadDate() string {
	if x != nil {
		return x.DownloadDate
	}
	return ""
}

type ListSolutionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListSolutionsRequest) Reset() {
	*x = ListSolutionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_deployment_manager_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSolutionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSolutionsRequest) ProtoMessage() {}

func (x *ListSolutionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_deployment_manager_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSolutionsRequest.ProtoReflect.Descriptor instead.
func (*ListSolutionsRequest) Descriptor() ([]byte, []int) {
	return file_proto_deployment_manager_proto_rawDescGZIP(), []int{24}
}

type ListSolutionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Apps []*Solution `protobuf:"bytes,1,rep,name=apps,proto3" json:"apps,omitempty"`
}

func (x *ListSolutionsResponse) Reset() {
	*x = ListSolutionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_deployment_manager_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSolutionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSolutionsResponse) ProtoMessage() {}

func (x *ListSolutionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_deployment_manager_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSolutionsResponse.ProtoReflect.Descriptor instead.
func (*ListSolutionsResponse) Descriptor() ([]byte, []int) {
	return file_proto_deployment_manager_proto_rawDescGZIP(), []int{25}
}

func (x *ListSolutionsResponse) GetApps() []*Solution {
	if x != nil {
		return x.Apps
	}
	return nil
}

type Solution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SolutionName       string               `protobuf:"bytes,1,opt,name=solution_name,json=solutionName,proto3" json:"solution_name,omitempty"`
	SolutionId         string               `protobuf:"bytes,2,opt,name=solution_id,json=solutionId,proto3" json:"solution_id,omitempty"`
	LatestChartVersion string               `protobuf:"bytes,3,opt,name=latest_chart_version,json=latestChartVersion,proto3" json:"latest_chart_version,omitempty"`
	LatestAppVersion   string               `protobuf:"bytes,4,opt,name=latest_app_version,json=latestAppVersion,proto3" json:"latest_app_version,omitempty"`
	Metadata           *SolutionMetadata    `protobuf:"bytes,5,opt,name=metadata,proto3" json:"metadata,omitempty"`
	AppType            SolutionType         `protobuf:"varint,6,opt,name=app_type,json=appType,proto3,enum=deploymentManager.SolutionType" json:"app_type,omitempty"`
	ShowWarning        bool                 `protobuf:"varint,7,opt,name=show_warning,json=showWarning,proto3" json:"show_warning,omitempty"`
	Deployments        *SolutionDeployments `protobuf:"bytes,8,opt,name=deployments,proto3" json:"deployments,omitempty"`
	VendorName         string               `protobuf:"bytes,9,opt,name=vendor_name,json=vendorName,proto3" json:"vendor_name,omitempty"`
	VendorId           string               `protobuf:"bytes,10,opt,name=vendor_id,json=vendorId,proto3" json:"vendor_id,omitempty"`
}

func (x *Solution) Reset() {
	*x = Solution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_deployment_manager_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Solution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Solution) ProtoMessage() {}

func (x *Solution) ProtoReflect() protoreflect.Message {
	mi := &file_proto_deployment_manager_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Solution.ProtoReflect.Descriptor instead.
func (*Solution) Descriptor() ([]byte, []int) {
	return file_proto_deployment_manager_proto_rawDescGZIP(), []int{26}
}

func (x *Solution) GetSolutionName() string {
	if x != nil {
		return x.SolutionName
	}
	return ""
}

func (x *Solution) GetSolutionId() string {
	if x != nil {
		return x.SolutionId
	}
	return ""
}

func (x *Solution) GetLatestChartVersion() string {
	if x != nil {
		return x.LatestChartVersion
	}
	return ""
}

func (x *Solution) GetLatestAppVersion() string {
	if x != nil {
		return x.LatestAppVersion
	}
	return ""
}

func (x *Solution) GetMetadata() *SolutionMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Solution) GetAppType() SolutionType {
	if x != nil {
		return x.AppType
	}
	return SolutionType_SolutionType_Unknown
}

func (x *Solution) GetShowWarning() bool {
	if x != nil {
		return x.ShowWarning
	}
	return false
}

func (x *Solution) GetDeployments() *SolutionDeployments {
	if x != nil {
		return x.Deployments
	}
	return nil
}

func (x *Solution) GetVendorName() string {
	if x != nil {
		return x.VendorName
	}
	return ""
}

func (x *Solution) GetVendorId() string {
	if x != nil {
		return x.VendorId
	}
	return ""
}

type SolutionDeployments struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Healthy   int32 `protobuf:"varint,1,opt,name=healthy,proto3" json:"healthy,omitempty"`
	Unhealthy int32 `protobuf:"varint,2,opt,name=unhealthy,proto3" json:"unhealthy,omitempty"`
	Deploying int32 `protobuf:"varint,3,opt,name=deploying,proto3" json:"deploying,omitempty"`
}

func (x *SolutionDeployments) Reset() {
	*x = SolutionDeployments{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_deployment_manager_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolutionDeployments) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolutionDeployments) ProtoMessage() {}

func (x *SolutionDeployments) ProtoReflect() protoreflect.Message {
	mi := &file_proto_deployment_manager_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolutionDeployments.ProtoReflect.Descriptor instead.
func (*SolutionDeployments) Descriptor() ([]byte, []int) {
	return file_proto_deployment_manager_proto_rawDescGZIP(), []int{27}
}

func (x *SolutionDeployments) GetHealthy() int32 {
	if x != nil {
		return x.Healthy
	}
	return 0
}

func (x *SolutionDeployments) GetUnhealthy() int32 {
	if x != nil {
		return x.Unhealthy
	}
	return 0
}

func (x *SolutionDeployments) GetDeploying() int32 {
	if x != nil {
		return x.Deploying
	}
	return 0
}

type SolutionMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Icon string `protobuf:"bytes,2,opt,name=icon,proto3" json:"icon,omitempty"`
	Home string `protobuf:"bytes,3,opt,name=home,proto3" json:"home,omitempty"`
}

func (x *SolutionMetadata) Reset() {
	*x = SolutionMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_deployment_manager_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolutionMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolutionMetadata) ProtoMessage() {}

func (x *SolutionMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_proto_deployment_manager_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolutionMetadata.ProtoReflect.Descriptor instead.
func (*SolutionMetadata) Descriptor() ([]byte, []int) {
	return file_proto_deployment_manager_proto_rawDescGZIP(), []int{28}
}

func (x *SolutionMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SolutionMetadata) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *SolutionMetadata) GetHome() string {
	if x != nil {
		return x.Home
	}
	return ""
}

type GetAppPvcsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SolutionId string `protobuf:"bytes,1,opt,name=solution_id,json=solutionId,proto3" json:"solution_id,omitempty"`
	Version    string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *GetAppPvcsRequest) Reset() {
	*x = GetAppPvcsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_deployment_manager_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppPvcsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppPvcsRequest) ProtoMessage() {}

func (x *GetAppPvcsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_deployment_manager_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppPvcsRequest.ProtoReflect.Descriptor instead.
func (*GetAppPvcsRequest) Descriptor() ([]byte, []int) {
	return file_proto_deployment_manager_proto_rawDescGZIP(), []int{29}
}

func (x *GetAppPvcsRequest) GetSolutionId() string {
	if x != nil {
		return x.SolutionId
	}
	return ""
}

func (x *GetAppPvcsRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type GetDeploymentEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeploymentId string `protobuf:"bytes,1,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
}

func (x *GetDeploymentEventsRequest) Reset() {
	*x = GetDeploymentEventsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_deployment_manager_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeploymentEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeploymentEventsRequest) ProtoMessage() {}

func (x *GetDeploymentEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_deployment_manager_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeploymentEventsRequest.ProtoReflect.Descriptor instead.
func (*GetDeploymentEventsRequest) Descriptor() ([]byte, []int) {
	return file_proto_deployment_manager_proto_rawDescGZIP(), []int{30}
}

func (x *GetDeploymentEventsRequest) GetDeploymentId() string {
	if x != nil {
		return x.DeploymentId
	}
	return ""
}

type GetDeploymentEventsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*DeploymentEvent `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetDeploymentEventsResponse) Reset() {
	*x = GetDeploymentEventsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_deployment_manager_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeploymentEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeploymentEventsResponse) ProtoMessage() {}

func (x *GetDeploymentEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_deployment_manager_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeploymentEventsResponse.ProtoReflect.Descriptor instead.
func (*GetDeploymentEventsResponse) Descriptor() ([]byte, []int) {
	return file_proto_deployment_manager_proto_rawDescGZIP(), []int{31}
}

func (x *GetDeploymentEventsResponse) GetData() []*DeploymentEvent {
	if x != nil {
		return x.Data
	}
	return nil
}

type DeploymentEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time                   string                 `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	EventTriggeredBy       string                 `protobuf:"bytes,2,opt,name=event_triggered_by,json=eventTriggeredBy,proto3" json:"event_triggered_by,omitempty"`
	EventTriggeredByAction EventTriggeredByAction `protobuf:"varint,3,opt,name=event_triggered_by_action,json=eventTriggeredByAction,proto3,enum=deploymentManager.EventTriggeredByAction" json:"event_triggered_by_action,omitempty"`
	Message                string                 `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	Level                  DeploymentEventLevel   `protobuf:"varint,5,opt,name=level,proto3,enum=deploymentManager.DeploymentEventLevel" json:"level,omitempty"`
}

func (x *DeploymentEvent) Reset() {
	*x = DeploymentEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_deployment_manager_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeploymentEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploymentEvent) ProtoMessage() {}

func (x *DeploymentEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_deployment_manager_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploymentEvent.ProtoReflect.Descriptor instead.
func (*DeploymentEvent) Descriptor() ([]byte, []int) {
	return file_proto_deployment_manager_proto_rawDescGZIP(), []int{32}
}

func (x *DeploymentEvent) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

func (x *DeploymentEvent) GetEventTriggeredBy() string {
	if x != nil {
		return x.EventTriggeredBy
	}
	return ""
}

func (x *DeploymentEvent) GetEventTriggeredByAction() EventTriggeredByAction {
	if x != nil {
		return x.EventTriggeredByAction
	}
	return EventTriggeredByAction_DeploymentEventType_Unknown
}

func (x *DeploymentEvent) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DeploymentEvent) GetLevel() DeploymentEventLevel {
	if x != nil {
		return x.Level
	}
	return DeploymentEventLevel_DeploymentEventLevel_Unknown
}

type GetDeploymentConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeploymentId string `protobuf:"bytes,1,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
}

func (x *GetDeploymentConfigRequest) Reset() {
	*x = GetDeploymentConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_deployment_manager_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeploymentConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeploymentConfigRequest) ProtoMessage() {}

func (x *GetDeploymentConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_deployment_manager_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeploymentConfigRequest.ProtoReflect.Descriptor instead.
func (*GetDeploymentConfigRequest) Descriptor() ([]byte, []int) {
	return file_proto_deployment_manager_proto_rawDescGZIP(), []int{33}
}

func (x *GetDeploymentConfigRequest) GetDeploymentId() string {
	if x != nil {
		return x.DeploymentId
	}
	return ""
}

type GetDeploymentConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeploymentId      string            `protobuf:"bytes,1,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
	RcSpec            *rc_spec.RCSpec   `protobuf:"bytes,2,opt,name=rc_spec,json=rcSpec,proto3" json:"rc_spec,omitempty"`
	PlatformVariables map[string]string `protobuf:"bytes,3,rep,name=platform_variables,json=platformVariables,proto3" json:"platform_variables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetDeploymentConfigResponse) Reset() {
	*x = GetDeploymentConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_deployment_manager_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeploymentConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeploymentConfigResponse) ProtoMessage() {}

func (x *GetDeploymentConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_deployment_manager_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeploymentConfigResponse.ProtoReflect.Descriptor instead.
func (*GetDeploymentConfigResponse) Descriptor() ([]byte, []int) {
	return file_proto_deployment_manager_proto_rawDescGZIP(), []int{34}
}

func (x *GetDeploymentConfigResponse) GetDeploymentId() string {
	if x != nil {
		return x.DeploymentId
	}
	return ""
}

func (x *GetDeploymentConfigResponse) GetRcSpec() *rc_spec.RCSpec {
	if x != nil {
		return x.RcSpec
	}
	return nil
}

func (x *GetDeploymentConfigResponse) GetPlatformVariables() map[string]string {
	if x != nil {
		return x.PlatformVariables
	}
	return nil
}

type GetDeploymentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeploymentId string `protobuf:"bytes,1,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
}

func (x *GetDeploymentRequest) Reset() {
	*x = GetDeploymentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_deployment_manager_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeploymentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeploymentRequest) ProtoMessage() {}

func (x *GetDeploymentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_deployment_manager_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeploymentRequest.ProtoReflect.Descriptor instead.
func (*GetDeploymentRequest) Descriptor() ([]byte, []int) {
	return file_proto_deployment_manager_proto_rawDescGZIP(), []int{35}
}

func (x *GetDeploymentRequest) GetDeploymentId() string {
	if x != nil {
		return x.DeploymentId
	}
	return ""
}

type GetDeploymentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *DeploymentInfo `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetDeploymentResponse) Reset() {
	*x = GetDeploymentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_deployment_manager_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeploymentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeploymentResponse) ProtoMessage() {}

func (x *GetDeploymentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_deployment_manager_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeploymentResponse.ProtoReflect.Descriptor instead.
func (*GetDeploymentResponse) Descriptor() ([]byte, []int) {
	return file_proto_deployment_manager_proto_rawDescGZIP(), []int{36}
}

func (x *GetDeploymentResponse) GetData() *DeploymentInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type ListDeploymentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId  string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	SolutionId string `protobuf:"bytes,2,opt,name=solution_id,json=solutionId,proto3" json:"solution_id,omitempty"`
}

func (x *ListDeploymentsRequest) Reset() {
	*x = ListDeploymentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_deployment_manager_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDeploymentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDeploymentsRequest) ProtoMessage() {}

func (x *ListDeploymentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_deployment_manager_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDeploymentsRequest.ProtoReflect.Descriptor instead.
func (*ListDeploymentsRequest) Descriptor() ([]byte, []int) {
	return file_proto_deployment_manager_proto_rawDescGZIP(), []int{37}
}

func (x *ListDeploymentsRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ListDeploymentsRequest) GetSolutionId() string {
	if x != nil {
		return x.SolutionId
	}
	return ""
}

type ListDeploymentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*DeploymentInfo `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ListDeploymentsResponse) Reset() {
	*x = ListDeploymentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_deployment_manager_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDeploymentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDeploymentsResponse) ProtoMessage() {}

func (x *ListDeploymentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_deployment_manager_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDeploymentsResponse.ProtoReflect.Descriptor instead.
func (*ListDeploymentsResponse) Descriptor() ([]byte, []int) {
	return file_proto_deployment_manager_proto_rawDescGZIP(), []int{38}
}

func (x *ListDeploymentsResponse) GetData() []*DeploymentInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type DeploymentInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeploymentId        string                        `protobuf:"bytes,1,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
	DeploymentName      string                        `protobuf:"bytes,2,opt,name=deployment_name,json=deploymentName,proto3" json:"deployment_name,omitempty"`
	ClusterId           string                        `protobuf:"bytes,3,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	SolutionId          string                        `protobuf:"bytes,4,opt,name=solution_id,json=solutionId,proto3" json:"solution_id,omitempty"`
	SolutionName        string                        `protobuf:"bytes,5,opt,name=solution_name,json=solutionName,proto3" json:"solution_name,omitempty"`
	Version             string                        `protobuf:"bytes,6,opt,name=version,proto3" json:"version,omitempty"`
	Status              deploy_app.DeploymentStatus   `protobuf:"varint,7,opt,name=status,proto3,enum=deploy_app.DeploymentStatus" json:"status,omitempty"`
	AppType             SolutionType                  `protobuf:"varint,8,opt,name=app_type,json=appType,proto3,enum=deploymentManager.SolutionType" json:"app_type,omitempty"`
	SolutionIcon        string                        `protobuf:"bytes,9,opt,name=solution_icon,json=solutionIcon,proto3" json:"solution_icon,omitempty"`
	UpdatedOn           string                        `protobuf:"bytes,10,opt,name=updated_on,json=updatedOn,proto3" json:"updated_on,omitempty"`
	ProjectId           string                        `protobuf:"bytes,11,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	ShowWarning         bool                          `protobuf:"varint,12,opt,name=show_warning,json=showWarning,proto3" json:"show_warning,omitempty"`
	LastUpgradeMetadata *LastUpgradeOperationMetadata `protobuf:"bytes,13,opt,name=last_upgrade_metadata,json=lastUpgradeMetadata,proto3" json:"last_upgrade_metadata,omitempty"`
	DeployedOn          string                        `protobuf:"bytes,14,opt,name=deployed_on,json=deployedOn,proto3" json:"deployed_on,omitempty"`
	StartedOn           string                        `protobuf:"bytes,15,opt,name=started_on,json=startedOn,proto3" json:"started_on,omitempty"`
	AppVersion          string                        `protobuf:"bytes,16,opt,name=app_version,json=appVersion,proto3" json:"app_version,omitempty"`
	LaunchUrl           string                        `protobuf:"bytes,17,opt,name=launch_url,json=launchUrl,proto3" json:"launch_url,omitempty"`
}

func (x *DeploymentInfo) Reset() {
	*x = DeploymentInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_deployment_manager_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeploymentInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploymentInfo) ProtoMessage() {}

func (x *DeploymentInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_deployment_manager_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploymentInfo.ProtoReflect.Descriptor instead.
func (*DeploymentInfo) Descriptor() ([]byte, []int) {
	return file_proto_deployment_manager_proto_rawDescGZIP(), []int{39}
}

func (x *DeploymentInfo) GetDeploymentId() string {
	if x != nil {
		return x.DeploymentId
	}
	return ""
}

func (x *DeploymentInfo) GetDeploymentName() string {
	if x != nil {
		return x.DeploymentName
	}
	return ""
}

func (x *DeploymentInfo) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *DeploymentInfo) GetSolutionId() string {
	if x != nil {
		return x.SolutionId
	}
	return ""
}

func (x *DeploymentInfo) GetSolutionName() string {
	if x != nil {
		return x.SolutionName
	}
	return ""
}

func (x *DeploymentInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *DeploymentInfo) GetStatus() deploy_app.DeploymentStatus {
	if x != nil {
		return x.Status
	}
	return deploy_app.DeploymentStatus_Unknown
}

func (x *DeploymentInfo) GetAppType() SolutionType {
	if x != nil {
		return x.AppType
	}
	return SolutionType_SolutionType_Unknown
}

func (x *DeploymentInfo) GetSolutionIcon() string {
	if x != nil {
		return x.SolutionIcon
	}
	return ""
}

func (x *DeploymentInfo) GetUpdatedOn() string {
	if x != nil {
		return x.UpdatedOn
	}
	return ""
}

func (x *DeploymentInfo) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *DeploymentInfo) GetShowWarning() bool {
	if x != nil {
		return x.ShowWarning
	}
	return false
}

func (x *DeploymentInfo) GetLastUpgradeMetadata() *LastUpgradeOperationMetadata {
	if x != nil {
		return x.LastUpgradeMetadata
	}
	return nil
}

func (x *DeploymentInfo) GetDeployedOn() string {
	if x != nil {
		return x.DeployedOn
	}
	return ""
}

func (x *DeploymentInfo) GetStartedOn() string {
	if x != nil {
		return x.StartedOn
	}
	return ""
}

func (x *DeploymentInfo) GetAppVersion() string {
	if x != nil {
		return x.AppVersion
	}
	return ""
}

func (x *DeploymentInfo) GetLaunchUrl() string {
	if x != nil {
		return x.LaunchUrl
	}
	return ""
}

type LastUpgradeOperationMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpgradeOperationType UpgradeOperationType `protobuf:"varint,1,opt,name=upgrade_operation_type,json=upgradeOperationType,proto3,enum=deploymentManager.UpgradeOperationType" json:"upgrade_operation_type,omitempty"`
	IsFailure            bool                 `protobuf:"varint,2,opt,name=is_failure,json=isFailure,proto3" json:"is_failure,omitempty"`
	Step                 UpdateStep           `protobuf:"varint,3,opt,name=Step,proto3,enum=deploymentManager.UpdateStep" json:"Step,omitempty"`
	Time                 string               `protobuf:"bytes,4,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *LastUpgradeOperationMetadata) Reset() {
	*x = LastUpgradeOperationMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_deployment_manager_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LastUpgradeOperationMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LastUpgradeOperationMetadata) ProtoMessage() {}

func (x *LastUpgradeOperationMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_proto_deployment_manager_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LastUpgradeOperationMetadata.ProtoReflect.Descriptor instead.
func (*LastUpgradeOperationMetadata) Descriptor() ([]byte, []int) {
	return file_proto_deployment_manager_proto_rawDescGZIP(), []int{40}
}

func (x *LastUpgradeOperationMetadata) GetUpgradeOperationType() UpgradeOperationType {
	if x != nil {
		return x.UpgradeOperationType
	}
	return UpgradeOperationType_UpgradeOperationTypeUnknown
}

func (x *LastUpgradeOperationMetadata) GetIsFailure() bool {
	if x != nil {
		return x.IsFailure
	}
	return false
}

func (x *LastUpgradeOperationMetadata) GetStep() UpdateStep {
	if x != nil {
		return x.Step
	}
	return UpdateStep_UpdateStep_Unknown
}

func (x *LastUpgradeOperationMetadata) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

type VendorSolution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SolutionId   string `protobuf:"bytes,1,opt,name=solution_id,json=solutionId,proto3" json:"solution_id,omitempty"`
	SolutionName string `protobuf:"bytes,2,opt,name=solution_name,json=solutionName,proto3" json:"solution_name,omitempty"`
	// Deprecated: Do not use.
	Versions     []*SolutionVersion `protobuf:"bytes,3,rep,name=versions,proto3" json:"versions,omitempty"`
	SolutionLogo string             `protobuf:"bytes,4,opt,name=solution_logo,json=solutionLogo,proto3" json:"solution_logo,omitempty"`
	InProgress   int32              `protobuf:"varint,5,opt,name=in_progress,json=inProgress,proto3" json:"in_progress,omitempty"`
	Downloaded   int32              `protobuf:"varint,6,opt,name=downloaded,proto3" json:"downloaded,omitempty"`
	Failed       int32              `protobuf:"varint,7,opt,name=failed,proto3" json:"failed,omitempty"`
	Total        int32              `protobuf:"varint,8,opt,name=total,proto3" json:"total,omitempty"`
	AppVersion   string             `protobuf:"bytes,9,opt,name=app_version,json=appVersion,proto3" json:"app_version,omitempty"`
	DownloadDate string             `protobuf:"bytes,10,opt,name=download_date,json=downloadDate,proto3" json:"download_date,omitempty"`
	VendorName   string             `protobuf:"bytes,11,opt,name=vendor_name,json=vendorName,proto3" json:"vendor_name,omitempty"`
	VendorId     string             `protobuf:"bytes,12,opt,name=vendor_id,json=vendorId,proto3" json:"vendor_id,omitempty"`
}

func (x *VendorSolution) Reset() {
	*x = VendorSolution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_deployment_manager_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VendorSolution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VendorSolution) ProtoMessage() {}

func (x *VendorSolution) ProtoReflect() protoreflect.Message {
	mi := &file_proto_deployment_manager_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VendorSolution.ProtoReflect.Descriptor instead.
func (*VendorSolution) Descriptor() ([]byte, []int) {
	return file_proto_deployment_manager_proto_rawDescGZIP(), []int{41}
}

func (x *VendorSolution) GetSolutionId() string {
	if x != nil {
		return x.SolutionId
	}
	return ""
}

func (x *VendorSolution) GetSolutionName() string {
	if x != nil {
		return x.SolutionName
	}
	return ""
}

// Deprecated: Do not use.
func (x *VendorSolution) GetVersions() []*SolutionVersion {
	if x != nil {
		return x.Versions
	}
	return nil
}

func (x *VendorSolution) GetSolutionLogo() string {
	if x != nil {
		return x.SolutionLogo
	}
	return ""
}

func (x *VendorSolution) GetInProgress() int32 {
	if x != nil {
		return x.InProgress
	}
	return 0
}

func (x *VendorSolution) GetDownloaded() int32 {
	if x != nil {
		return x.Downloaded
	}
	return 0
}

func (x *VendorSolution) GetFailed() int32 {
	if x != nil {
		return x.Failed
	}
	return 0
}

func (x *VendorSolution) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *VendorSolution) GetAppVersion() string {
	if x != nil {
		return x.AppVersion
	}
	return ""
}

func (x *VendorSolution) GetDownloadDate() string {
	if x != nil {
		return x.DownloadDate
	}
	return ""
}

func (x *VendorSolution) GetVendorName() string {
	if x != nil {
		return x.VendorName
	}
	return ""
}

func (x *VendorSolution) GetVendorId() string {
	if x != nil {
		return x.VendorId
	}
	return ""
}

type ListBackupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeploymentId string `protobuf:"bytes,1,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
}

func (x *ListBackupRequest) Reset() {
	*x = ListBackupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_deployment_manager_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBackupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBackupRequest) ProtoMessage() {}

func (x *ListBackupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_deployment_manager_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBackupRequest.ProtoReflect.Descriptor instead.
func (*ListBackupRequest) Descriptor() ([]byte, []int) {
	return file_proto_deployment_manager_proto_rawDescGZIP(), []int{42}
}

func (x *ListBackupRequest) GetDeploymentId() string {
	if x != nil {
		return x.DeploymentId
	}
	return ""
}

type ListBackupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success      bool            `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	BackupObject []*BackupObject `protobuf:"bytes,2,rep,name=BackupObject,proto3" json:"BackupObject,omitempty"`
}

func (x *ListBackupResponse) Reset() {
	*x = ListBackupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_deployment_manager_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBackupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBackupResponse) ProtoMessage() {}

func (x *ListBackupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_deployment_manager_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBackupResponse.ProtoReflect.Descriptor instead.
func (*ListBackupResponse) Descriptor() ([]byte, []int) {
	return file_proto_deployment_manager_proto_rawDescGZIP(), []int{43}
}

func (x *ListBackupResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ListBackupResponse) GetBackupObject() []*BackupObject {
	if x != nil {
		return x.BackupObject
	}
	return nil
}

type BackupObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status    string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	CreatedAt string `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *BackupObject) Reset() {
	*x = BackupObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_deployment_manager_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackupObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupObject) ProtoMessage() {}

func (x *BackupObject) ProtoReflect() protoreflect.Message {
	mi := &file_proto_deployment_manager_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupObject.ProtoReflect.Descriptor instead.
func (*BackupObject) Descriptor() ([]byte, []int) {
	return file_proto_deployment_manager_proto_rawDescGZIP(), []int{44}
}

func (x *BackupObject) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *BackupObject) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BackupObject) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

type DeleteBackupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeploymentId string   `protobuf:"bytes,1,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
	BackupNames  []string `protobuf:"bytes,2,rep,name=backup_names,json=backupNames,proto3" json:"backup_names,omitempty"`
}

func (x *DeleteBackupRequest) Reset() {
	*x = DeleteBackupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_deployment_manager_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBackupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBackupRequest) ProtoMessage() {}

func (x *DeleteBackupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_deployment_manager_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBackupRequest.ProtoReflect.Descriptor instead.
func (*DeleteBackupRequest) Descriptor() ([]byte, []int) {
	return file_proto_deployment_manager_proto_rawDescGZIP(), []int{45}
}

func (x *DeleteBackupRequest) GetDeploymentId() string {
	if x != nil {
		return x.DeploymentId
	}
	return ""
}

func (x *DeleteBackupRequest) GetBackupNames() []string {
	if x != nil {
		return x.BackupNames
	}
	return nil
}

type DeleteBackupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DeleteBackupResponse) Reset() {
	*x = DeleteBackupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_deployment_manager_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBackupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBackupResponse) ProtoMessage() {}

func (x *DeleteBackupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_deployment_manager_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBackupResponse.ProtoReflect.Descriptor instead.
func (*DeleteBackupResponse) Descriptor() ([]byte, []int) {
	return file_proto_deployment_manager_proto_rawDescGZIP(), []int{46}
}

func (x *DeleteBackupResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DeleteBackupResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type UpdateDeploymentConfigurationReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeploymentId string        `protobuf:"bytes,1,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
	Config       *DeployConfig `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
	User         string        `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *UpdateDeploymentConfigurationReq) Reset() {
	*x = UpdateDeploymentConfigurationReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_deployment_manager_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDeploymentConfigurationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDeploymentConfigurationReq) ProtoMessage() {}

func (x *UpdateDeploymentConfigurationReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_deployment_manager_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDeploymentConfigurationReq.ProtoReflect.Descriptor instead.
func (*UpdateDeploymentConfigurationReq) Descriptor() ([]byte, []int) {
	return file_proto_deployment_manager_proto_rawDescGZIP(), []int{47}
}

func (x *UpdateDeploymentConfigurationReq) GetDeploymentId() string {
	if x != nil {
		return x.DeploymentId
	}
	return ""
}

func (x *UpdateDeploymentConfigurationReq) GetConfig() *DeployConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *UpdateDeploymentConfigurationReq) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

type UpdateDeploymentConfigurationRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *UpdateDeploymentConfigurationRes) Reset() {
	*x = UpdateDeploymentConfigurationRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_deployment_manager_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDeploymentConfigurationRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDeploymentConfigurationRes) ProtoMessage() {}

func (x *UpdateDeploymentConfigurationRes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_deployment_manager_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDeploymentConfigurationRes.ProtoReflect.Descriptor instead.
func (*UpdateDeploymentConfigurationRes) Descriptor() ([]byte, []int) {
	return file_proto_deployment_manager_proto_rawDescGZIP(), []int{48}
}

func (x *UpdateDeploymentConfigurationRes) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type GetQosIndicatorReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version      string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	DeploymentId string `protobuf:"bytes,2,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
	User         string `protobuf:"bytes,3,opt,name=User,proto3" json:"User,omitempty"`
}

func (x *GetQosIndicatorReq) Reset() {
	*x = GetQosIndicatorReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_deployment_manager_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetQosIndicatorReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQosIndicatorReq) ProtoMessage() {}

func (x *GetQosIndicatorReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_deployment_manager_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQosIndicatorReq.ProtoReflect.Descriptor instead.
func (*GetQosIndicatorReq) Descriptor() ([]byte, []int) {
	return file_proto_deployment_manager_proto_rawDescGZIP(), []int{49}
}

func (x *GetQosIndicatorReq) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *GetQosIndicatorReq) GetDeploymentId() string {
	if x != nil {
		return x.DeploymentId
	}
	return ""
}

func (x *GetQosIndicatorReq) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

type ListQosIndicatorReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SolutionId string `protobuf:"bytes,1,opt,name=solution_id,json=solutionId,proto3" json:"solution_id,omitempty"`
	Version    string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *ListQosIndicatorReq) Reset() {
	*x = ListQosIndicatorReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_deployment_manager_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListQosIndicatorReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListQosIndicatorReq) ProtoMessage() {}

func (x *ListQosIndicatorReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_deployment_manager_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListQosIndicatorReq.ProtoReflect.Descriptor instead.
func (*ListQosIndicatorReq) Descriptor() ([]byte, []int) {
	return file_proto_deployment_manager_proto_rawDescGZIP(), []int{50}
}

func (x *ListQosIndicatorReq) GetSolutionId() string {
	if x != nil {
		return x.SolutionId
	}
	return ""
}

func (x *ListQosIndicatorReq) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type ClusterQosIndicator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId          string                           `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	AvailableResources *resource.Resources              `protobuf:"bytes,2,opt,name=available_resources,json=availableResources,proto3" json:"available_resources,omitempty"`
	QosIndicator       *resource.DeploymentQosIndicator `protobuf:"bytes,3,opt,name=qos_indicator,json=qosIndicator,proto3" json:"qos_indicator,omitempty"`
}

func (x *ClusterQosIndicator) Reset() {
	*x = ClusterQosIndicator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_deployment_manager_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterQosIndicator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterQosIndicator) ProtoMessage() {}

func (x *ClusterQosIndicator) ProtoReflect() protoreflect.Message {
	mi := &file_proto_deployment_manager_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterQosIndicator.ProtoReflect.Descriptor instead.
func (*ClusterQosIndicator) Descriptor() ([]byte, []int) {
	return file_proto_deployment_manager_proto_rawDescGZIP(), []int{51}
}

func (x *ClusterQosIndicator) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ClusterQosIndicator) GetAvailableResources() *resource.Resources {
	if x != nil {
		return x.AvailableResources
	}
	return nil
}

func (x *ClusterQosIndicator) GetQosIndicator() *resource.DeploymentQosIndicator {
	if x != nil {
		return x.QosIndicator
	}
	return nil
}

type ListQosIndicatorRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SolutionId             string                 `protobuf:"bytes,1,opt,name=solution_id,json=solutionId,proto3" json:"solution_id,omitempty"`
	Version                string                 `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	AppResourceRequirement *resource.Resources    `protobuf:"bytes,3,opt,name=app_resource_requirement,json=appResourceRequirement,proto3" json:"app_resource_requirement,omitempty"`
	ClusterQosIndicator    []*ClusterQosIndicator `protobuf:"bytes,4,rep,name=cluster_qos_indicator,json=clusterQosIndicator,proto3" json:"cluster_qos_indicator,omitempty"`
}

func (x *ListQosIndicatorRes) Reset() {
	*x = ListQosIndicatorRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_deployment_manager_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListQosIndicatorRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListQosIndicatorRes) ProtoMessage() {}

func (x *ListQosIndicatorRes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_deployment_manager_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListQosIndicatorRes.ProtoReflect.Descriptor instead.
func (*ListQosIndicatorRes) Descriptor() ([]byte, []int) {
	return file_proto_deployment_manager_proto_rawDescGZIP(), []int{52}
}

func (x *ListQosIndicatorRes) GetSolutionId() string {
	if x != nil {
		return x.SolutionId
	}
	return ""
}

func (x *ListQosIndicatorRes) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ListQosIndicatorRes) GetAppResourceRequirement() *resource.Resources {
	if x != nil {
		return x.AppResourceRequirement
	}
	return nil
}

func (x *ListQosIndicatorRes) GetClusterQosIndicator() []*ClusterQosIndicator {
	if x != nil {
		return x.ClusterQosIndicator
	}
	return nil
}

type GetQosIndicatorRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SolutionId             string               `protobuf:"bytes,1,opt,name=solution_id,json=solutionId,proto3" json:"solution_id,omitempty"`
	Version                string               `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	AppResourceRequirement *resource.Resources  `protobuf:"bytes,3,opt,name=app_resource_requirement,json=appResourceRequirement,proto3" json:"app_resource_requirement,omitempty"`
	ClusterQosIndicator    *ClusterQosIndicator `protobuf:"bytes,4,opt,name=cluster_qos_indicator,json=clusterQosIndicator,proto3" json:"cluster_qos_indicator,omitempty"`
	Oldversion             string               `protobuf:"bytes,5,opt,name=oldversion,proto3" json:"oldversion,omitempty"`
}

func (x *GetQosIndicatorRes) Reset() {
	*x = GetQosIndicatorRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_deployment_manager_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetQosIndicatorRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQosIndicatorRes) ProtoMessage() {}

func (x *GetQosIndicatorRes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_deployment_manager_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQosIndicatorRes.ProtoReflect.Descriptor instead.
func (*GetQosIndicatorRes) Descriptor() ([]byte, []int) {
	return file_proto_deployment_manager_proto_rawDescGZIP(), []int{53}
}

func (x *GetQosIndicatorRes) GetSolutionId() string {
	if x != nil {
		return x.SolutionId
	}
	return ""
}

func (x *GetQosIndicatorRes) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *GetQosIndicatorRes) GetAppResourceRequirement() *resource.Resources {
	if x != nil {
		return x.AppResourceRequirement
	}
	return nil
}

func (x *GetQosIndicatorRes) GetClusterQosIndicator() *ClusterQosIndicator {
	if x != nil {
		return x.ClusterQosIndicator
	}
	return nil
}

func (x *GetQosIndicatorRes) GetOldversion() string {
	if x != nil {
		return x.Oldversion
	}
	return ""
}

type SolutionVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppVersion string           `protobuf:"bytes,1,opt,name=app_version,json=appVersion,proto3" json:"app_version,omitempty"`
	Version    string           `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	State      AppDownloadState `protobuf:"varint,3,opt,name=state,proto3,enum=deploymentManager.AppDownloadState" json:"state,omitempty"`
}

func (x *SolutionVersion) Reset() {
	*x = SolutionVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_deployment_manager_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolutionVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolutionVersion) ProtoMessage() {}

func (x *SolutionVersion) ProtoReflect() protoreflect.Message {
	mi := &file_proto_deployment_manager_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolutionVersion.ProtoReflect.Descriptor instead.
func (*SolutionVersion) Descriptor() ([]byte, []int) {
	return file_proto_deployment_manager_proto_rawDescGZIP(), []int{54}
}

func (x *SolutionVersion) GetAppVersion() string {
	if x != nil {
		return x.AppVersion
	}
	return ""
}

func (x *SolutionVersion) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *SolutionVersion) GetState() AppDownloadState {
	if x != nil {
		return x.State
	}
	return AppDownloadState_AppDownloadStateUnknown
}

type GetCompatibleVersionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SolutionId string `protobuf:"bytes,1,opt,name=solution_id,json=solutionId,proto3" json:"solution_id,omitempty"`
	Version    string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *GetCompatibleVersionsRequest) Reset() {
	*x = GetCompatibleVersionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_deployment_manager_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCompatibleVersionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCompatibleVersionsRequest) ProtoMessage() {}

func (x *GetCompatibleVersionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_deployment_manager_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCompatibleVersionsRequest.ProtoReflect.Descriptor instead.
func (*GetCompatibleVersionsRequest) Descriptor() ([]byte, []int) {
	return file_proto_deployment_manager_proto_rawDescGZIP(), []int{55}
}

func (x *GetCompatibleVersionsRequest) GetSolutionId() string {
	if x != nil {
		return x.SolutionId
	}
	return ""
}

func (x *GetCompatibleVersionsRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type VendorAppVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppVersion   string `protobuf:"bytes,1,opt,name=app_version,json=appVersion,proto3" json:"app_version,omitempty"`
	ChartVersion string `protobuf:"bytes,2,opt,name=chart_version,json=chartVersion,proto3" json:"chart_version,omitempty"`
}

func (x *VendorAppVersion) Reset() {
	*x = VendorAppVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_deployment_manager_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VendorAppVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VendorAppVersion) ProtoMessage() {}

func (x *VendorAppVersion) ProtoReflect() protoreflect.Message {
	mi := &file_proto_deployment_manager_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VendorAppVersion.ProtoReflect.Descriptor instead.
func (*VendorAppVersion) Descriptor() ([]byte, []int) {
	return file_proto_deployment_manager_proto_rawDescGZIP(), []int{56}
}

func (x *VendorAppVersion) GetAppVersion() string {
	if x != nil {
		return x.AppVersion
	}
	return ""
}

func (x *VendorAppVersion) GetChartVersion() string {
	if x != nil {
		return x.ChartVersion
	}
	return ""
}

type GetCompatibleVersionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompatibleVersions []*VendorAppVersion `protobuf:"bytes,3,rep,name=compatible_versions,json=compatibleVersions,proto3" json:"compatible_versions,omitempty"`
}

func (x *GetCompatibleVersionsResponse) Reset() {
	*x = GetCompatibleVersionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_deployment_manager_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCompatibleVersionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCompatibleVersionsResponse) ProtoMessage() {}

func (x *GetCompatibleVersionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_deployment_manager_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCompatibleVersionsResponse.ProtoReflect.Descriptor instead.
func (*GetCompatibleVersionsResponse) Descriptor() ([]byte, []int) {
	return file_proto_deployment_manager_proto_rawDescGZIP(), []int{57}
}

func (x *GetCompatibleVersionsResponse) GetCompatibleVersions() []*VendorAppVersion {
	if x != nil {
		return x.CompatibleVersions
	}
	return nil
}

type DeployCustomAppRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterName string            `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
	Name        string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	AppPath     string            `protobuf:"bytes,3,opt,name=app_path,json=appPath,proto3" json:"app_path,omitempty"`
	Namespace   string            `protobuf:"bytes,4,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Values      map[string]string `protobuf:"bytes,5,rep,name=values,proto3" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DeployCustomAppRequest) Reset() {
	*x = DeployCustomAppRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_deployment_manager_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeployCustomAppRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeployCustomAppRequest) ProtoMessage() {}

func (x *DeployCustomAppRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_deployment_manager_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeployCustomAppRequest.ProtoReflect.Descriptor instead.
func (*DeployCustomAppRequest) Descriptor() ([]byte, []int) {
	return file_proto_deployment_manager_proto_rawDescGZIP(), []int{58}
}

func (x *DeployCustomAppRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *DeployCustomAppRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeployCustomAppRequest) GetAppPath() string {
	if x != nil {
		return x.AppPath
	}
	return ""
}

func (x *DeployCustomAppRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *DeployCustomAppRequest) GetValues() map[string]string {
	if x != nil {
		return x.Values
	}
	return nil
}

type RemoveCustomAppRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterName string `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Namespace   string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *RemoveCustomAppRequest) Reset() {
	*x = RemoveCustomAppRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_deployment_manager_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveCustomAppRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveCustomAppRequest) ProtoMessage() {}

func (x *RemoveCustomAppRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_deployment_manager_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveCustomAppRequest.ProtoReflect.Descriptor instead.
func (*RemoveCustomAppRequest) Descriptor() ([]byte, []int) {
	return file_proto_deployment_manager_proto_rawDescGZIP(), []int{59}
}

func (x *RemoveCustomAppRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *RemoveCustomAppRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RemoveCustomAppRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

type Meta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter  string `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
}

func (x *Meta) Reset() {
	*x = Meta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_deployment_manager_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Meta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Meta) ProtoMessage() {}

func (x *Meta) ProtoReflect() protoreflect.Message {
	mi := &file_proto_deployment_manager_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Meta.ProtoReflect.Descriptor instead.
func (*Meta) Descriptor() ([]byte, []int) {
	return file_proto_deployment_manager_proto_rawDescGZIP(), []int{60}
}

func (x *Meta) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *Meta) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

type RemoveDeploymentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeploymentId string `protobuf:"bytes,1,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
}

func (x *RemoveDeploymentRequest) Reset() {
	*x = RemoveDeploymentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_deployment_manager_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveDeploymentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveDeploymentRequest) ProtoMessage() {}

func (x *RemoveDeploymentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_deployment_manager_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveDeploymentRequest.ProtoReflect.Descriptor instead.
func (*RemoveDeploymentRequest) Descriptor() ([]byte, []int) {
	return file_proto_deployment_manager_proto_rawDescGZIP(), []int{61}
}

func (x *RemoveDeploymentRequest) GetDeploymentId() string {
	if x != nil {
		return x.DeploymentId
	}
	return ""
}

type RemoveDeploymentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *RemoveDeploymentResponse) Reset() {
	*x = RemoveDeploymentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_deployment_manager_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveDeploymentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveDeploymentResponse) ProtoMessage() {}

func (x *RemoveDeploymentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_deployment_manager_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveDeploymentResponse.ProtoReflect.Descriptor instead.
func (*RemoveDeploymentResponse) Descriptor() ([]byte, []int) {
	return file_proto_deployment_manager_proto_rawDescGZIP(), []int{62}
}

func (x *RemoveDeploymentResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type IsDeploymentExistRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeploymentId string `protobuf:"bytes,1,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
}

func (x *IsDeploymentExistRequest) Reset() {
	*x = IsDeploymentExistRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_deployment_manager_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsDeploymentExistRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsDeploymentExistRequest) ProtoMessage() {}

func (x *IsDeploymentExistRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_deployment_manager_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsDeploymentExistRequest.ProtoReflect.Descriptor instead.
func (*IsDeploymentExistRequest) Descriptor() ([]byte, []int) {
	return file_proto_deployment_manager_proto_rawDescGZIP(), []int{63}
}

func (x *IsDeploymentExistRequest) GetDeploymentId() string {
	if x != nil {
		return x.DeploymentId
	}
	return ""
}

type IsDeploymentExistResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Deployed bool `protobuf:"varint,1,opt,name=deployed,proto3" json:"deployed,omitempty"`
}

func (x *IsDeploymentExistResponse) Reset() {
	*x = IsDeploymentExistResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_deployment_manager_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsDeploymentExistResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsDeploymentExistResponse) ProtoMessage() {}

func (x *IsDeploymentExistResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_deployment_manager_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsDeploymentExistResponse.ProtoReflect.Descriptor instead.
func (*IsDeploymentExistResponse) Descriptor() ([]byte, []int) {
	return file_proto_deployment_manager_proto_rawDescGZIP(), []int{64}
}

func (x *IsDeploymentExistResponse) GetDeployed() bool {
	if x != nil {
		return x.Deployed
	}
	return false
}

type ManagedServiceDownloadDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  ManagedServiceDownloadStatus `protobuf:"varint,1,opt,name=status,proto3,enum=deploymentManager.ManagedServiceDownloadStatus" json:"status,omitempty"`
	IconUrl string                       `protobuf:"bytes,2,opt,name=icon_url,json=iconUrl,proto3" json:"icon_url,omitempty"`
}

func (x *ManagedServiceDownloadDetails) Reset() {
	*x = ManagedServiceDownloadDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_deployment_manager_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManagedServiceDownloadDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagedServiceDownloadDetails) ProtoMessage() {}

func (x *ManagedServiceDownloadDetails) ProtoReflect() protoreflect.Message {
	mi := &file_proto_deployment_manager_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagedServiceDownloadDetails.ProtoReflect.Descriptor instead.
func (*ManagedServiceDownloadDetails) Descriptor() ([]byte, []int) {
	return file_proto_deployment_manager_proto_rawDescGZIP(), []int{65}
}

func (x *ManagedServiceDownloadDetails) GetStatus() ManagedServiceDownloadStatus {
	if x != nil {
		return x.Status
	}
	return ManagedServiceDownloadStatus_ManagedServiceDownloadStatusUnknown
}

func (x *ManagedServiceDownloadDetails) GetIconUrl() string {
	if x != nil {
		return x.IconUrl
	}
	return ""
}

type AppResourceRequirements struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManagedServicesResources map[string]*resource.Resources `protobuf:"bytes,1,rep,name=managed_services_resources,json=managedServicesResources,proto3" json:"managed_services_resources,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AppResource              *resource.Resources            `protobuf:"bytes,2,opt,name=app_resource,json=appResource,proto3" json:"app_resource,omitempty"`
}

func (x *AppResourceRequirements) Reset() {
	*x = AppResourceRequirements{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_deployment_manager_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppResourceRequirements) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppResourceRequirements) ProtoMessage() {}

func (x *AppResourceRequirements) ProtoReflect() protoreflect.Message {
	mi := &file_proto_deployment_manager_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppResourceRequirements.ProtoReflect.Descriptor instead.
func (*AppResourceRequirements) Descriptor() ([]byte, []int) {
	return file_proto_deployment_manager_proto_rawDescGZIP(), []int{66}
}

func (x *AppResourceRequirements) GetManagedServicesResources() map[string]*resource.Resources {
	if x != nil {
		return x.ManagedServicesResources
	}
	return nil
}

func (x *AppResourceRequirements) GetAppResource() *resource.Resources {
	if x != nil {
		return x.AppResource
	}
	return nil
}

type Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Home          string            `protobuf:"bytes,2,opt,name=home,proto3" json:"home,omitempty"`
	Sources       []string          `protobuf:"bytes,3,rep,name=sources,proto3" json:"sources,omitempty"`
	Version       string            `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	Description   string            `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Keywords      []string          `protobuf:"bytes,6,rep,name=keywords,proto3" json:"keywords,omitempty"`
	Maintainers   []*Maintainer     `protobuf:"bytes,7,rep,name=maintainers,proto3" json:"maintainers,omitempty"`
	Engine        string            `protobuf:"bytes,8,opt,name=engine,proto3" json:"engine,omitempty"`
	Icon          string            `protobuf:"bytes,9,opt,name=icon,proto3" json:"icon,omitempty"`
	ApiVersion    string            `protobuf:"bytes,10,opt,name=apiVersion,proto3" json:"apiVersion,omitempty"`
	Condition     string            `protobuf:"bytes,11,opt,name=condition,proto3" json:"condition,omitempty"`
	Tags          string            `protobuf:"bytes,12,opt,name=tags,proto3" json:"tags,omitempty"`
	AppVersion    string            `protobuf:"bytes,13,opt,name=appVersion,proto3" json:"appVersion,omitempty"`
	Deprecated    bool              `protobuf:"varint,14,opt,name=deprecated,proto3" json:"deprecated,omitempty"`
	TillerVersion string            `protobuf:"bytes,15,opt,name=tillerVersion,proto3" json:"tillerVersion,omitempty"`
	Annotations   map[string]string `protobuf:"bytes,16,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	KubeVersion   string            `protobuf:"bytes,17,opt,name=kubeVersion,proto3" json:"kubeVersion,omitempty"`
}

func (x *Metadata) Reset() {
	*x = Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_deployment_manager_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata) ProtoMessage() {}

func (x *Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_proto_deployment_manager_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata.ProtoReflect.Descriptor instead.
func (*Metadata) Descriptor() ([]byte, []int) {
	return file_proto_deployment_manager_proto_rawDescGZIP(), []int{67}
}

func (x *Metadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Metadata) GetHome() string {
	if x != nil {
		return x.Home
	}
	return ""
}

func (x *Metadata) GetSources() []string {
	if x != nil {
		return x.Sources
	}
	return nil
}

func (x *Metadata) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Metadata) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Metadata) GetKeywords() []string {
	if x != nil {
		return x.Keywords
	}
	return nil
}

func (x *Metadata) GetMaintainers() []*Maintainer {
	if x != nil {
		return x.Maintainers
	}
	return nil
}

func (x *Metadata) GetEngine() string {
	if x != nil {
		return x.Engine
	}
	return ""
}

func (x *Metadata) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *Metadata) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *Metadata) GetCondition() string {
	if x != nil {
		return x.Condition
	}
	return ""
}

func (x *Metadata) GetTags() string {
	if x != nil {
		return x.Tags
	}
	return ""
}

func (x *Metadata) GetAppVersion() string {
	if x != nil {
		return x.AppVersion
	}
	return ""
}

func (x *Metadata) GetDeprecated() bool {
	if x != nil {
		return x.Deprecated
	}
	return false
}

func (x *Metadata) GetTillerVersion() string {
	if x != nil {
		return x.TillerVersion
	}
	return ""
}

func (x *Metadata) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *Metadata) GetKubeVersion() string {
	if x != nil {
		return x.KubeVersion
	}
	return ""
}

type Maintainer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Email string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	Url   string `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *Maintainer) Reset() {
	*x = Maintainer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_deployment_manager_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Maintainer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Maintainer) ProtoMessage() {}

func (x *Maintainer) ProtoReflect() protoreflect.Message {
	mi := &file_proto_deployment_manager_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Maintainer.ProtoReflect.Descriptor instead.
func (*Maintainer) Descriptor() ([]byte, []int) {
	return file_proto_deployment_manager_proto_rawDescGZIP(), []int{68}
}

func (x *Maintainer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Maintainer) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Maintainer) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type MoveClusterMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId   string   `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	ProjectId   string   `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Apps        []string `protobuf:"bytes,3,rep,name=apps,proto3" json:"apps,omitempty"`
	RetryCount  int32    `protobuf:"varint,4,opt,name=retry_count,json=retryCount,proto3" json:"retry_count,omitempty"`
	BackOffTime int32    `protobuf:"varint,5,opt,name=back_off_time,json=backOffTime,proto3" json:"back_off_time,omitempty"`
}

func (x *MoveClusterMsg) Reset() {
	*x = MoveClusterMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_deployment_manager_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoveClusterMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveClusterMsg) ProtoMessage() {}

func (x *MoveClusterMsg) ProtoReflect() protoreflect.Message {
	mi := &file_proto_deployment_manager_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveClusterMsg.ProtoReflect.Descriptor instead.
func (*MoveClusterMsg) Descriptor() ([]byte, []int) {
	return file_proto_deployment_manager_proto_rawDescGZIP(), []int{69}
}

func (x *MoveClusterMsg) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *MoveClusterMsg) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *MoveClusterMsg) GetApps() []string {
	if x != nil {
		return x.Apps
	}
	return nil
}

func (x *MoveClusterMsg) GetRetryCount() int32 {
	if x != nil {
		return x.RetryCount
	}
	return 0
}

func (x *MoveClusterMsg) GetBackOffTime() int32 {
	if x != nil {
		return x.BackOffTime
	}
	return 0
}

type DeploymentKongEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId    string                       `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	DeploymentId string                       `protobuf:"bytes,2,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
	Operation    DeploymentKongEventOperation `protobuf:"varint,3,opt,name=operation,proto3,enum=deploymentManager.DeploymentKongEventOperation" json:"operation,omitempty"`
	SubDomain    string                       `protobuf:"bytes,4,opt,name=sub_domain,json=subDomain,proto3" json:"sub_domain,omitempty"`
}

func (x *DeploymentKongEvent) Reset() {
	*x = DeploymentKongEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_deployment_manager_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeploymentKongEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploymentKongEvent) ProtoMessage() {}

func (x *DeploymentKongEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_deployment_manager_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploymentKongEvent.ProtoReflect.Descriptor instead.
func (*DeploymentKongEvent) Descriptor() ([]byte, []int) {
	return file_proto_deployment_manager_proto_rawDescGZIP(), []int{70}
}

func (x *DeploymentKongEvent) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *DeploymentKongEvent) GetDeploymentId() string {
	if x != nil {
		return x.DeploymentId
	}
	return ""
}

func (x *DeploymentKongEvent) GetOperation() DeploymentKongEventOperation {
	if x != nil {
		return x.Operation
	}
	return DeploymentKongEventOperation_DeploymentEventOperationUnknown
}

func (x *DeploymentKongEvent) GetSubDomain() string {
	if x != nil {
		return x.SubDomain
	}
	return ""
}

type ActionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Id      string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ActionResponse) Reset() {
	*x = ActionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_deployment_manager_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionResponse) ProtoMessage() {}

func (x *ActionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_deployment_manager_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionResponse.ProtoReflect.Descriptor instead.
func (*ActionResponse) Descriptor() ([]byte, []int) {
	return file_proto_deployment_manager_proto_rawDescGZIP(), []int{71}
}

func (x *ActionResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ActionResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ActionResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

var File_proto_deployment_manager_proto protoreflect.FileDescriptor

var file_proto_deployment_manager_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x11, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x1a, 0x4a, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x2f, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x65, 0x79, 0x6e, 0x65, 0x6e, 0x63, 0x6f, 0x75,
	0x72, 0x74, 0x2f, 0x72, 0x63, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2d, 0x6c, 0x69, 0x62,
	0x2f, 0x76, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x63, 0x5f, 0x73, 0x70, 0x65,
	0x63, 0x2f, 0x72, 0x63, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x50, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x72, 0x65, 0x79, 0x6e, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x72, 0x74, 0x2f, 0x72,
	0x63, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2d, 0x6c, 0x69, 0x62, 0x2f, 0x76, 0x32, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x5f, 0x61, 0x70, 0x70,
	0x2f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x5f, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x4c, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x65, 0x79, 0x6e, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x72, 0x74,
	0x2f, 0x72, 0x63, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2d, 0x6c, 0x69, 0x62, 0x2f, 0x76,
	0x32, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x42, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x72, 0x65, 0x79, 0x6e, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x72, 0x74, 0x2f, 0x72,
	0x63, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2d, 0x6c, 0x69, 0x62, 0x2f, 0x76, 0x32, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x4e, 0x0a, 0x0e, 0x4d, 0x6f, 0x76, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x22, 0x2a, 0x0a, 0x0e, 0x4d, 0x6f, 0x76, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22,
	0x4e, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x6c, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x47, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x41, 0x70, 0x70, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xfb, 0x04, 0x0a, 0x0b, 0x41, 0x70, 0x70,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x6c, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6f, 0x6c,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63,
	0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x72, 0x74, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x41, 0x70, 0x70,
	0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x72, 0x74, 0x5f, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x72, 0x74, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x71, 0x0a, 0x17, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x41, 0x70, 0x70,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x15, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x7a, 0x0a, 0x1a, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x46, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x35, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x6f, 0x6c,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x46, 0x0a,
	0x13, 0x47, 0x65, 0x74, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xc3, 0x01, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x63, 0x0a, 0x0c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x57, 0x69, 0x74, 0x68, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x3e, 0x0a, 0x10, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x55, 0x0a, 0x1c, 0x4c,
	0x69, 0x73, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x57, 0x69,
	0x74, 0x68, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x2e, 0x0a, 0x12, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x41, 0x70, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x22, 0xb3, 0x01, 0x0a, 0x11, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x41, 0x70,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x75, 0x70, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x54, 0x6f, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0x4f, 0x0a, 0x12, 0x44, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x2e, 0x0a, 0x12, 0x44, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x6a, 0x0a, 0x0c, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x31, 0x0a, 0x09, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x04,
	0x75, 0x73, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52,
	0x04, 0x75, 0x73, 0x65, 0x64, 0x22, 0x92, 0x03, 0x0a, 0x0e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x45, 0x0a, 0x06, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x12, 0x52, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x38, 0x0a, 0x0a, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x39, 0x0a, 0x0b, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa6, 0x02, 0x0a, 0x10, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12,
	0x23, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x22, 0x82, 0x01, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3d,
	0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x39, 0x0a,
	0x0b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xba, 0x03, 0x0a, 0x0c, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x38, 0x0a, 0x0a, 0x61, 0x70, 0x70,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x09, 0x61, 0x70, 0x70, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x5c, 0x0a, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x6c, 0x0a, 0x15, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x38, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x4d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x13, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x1a,
	0x5c, 0x0a, 0x13, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x46, 0x0a,
	0x18, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x4d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x52, 0x0a, 0x11, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x41,
	0x70, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x4c, 0x0a, 0x0f, 0x47, 0x65, 0x74,
	0x41, 0x70, 0x70, 0x52, 0x63, 0x53, 0x70, 0x65, 0x63, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x76, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x41, 0x70,
	0x70, 0x52, 0x63, 0x53, 0x70, 0x65, 0x63, 0x52, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f,
	0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x07, 0x72, 0x63, 0x5f, 0x73, 0x70, 0x65, 0x63,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x63, 0x5f, 0x73, 0x70, 0x65, 0x63,
	0x2e, 0x52, 0x43, 0x53, 0x70, 0x65, 0x63, 0x52, 0x06, 0x72, 0x63, 0x53, 0x70, 0x65, 0x63, 0x22,
	0x3a, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f,
	0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x61, 0x0a, 0x17, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x53, 0x6f, 0x6c,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x8c,
	0x02, 0x0a, 0x17, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x4a, 0x0a, 0x0e, 0x64, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x23, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x41, 0x70, 0x70, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x72, 0x74, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x61,
	0x70, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x08,
	0x61, 0x70, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f,
	0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x07, 0x61, 0x70, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x61, 0x74, 0x65, 0x22, 0x16, 0x0a,
	0x14, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x48, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6f, 0x6c,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f,
	0x0a, 0x04, 0x61, 0x70, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x61, 0x70, 0x70, 0x73, 0x22,
	0xd8, 0x03, 0x0a, 0x08, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d,
	0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x43, 0x68, 0x61, 0x72, 0x74, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x61,
	0x70, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x3a, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x61, 0x70, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x57, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x12, 0x48, 0x0a, 0x0b, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x53, 0x6f, 0x6c, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x0b, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x49, 0x64, 0x22, 0x6b, 0x0a, 0x13, 0x53, 0x6f,
	0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x75,
	0x6e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x75, 0x6e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x69, 0x6e, 0x67, 0x22, 0x4e, 0x0a, 0x10, 0x53, 0x6f, 0x6c, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69,
	0x63, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x68, 0x6f, 0x6d, 0x65, 0x22, 0x4e, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x41, 0x70,
	0x70, 0x50, 0x76, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x41, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x55, 0x0a, 0x1b, 0x47, 0x65,
	0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x92, 0x02, 0x0a, 0x0f, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x65, 0x64, 0x42, 0x79, 0x12, 0x64, 0x0a, 0x19, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x42, 0x79, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x65, 0x64, 0x42, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3d, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52,
	0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x41, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xa8, 0x02, 0x0a, 0x1b, 0x47, 0x65,
	0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x28,
	0x0a, 0x07, 0x72, 0x63, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x72, 0x63, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x52, 0x43, 0x53, 0x70, 0x65, 0x63,
	0x52, 0x06, 0x72, 0x63, 0x53, 0x70, 0x65, 0x63, 0x12, 0x74, 0x0a, 0x12, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x1a, 0x44,
	0x0a, 0x16, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x3b, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x22, 0x4e, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x58, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f,
	0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x50, 0x0a, 0x17, 0x4c,
	0x69, 0x73, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xba, 0x05,
	0x0a, 0x0e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x5f, 0x61, 0x70, 0x70, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x3a, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x61, 0x70, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x63, 0x6f, 0x6e,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x63, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x4f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x57, 0x61,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x63, 0x0a, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x64, 0x4f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x4f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x70,
	0x70, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x6c,
	0x61, 0x75, 0x6e, 0x63, 0x68, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x55, 0x72, 0x6c, 0x22, 0xe3, 0x01, 0x0a, 0x1c, 0x4c,
	0x61, 0x73, 0x74, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x5d, 0x0a, 0x16, 0x75,
	0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x14, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73,
	0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x69, 0x73, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x53, 0x74, 0x65,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x74, 0x65, 0x70, 0x52, 0x04, 0x53, 0x74, 0x65, 0x70, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x22, 0xb2, 0x03, 0x0a, 0x0e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x53, 0x6f, 0x6c, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x6f, 0x6c,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x08, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42,
	0x02, 0x18, 0x01, 0x52, 0x08, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f,
	0x67, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x65,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x49, 0x64, 0x22, 0x38, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22,
	0x73, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x43, 0x0a, 0x0c, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x0c, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x22, 0x59, 0x0a, 0x0c, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22,
	0x5d, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x62,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0b, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x4a,
	0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x94, 0x01, 0x0a, 0x20, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12,
	0x23, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x22, 0x3c, 0x0a, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22,
	0x67, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x51, 0x6f, 0x73, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x6f, 0x72, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x23, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x55, 0x73, 0x65, 0x72, 0x22, 0x50, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74,
	0x51, 0x6f, 0x73, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xc1, 0x01, 0x0a, 0x13, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x51, 0x6f, 0x73, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x44, 0x0a, 0x13, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x52, 0x12, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x0d, 0x71, 0x6f, 0x73, 0x5f, 0x69,
	0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x51, 0x6f, 0x73, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72,
	0x52, 0x0c, 0x71, 0x6f, 0x73, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x22, 0xfb,
	0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x6f, 0x73, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x6c,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x4d, 0x0a, 0x18, 0x61, 0x70, 0x70, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x16, 0x61, 0x70, 0x70, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x5a, 0x0a, 0x15, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x71, 0x6f, 0x73, 0x5f,
	0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x51, 0x6f, 0x73, 0x49, 0x6e,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x13, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x51, 0x6f, 0x73, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x9a, 0x02, 0x0a,
	0x12, 0x47, 0x65, 0x74, 0x51, 0x6f, 0x73, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72,
	0x52, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d,
	0x0a, 0x18, 0x61, 0x70, 0x70, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x16, 0x61, 0x70, 0x70, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x5a, 0x0a,
	0x15, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x69, 0x6e, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x51, 0x6f, 0x73, 0x49, 0x6e, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x6f, 0x72, 0x52, 0x13, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x51, 0x6f, 0x73,
	0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x6c, 0x64,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f,
	0x6c, 0x64, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x87, 0x01, 0x0a, 0x0f, 0x53, 0x6f,
	0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a,
	0x0b, 0x61, 0x70, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x41, 0x70, 0x70, 0x44,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x22, 0x59, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74,
	0x69, 0x62, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x58,
	0x0a, 0x10, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x72, 0x74, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x75, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x13, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0x92, 0x02, 0x0a, 0x16, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x4d, 0x0a, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x41, 0x70, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x6d, 0x0a, 0x16, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x22, 0x38, 0x0a, 0x04, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x3e, 0x0a,
	0x17, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x34, 0x0a,
	0x18, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x22, 0x3f, 0x0a, 0x18, 0x49, 0x73, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x23, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x22, 0x37, 0x0a, 0x19, 0x49, 0x73, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x64, 0x22, 0x83, 0x01,
	0x0a, 0x1d, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12,
	0x47, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2f, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x63, 0x6f, 0x6e,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x63, 0x6f, 0x6e,
	0x55, 0x72, 0x6c, 0x22, 0xbc, 0x02, 0x0a, 0x17, 0x41, 0x70, 0x70, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x86, 0x01, 0x0a, 0x1a, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x41, 0x70, 0x70, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x18,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x5f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x1a, 0x60, 0x0a, 0x1d, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x9d, 0x05, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x68, 0x6f, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x3f, 0x0a, 0x0b, 0x6d, 0x61, 0x69,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x0b, 0x6d,
	0x61, 0x69, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70,
	0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x72,
	0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x64, 0x65,
	0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x69, 0x6c, 0x6c,
	0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x74, 0x69, 0x6c, 0x6c, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4e,
	0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x10, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x20,
	0x0a, 0x0b, 0x6b, 0x75, 0x62, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x6b, 0x75, 0x62, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x1a, 0x3e, 0x0a, 0x10, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x20, 0x0a, 0x06, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x47, 0x4f, 0x54, 0x50, 0x4c,
	0x10, 0x01, 0x22, 0x48, 0x0a, 0x0a, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0xa7, 0x01, 0x0a,
	0x0e, 0x4d, 0x6f, 0x76, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x61, 0x70, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x61, 0x70, 0x70,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x6f, 0x66, 0x66, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x62, 0x61, 0x63, 0x6b, 0x4f,
	0x66, 0x66, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xc7, 0x01, 0x0a, 0x13, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x6f, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x4d, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x6f, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x75, 0x62, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x22, 0x54, 0x0a, 0x0e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x2a, 0xb8, 0x01, 0x0a, 0x1a, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x21, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x25, 0x0a, 0x21,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x02, 0x12, 0x26, 0x0a, 0x22, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x10,
	0x03, 0x2a, 0xa8, 0x01, 0x0a, 0x10, 0x41, 0x70, 0x70, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x70, 0x70, 0x44, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01,
	0x12, 0x1a, 0x0a, 0x16, 0x41, 0x70, 0x70, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a,
	0x49, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17,
	0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x70, 0x65, 0x6e,
	0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x10, 0x04, 0x12, 0x21, 0x0a, 0x1d, 0x44, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e,
	0x63, 0x69, 0x65, 0x73, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x05, 0x2a, 0x92, 0x01, 0x0a,
	0x16, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x42,
	0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x1b, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x55,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x10, 0x05,
	0x12, 0x0f, 0x0a, 0x0b, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x10,
	0x06, 0x2a, 0x5c, 0x0a, 0x14, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x55, 0x70, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x70,
	0x70, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x70,
	0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x10, 0x02, 0x2a,
	0x34, 0x0a, 0x0c, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x18, 0x0a, 0x14, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x56, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x10, 0x01, 0x2a, 0x6b, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x01, 0x12,
	0x11, 0x0a, 0x0d, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x10, 0x03, 0x2a, 0x46, 0x0a, 0x0f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x6e, 0x69, 0x74, 0x10, 0x01, 0x12, 0x0a,
	0x0a, 0x06, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x6e,
	0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x10, 0x03, 0x2a, 0x6a, 0x0a, 0x0f, 0x4b, 0x38,
	0x73, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a,
	0x03, 0x41, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x50, 0x56, 0x10, 0x01, 0x12, 0x07,
	0x0a, 0x03, 0x50, 0x56, 0x43, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x45, 0x52, 0x56, 0x49,
	0x43, 0x45, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10,
	0x04, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x45, 0x43, 0x52, 0x45, 0x54, 0x53, 0x10, 0x05, 0x12, 0x0d,
	0x0a, 0x09, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x4d, 0x41, 0x50, 0x10, 0x06, 0x12, 0x07, 0x0a,
	0x03, 0x43, 0x52, 0x44, 0x10, 0x07, 0x2a, 0x83, 0x01, 0x0a, 0x14, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x20, 0x0a, 0x1c, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10,
	0x00, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x61, 0x74, 0x61, 0x6c,
	0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05,
	0x50, 0x61, 0x6e, 0x69, 0x63, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x72, 0x61, 0x63, 0x65,
	0x10, 0x06, 0x12, 0x08, 0x0a, 0x04, 0x57, 0x61, 0x72, 0x6e, 0x10, 0x07, 0x2a, 0xf2, 0x01, 0x0a,
	0x1c, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x0a,
	0x23, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x27, 0x0a, 0x23, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12,
	0x26, 0x0a, 0x22, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x46,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x02, 0x12, 0x28, 0x0a, 0x24, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x10,
	0x03, 0x12, 0x2e, 0x0a, 0x2a, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x54, 0x6f, 0x42, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x10,
	0x04, 0x2a, 0xa5, 0x01, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x65, 0x70,
	0x12, 0x16, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x65, 0x70, 0x5f, 0x55,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x42,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x10,
	0x02, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x6f, 0x6c,
	0x6c, 0x42, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x6f,
	0x74, 0x61, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b,
	0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x10, 0x06, 0x2a, 0x5b, 0x0a, 0x1c, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x6f, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x1f, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x0a,
	0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x10, 0x02, 0x32, 0xb9, 0x14, 0x0a, 0x11, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x6a, 0x0a, 0x0f,
	0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x29, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x0f, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x41, 0x70, 0x70, 0x12, 0x29, 0x2e, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x41, 0x70, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x0f, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x41, 0x70, 0x70, 0x12, 0x29,
	0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x41,
	0x70, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x64,
	0x0a, 0x0d, 0x47, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x27, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74,
	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x76, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2d, 0x2e, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x47, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47,
	0x65, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x76, 0x0a, 0x13,
	0x47, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x2d, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6f, 0x6c, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x27, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6f,
	0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28,
	0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x0b, 0x47, 0x65,
	0x74, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x2e, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x26, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x70, 0x0a, 0x14, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x2a, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6f, 0x6c, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2a,
	0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x0c,
	0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x52, 0x63, 0x53, 0x70, 0x65, 0x63, 0x12, 0x22, 0x2e, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x52, 0x63, 0x53, 0x70, 0x65, 0x63, 0x52, 0x65, 0x71,
	0x1a, 0x22, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x52, 0x63, 0x53, 0x70, 0x65,
	0x63, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70,
	0x50, 0x76, 0x63, 0x73, 0x12, 0x24, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x50,
	0x76, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x61, 0x70, 0x70,
	0x2e, 0x41, 0x70, 0x70, 0x50, 0x56, 0x43, 0x73, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x0e, 0x47, 0x65,
	0x74, 0x41, 0x70, 0x70, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x24, 0x2e, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x71, 0x1a, 0x24, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x09, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x41, 0x70, 0x70, 0x12, 0x23, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x41, 0x70, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x0f, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x25, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x25,
	0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x6d, 0x0a, 0x10, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2a, 0x2e, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x70, 0x0a, 0x11, 0x49, 0x73, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x12, 0x2b, 0x2e, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x49, 0x73, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x49, 0x73, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7c, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x2f, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69,
	0x62, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x30, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74,
	0x69, 0x62, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x51, 0x6f, 0x73,
	0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x25, 0x2e, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65,
	0x74, 0x51, 0x6f, 0x73, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71,
	0x1a, 0x25, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x51, 0x6f, 0x73, 0x49, 0x6e, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x10, 0x4c, 0x69, 0x73,
	0x74, 0x51, 0x6f, 0x73, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x2e,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x6f, 0x73, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x6f, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x6f,
	0x73, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12,
	0x8b, 0x01, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x33, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x33, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x5b, 0x0a,
	0x0a, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x12, 0x24, 0x2e, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x25, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x0c, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x12, 0x26, 0x2e, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x27, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a,
	0x0a, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x41, 0x70, 0x70, 0x12, 0x24, 0x2e, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x25, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x41, 0x70, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7f, 0x0a, 0x19, 0x4c, 0x69,
	0x73, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x57, 0x69, 0x74,
	0x68, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2f, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x2f, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x0b, 0x4d,
	0x6f, 0x76, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x21, 0x2e, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4d,
	0x6f, 0x76, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x22, 0x00, 0x42, 0x49, 0x5a, 0x47, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x72, 0x65, 0x79, 0x6e, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x72, 0x74, 0x2f, 0x72, 0x63, 0x2d,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_deployment_manager_proto_rawDescOnce sync.Once
	file_proto_deployment_manager_proto_rawDescData = file_proto_deployment_manager_proto_rawDesc
)

func file_proto_deployment_manager_proto_rawDescGZIP() []byte {
	file_proto_deployment_manager_proto_rawDescOnce.Do(func() {
		file_proto_deployment_manager_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_deployment_manager_proto_rawDescData)
	})
	return file_proto_deployment_manager_proto_rawDescData
}

var file_proto_deployment_manager_proto_enumTypes = make([]protoimpl.EnumInfo, 13)
var file_proto_deployment_manager_proto_msgTypes = make([]protoimpl.MessageInfo, 83)
var file_proto_deployment_manager_proto_goTypes = []interface{}{
	(ManagedServiceDeployStatus)(0),          // 0: deploymentManager.ManagedServiceDeployStatus
	(AppDownloadState)(0),                    // 1: deploymentManager.AppDownloadState
	(EventTriggeredByAction)(0),              // 2: deploymentManager.EventTriggeredByAction
	(UpgradeOperationType)(0),                // 3: deploymentManager.UpgradeOperationType
	(SolutionType)(0),                        // 4: deploymentManager.SolutionType
	(EventType)(0),                           // 5: deploymentManager.EventType
	(EventTypeStatus)(0),                     // 6: deploymentManager.EventTypeStatus
	(K8SResourceType)(0),                     // 7: deploymentManager.K8sResourceType
	(DeploymentEventLevel)(0),                // 8: deploymentManager.DeploymentEventLevel
	(ManagedServiceDownloadStatus)(0),        // 9: deploymentManager.ManagedServiceDownloadStatus
	(UpdateStep)(0),                          // 10: deploymentManager.UpdateStep
	(DeploymentKongEventOperation)(0),        // 11: deploymentManager.DeploymentKongEventOperation
	(Metadata_Engine)(0),                     // 12: deploymentManager.Metadata.Engine
	(*MoveClusterReq)(nil),                   // 13: deploymentManager.MoveClusterReq
	(*MoveClusterRes)(nil),                   // 14: deploymentManager.MoveClusterRes
	(*GetAppMetadataReq)(nil),                // 15: deploymentManager.GetAppMetadataReq
	(*GetAppMetadataRes)(nil),                // 16: deploymentManager.GetAppMetadataRes
	(*AppMetadata)(nil),                      // 17: deploymentManager.AppMetadata
	(*GetSolutionRequest)(nil),               // 18: deploymentManager.GetSolutionRequest
	(*GetSolutionResponse)(nil),              // 19: deploymentManager.GetSolutionResponse
	(*ListDeploymentsWithFilterReq)(nil),     // 20: deploymentManager.ListDeploymentsWithFilterReq
	(*ListDeploymentsWithFilterRes)(nil),     // 21: deploymentManager.ListDeploymentsWithFilterRes
	(*UpgradeAppResponse)(nil),               // 22: deploymentManager.UpgradeAppResponse
	(*UpgradeAppRequest)(nil),                // 23: deploymentManager.UpgradeAppRequest
	(*DownloadReleaseReq)(nil),               // 24: deploymentManager.DownloadReleaseReq
	(*DownloadReleaseRes)(nil),               // 25: deploymentManager.DownloadReleaseRes
	(*ResourceInfo)(nil),                     // 26: deploymentManager.ResourceInfo
	(*ManagedService)(nil),                   // 27: deploymentManager.ManagedService
	(*DeployAppRequest)(nil),                 // 28: deploymentManager.DeployAppRequest
	(*Config)(nil),                           // 29: deploymentManager.Config
	(*DeployConfig)(nil),                     // 30: deploymentManager.DeployConfig
	(*DeployAppResponse)(nil),                // 31: deploymentManager.DeployAppResponse
	(*GetAppRcSpecReq)(nil),                  // 32: deploymentManager.GetAppRcSpecReq
	(*GetAppRcSpecRes)(nil),                  // 33: deploymentManager.GetAppRcSpecRes
	(*ListSolutionVersionsReq)(nil),          // 34: deploymentManager.ListSolutionVersionsReq
	(*ListSolutionVersionsRes)(nil),          // 35: deploymentManager.ListSolutionVersionsRes
	(*SolutionVersionMetadata)(nil),          // 36: deploymentManager.SolutionVersionMetadata
	(*ListSolutionsRequest)(nil),             // 37: deploymentManager.ListSolutionsRequest
	(*ListSolutionsResponse)(nil),            // 38: deploymentManager.ListSolutionsResponse
	(*Solution)(nil),                         // 39: deploymentManager.Solution
	(*SolutionDeployments)(nil),              // 40: deploymentManager.SolutionDeployments
	(*SolutionMetadata)(nil),                 // 41: deploymentManager.SolutionMetadata
	(*GetAppPvcsRequest)(nil),                // 42: deploymentManager.GetAppPvcsRequest
	(*GetDeploymentEventsRequest)(nil),       // 43: deploymentManager.GetDeploymentEventsRequest
	(*GetDeploymentEventsResponse)(nil),      // 44: deploymentManager.GetDeploymentEventsResponse
	(*DeploymentEvent)(nil),                  // 45: deploymentManager.DeploymentEvent
	(*GetDeploymentConfigRequest)(nil),       // 46: deploymentManager.GetDeploymentConfigRequest
	(*GetDeploymentConfigResponse)(nil),      // 47: deploymentManager.GetDeploymentConfigResponse
	(*GetDeploymentRequest)(nil),             // 48: deploymentManager.GetDeploymentRequest
	(*GetDeploymentResponse)(nil),            // 49: deploymentManager.GetDeploymentResponse
	(*ListDeploymentsRequest)(nil),           // 50: deploymentManager.ListDeploymentsRequest
	(*ListDeploymentsResponse)(nil),          // 51: deploymentManager.ListDeploymentsResponse
	(*DeploymentInfo)(nil),                   // 52: deploymentManager.DeploymentInfo
	(*LastUpgradeOperationMetadata)(nil),     // 53: deploymentManager.LastUpgradeOperationMetadata
	(*VendorSolution)(nil),                   // 54: deploymentManager.VendorSolution
	(*ListBackupRequest)(nil),                // 55: deploymentManager.ListBackupRequest
	(*ListBackupResponse)(nil),               // 56: deploymentManager.ListBackupResponse
	(*BackupObject)(nil),                     // 57: deploymentManager.BackupObject
	(*DeleteBackupRequest)(nil),              // 58: deploymentManager.DeleteBackupRequest
	(*DeleteBackupResponse)(nil),             // 59: deploymentManager.DeleteBackupResponse
	(*UpdateDeploymentConfigurationReq)(nil), // 60: deploymentManager.UpdateDeploymentConfigurationReq
	(*UpdateDeploymentConfigurationRes)(nil), // 61: deploymentManager.UpdateDeploymentConfigurationRes
	(*GetQosIndicatorReq)(nil),               // 62: deploymentManager.GetQosIndicatorReq
	(*ListQosIndicatorReq)(nil),              // 63: deploymentManager.ListQosIndicatorReq
	(*ClusterQosIndicator)(nil),              // 64: deploymentManager.ClusterQosIndicator
	(*ListQosIndicatorRes)(nil),              // 65: deploymentManager.ListQosIndicatorRes
	(*GetQosIndicatorRes)(nil),               // 66: deploymentManager.GetQosIndicatorRes
	(*SolutionVersion)(nil),                  // 67: deploymentManager.SolutionVersion
	(*GetCompatibleVersionsRequest)(nil),     // 68: deploymentManager.GetCompatibleVersionsRequest
	(*VendorAppVersion)(nil),                 // 69: deploymentManager.VendorAppVersion
	(*GetCompatibleVersionsResponse)(nil),    // 70: deploymentManager.GetCompatibleVersionsResponse
	(*DeployCustomAppRequest)(nil),           // 71: deploymentManager.DeployCustomAppRequest
	(*RemoveCustomAppRequest)(nil),           // 72: deploymentManager.RemoveCustomAppRequest
	(*Meta)(nil),                             // 73: deploymentManager.Meta
	(*RemoveDeploymentRequest)(nil),          // 74: deploymentManager.RemoveDeploymentRequest
	(*RemoveDeploymentResponse)(nil),         // 75: deploymentManager.RemoveDeploymentResponse
	(*IsDeploymentExistRequest)(nil),         // 76: deploymentManager.IsDeploymentExistRequest
	(*IsDeploymentExistResponse)(nil),        // 77: deploymentManager.IsDeploymentExistResponse
	(*ManagedServiceDownloadDetails)(nil),    // 78: deploymentManager.ManagedServiceDownloadDetails
	(*AppResourceRequirements)(nil),          // 79: deploymentManager.AppResourceRequirements
	(*Metadata)(nil),                         // 80: deploymentManager.Metadata
	(*Maintainer)(nil),                       // 81: deploymentManager.Maintainer
	(*MoveClusterMsg)(nil),                   // 82: deploymentManager.MoveClusterMsg
	(*DeploymentKongEvent)(nil),              // 83: deploymentManager.DeploymentKongEvent
	(*ActionResponse)(nil),                   // 84: deploymentManager.ActionResponse
	nil,                                      // 85: deploymentManager.AppMetadata.ManagedServicesStatusEntry
	nil,                                      // 86: deploymentManager.ListDeploymentsWithFilterReq.QueryParamsEntry
	nil,                                      // 87: deploymentManager.ManagedService.InputEntry
	nil,                                      // 88: deploymentManager.ManagedService.OutputEntry
	nil,                                      // 89: deploymentManager.Config.ConfigEntry
	nil,                                      // 90: deploymentManager.DeployConfig.OperatorConfigEntry
	nil,                                      // 91: deploymentManager.DeployConfig.StorageClassMappingEntry
	nil,                                      // 92: deploymentManager.GetDeploymentConfigResponse.PlatformVariablesEntry
	nil,                                      // 93: deploymentManager.DeployCustomAppRequest.ValuesEntry
	nil,                                      // 94: deploymentManager.AppResourceRequirements.ManagedServicesResourcesEntry
	nil,                                      // 95: deploymentManager.Metadata.AnnotationsEntry
	(*resource.Resources)(nil),               // 96: resource.Resources
	(*rc_spec.RCSpec)(nil),                   // 97: rc_spec.RCSpec
	(deploy_app.DeploymentStatus)(0),         // 98: deploy_app.DeploymentStatus
	(*resource.DeploymentQosIndicator)(nil),  // 99: resource.DeploymentQosIndicator
	(*app.AppPVCs)(nil),                      // 100: app.AppPVCs
}
var file_proto_deployment_manager_proto_depIdxs = []int32{
	17,  // 0: deploymentManager.GetAppMetadataRes.data:type_name -> deploymentManager.AppMetadata
	1,   // 1: deploymentManager.AppMetadata.status:type_name -> deploymentManager.AppDownloadState
	4,   // 2: deploymentManager.AppMetadata.type:type_name -> deploymentManager.SolutionType
	80,  // 3: deploymentManager.AppMetadata.chart_metadata:type_name -> deploymentManager.Metadata
	85,  // 4: deploymentManager.AppMetadata.managed_services_status:type_name -> deploymentManager.AppMetadata.ManagedServicesStatusEntry
	39,  // 5: deploymentManager.GetSolutionResponse.data:type_name -> deploymentManager.Solution
	86,  // 6: deploymentManager.ListDeploymentsWithFilterReq.query_params:type_name -> deploymentManager.ListDeploymentsWithFilterReq.QueryParamsEntry
	52,  // 7: deploymentManager.ListDeploymentsWithFilterRes.data:type_name -> deploymentManager.DeploymentInfo
	30,  // 8: deploymentManager.UpgradeAppRequest.config:type_name -> deploymentManager.DeployConfig
	96,  // 9: deploymentManager.ResourceInfo.requested:type_name -> resource.Resources
	96,  // 10: deploymentManager.ResourceInfo.used:type_name -> resource.Resources
	87,  // 11: deploymentManager.ManagedService.input:type_name -> deploymentManager.ManagedService.InputEntry
	88,  // 12: deploymentManager.ManagedService.output:type_name -> deploymentManager.ManagedService.OutputEntry
	0,   // 13: deploymentManager.ManagedService.deploy_status:type_name -> deploymentManager.ManagedServiceDeployStatus
	30,  // 14: deploymentManager.DeployAppRequest.config:type_name -> deploymentManager.DeployConfig
	89,  // 15: deploymentManager.Config.config:type_name -> deploymentManager.Config.ConfigEntry
	29,  // 16: deploymentManager.DeployConfig.app_config:type_name -> deploymentManager.Config
	90,  // 17: deploymentManager.DeployConfig.operator_config:type_name -> deploymentManager.DeployConfig.OperatorConfigEntry
	91,  // 18: deploymentManager.DeployConfig.storage_class_mapping:type_name -> deploymentManager.DeployConfig.StorageClassMappingEntry
	97,  // 19: deploymentManager.GetAppRcSpecRes.rc_spec:type_name -> rc_spec.RCSpec
	36,  // 20: deploymentManager.ListSolutionVersionsRes.versions:type_name -> deploymentManager.SolutionVersionMetadata
	1,   // 21: deploymentManager.SolutionVersionMetadata.download_state:type_name -> deploymentManager.AppDownloadState
	4,   // 22: deploymentManager.SolutionVersionMetadata.app_type:type_name -> deploymentManager.SolutionType
	39,  // 23: deploymentManager.ListSolutionsResponse.apps:type_name -> deploymentManager.Solution
	41,  // 24: deploymentManager.Solution.metadata:type_name -> deploymentManager.SolutionMetadata
	4,   // 25: deploymentManager.Solution.app_type:type_name -> deploymentManager.SolutionType
	40,  // 26: deploymentManager.Solution.deployments:type_name -> deploymentManager.SolutionDeployments
	45,  // 27: deploymentManager.GetDeploymentEventsResponse.data:type_name -> deploymentManager.DeploymentEvent
	2,   // 28: deploymentManager.DeploymentEvent.event_triggered_by_action:type_name -> deploymentManager.EventTriggeredByAction
	8,   // 29: deploymentManager.DeploymentEvent.level:type_name -> deploymentManager.DeploymentEventLevel
	97,  // 30: deploymentManager.GetDeploymentConfigResponse.rc_spec:type_name -> rc_spec.RCSpec
	92,  // 31: deploymentManager.GetDeploymentConfigResponse.platform_variables:type_name -> deploymentManager.GetDeploymentConfigResponse.PlatformVariablesEntry
	52,  // 32: deploymentManager.GetDeploymentResponse.data:type_name -> deploymentManager.DeploymentInfo
	52,  // 33: deploymentManager.ListDeploymentsResponse.data:type_name -> deploymentManager.DeploymentInfo
	98,  // 34: deploymentManager.DeploymentInfo.status:type_name -> deploy_app.DeploymentStatus
	4,   // 35: deploymentManager.DeploymentInfo.app_type:type_name -> deploymentManager.SolutionType
	53,  // 36: deploymentManager.DeploymentInfo.last_upgrade_metadata:type_name -> deploymentManager.LastUpgradeOperationMetadata
	3,   // 37: deploymentManager.LastUpgradeOperationMetadata.upgrade_operation_type:type_name -> deploymentManager.UpgradeOperationType
	10,  // 38: deploymentManager.LastUpgradeOperationMetadata.Step:type_name -> deploymentManager.UpdateStep
	67,  // 39: deploymentManager.VendorSolution.versions:type_name -> deploymentManager.SolutionVersion
	57,  // 40: deploymentManager.ListBackupResponse.BackupObject:type_name -> deploymentManager.BackupObject
	30,  // 41: deploymentManager.UpdateDeploymentConfigurationReq.config:type_name -> deploymentManager.DeployConfig
	96,  // 42: deploymentManager.ClusterQosIndicator.available_resources:type_name -> resource.Resources
	99,  // 43: deploymentManager.ClusterQosIndicator.qos_indicator:type_name -> resource.DeploymentQosIndicator
	96,  // 44: deploymentManager.ListQosIndicatorRes.app_resource_requirement:type_name -> resource.Resources
	64,  // 45: deploymentManager.ListQosIndicatorRes.cluster_qos_indicator:type_name -> deploymentManager.ClusterQosIndicator
	96,  // 46: deploymentManager.GetQosIndicatorRes.app_resource_requirement:type_name -> resource.Resources
	64,  // 47: deploymentManager.GetQosIndicatorRes.cluster_qos_indicator:type_name -> deploymentManager.ClusterQosIndicator
	1,   // 48: deploymentManager.SolutionVersion.state:type_name -> deploymentManager.AppDownloadState
	69,  // 49: deploymentManager.GetCompatibleVersionsResponse.compatible_versions:type_name -> deploymentManager.VendorAppVersion
	93,  // 50: deploymentManager.DeployCustomAppRequest.values:type_name -> deploymentManager.DeployCustomAppRequest.ValuesEntry
	9,   // 51: deploymentManager.ManagedServiceDownloadDetails.status:type_name -> deploymentManager.ManagedServiceDownloadStatus
	94,  // 52: deploymentManager.AppResourceRequirements.managed_services_resources:type_name -> deploymentManager.AppResourceRequirements.ManagedServicesResourcesEntry
	96,  // 53: deploymentManager.AppResourceRequirements.app_resource:type_name -> resource.Resources
	81,  // 54: deploymentManager.Metadata.maintainers:type_name -> deploymentManager.Maintainer
	95,  // 55: deploymentManager.Metadata.annotations:type_name -> deploymentManager.Metadata.AnnotationsEntry
	11,  // 56: deploymentManager.DeploymentKongEvent.operation:type_name -> deploymentManager.DeploymentKongEventOperation
	78,  // 57: deploymentManager.AppMetadata.ManagedServicesStatusEntry.value:type_name -> deploymentManager.ManagedServiceDownloadDetails
	29,  // 58: deploymentManager.DeployConfig.OperatorConfigEntry.value:type_name -> deploymentManager.Config
	96,  // 59: deploymentManager.AppResourceRequirements.ManagedServicesResourcesEntry.value:type_name -> resource.Resources
	50,  // 60: deploymentManager.DeploymentManager.ListDeployments:input_type -> deploymentManager.ListDeploymentsRequest
	71,  // 61: deploymentManager.DeploymentManager.DeployCustomApp:input_type -> deploymentManager.DeployCustomAppRequest
	72,  // 62: deploymentManager.DeploymentManager.RemoveCustomApp:input_type -> deploymentManager.RemoveCustomAppRequest
	48,  // 63: deploymentManager.DeploymentManager.GetDeployment:input_type -> deploymentManager.GetDeploymentRequest
	46,  // 64: deploymentManager.DeploymentManager.GetDeploymentConfig:input_type -> deploymentManager.GetDeploymentConfigRequest
	43,  // 65: deploymentManager.DeploymentManager.GetDeploymentEvents:input_type -> deploymentManager.GetDeploymentEventsRequest
	37,  // 66: deploymentManager.DeploymentManager.ListSolutions:input_type -> deploymentManager.ListSolutionsRequest
	18,  // 67: deploymentManager.DeploymentManager.GetSolution:input_type -> deploymentManager.GetSolutionRequest
	34,  // 68: deploymentManager.DeploymentManager.ListSolutionVersions:input_type -> deploymentManager.ListSolutionVersionsReq
	32,  // 69: deploymentManager.DeploymentManager.GetAppRcSpec:input_type -> deploymentManager.GetAppRcSpecReq
	42,  // 70: deploymentManager.DeploymentManager.GetAppPvcs:input_type -> deploymentManager.GetAppPvcsRequest
	15,  // 71: deploymentManager.DeploymentManager.GetAppMetadata:input_type -> deploymentManager.GetAppMetadataReq
	28,  // 72: deploymentManager.DeploymentManager.DeployApp:input_type -> deploymentManager.DeployAppRequest
	24,  // 73: deploymentManager.DeploymentManager.DownloadRelease:input_type -> deploymentManager.DownloadReleaseReq
	74,  // 74: deploymentManager.DeploymentManager.RemoveDeployment:input_type -> deploymentManager.RemoveDeploymentRequest
	76,  // 75: deploymentManager.DeploymentManager.IsDeploymentExist:input_type -> deploymentManager.IsDeploymentExistRequest
	68,  // 76: deploymentManager.DeploymentManager.GetCompatibleVersions:input_type -> deploymentManager.GetCompatibleVersionsRequest
	62,  // 77: deploymentManager.DeploymentManager.GetQosIndicator:input_type -> deploymentManager.GetQosIndicatorReq
	63,  // 78: deploymentManager.DeploymentManager.ListQosIndicator:input_type -> deploymentManager.ListQosIndicatorReq
	60,  // 79: deploymentManager.DeploymentManager.UpdateDeploymentConfiguration:input_type -> deploymentManager.UpdateDeploymentConfigurationReq
	55,  // 80: deploymentManager.DeploymentManager.ListBackup:input_type -> deploymentManager.ListBackupRequest
	58,  // 81: deploymentManager.DeploymentManager.DeleteBackup:input_type -> deploymentManager.DeleteBackupRequest
	23,  // 82: deploymentManager.DeploymentManager.UpgradeApp:input_type -> deploymentManager.UpgradeAppRequest
	20,  // 83: deploymentManager.DeploymentManager.ListDeploymentsWithFilter:input_type -> deploymentManager.ListDeploymentsWithFilterReq
	13,  // 84: deploymentManager.DeploymentManager.MoveCluster:input_type -> deploymentManager.MoveClusterReq
	51,  // 85: deploymentManager.DeploymentManager.ListDeployments:output_type -> deploymentManager.ListDeploymentsResponse
	84,  // 86: deploymentManager.DeploymentManager.DeployCustomApp:output_type -> deploymentManager.ActionResponse
	84,  // 87: deploymentManager.DeploymentManager.RemoveCustomApp:output_type -> deploymentManager.ActionResponse
	49,  // 88: deploymentManager.DeploymentManager.GetDeployment:output_type -> deploymentManager.GetDeploymentResponse
	47,  // 89: deploymentManager.DeploymentManager.GetDeploymentConfig:output_type -> deploymentManager.GetDeploymentConfigResponse
	44,  // 90: deploymentManager.DeploymentManager.GetDeploymentEvents:output_type -> deploymentManager.GetDeploymentEventsResponse
	38,  // 91: deploymentManager.DeploymentManager.ListSolutions:output_type -> deploymentManager.ListSolutionsResponse
	19,  // 92: deploymentManager.DeploymentManager.GetSolution:output_type -> deploymentManager.GetSolutionResponse
	35,  // 93: deploymentManager.DeploymentManager.ListSolutionVersions:output_type -> deploymentManager.ListSolutionVersionsRes
	33,  // 94: deploymentManager.DeploymentManager.GetAppRcSpec:output_type -> deploymentManager.GetAppRcSpecRes
	100, // 95: deploymentManager.DeploymentManager.GetAppPvcs:output_type -> app.AppPVCs
	16,  // 96: deploymentManager.DeploymentManager.GetAppMetadata:output_type -> deploymentManager.GetAppMetadataRes
	31,  // 97: deploymentManager.DeploymentManager.DeployApp:output_type -> deploymentManager.DeployAppResponse
	25,  // 98: deploymentManager.DeploymentManager.DownloadRelease:output_type -> deploymentManager.DownloadReleaseRes
	75,  // 99: deploymentManager.DeploymentManager.RemoveDeployment:output_type -> deploymentManager.RemoveDeploymentResponse
	77,  // 100: deploymentManager.DeploymentManager.IsDeploymentExist:output_type -> deploymentManager.IsDeploymentExistResponse
	70,  // 101: deploymentManager.DeploymentManager.GetCompatibleVersions:output_type -> deploymentManager.GetCompatibleVersionsResponse
	66,  // 102: deploymentManager.DeploymentManager.GetQosIndicator:output_type -> deploymentManager.GetQosIndicatorRes
	65,  // 103: deploymentManager.DeploymentManager.ListQosIndicator:output_type -> deploymentManager.ListQosIndicatorRes
	61,  // 104: deploymentManager.DeploymentManager.UpdateDeploymentConfiguration:output_type -> deploymentManager.UpdateDeploymentConfigurationRes
	56,  // 105: deploymentManager.DeploymentManager.ListBackup:output_type -> deploymentManager.ListBackupResponse
	59,  // 106: deploymentManager.DeploymentManager.DeleteBackup:output_type -> deploymentManager.DeleteBackupResponse
	22,  // 107: deploymentManager.DeploymentManager.UpgradeApp:output_type -> deploymentManager.UpgradeAppResponse
	21,  // 108: deploymentManager.DeploymentManager.ListDeploymentsWithFilter:output_type -> deploymentManager.ListDeploymentsWithFilterRes
	14,  // 109: deploymentManager.DeploymentManager.MoveCluster:output_type -> deploymentManager.MoveClusterRes
	85,  // [85:110] is the sub-list for method output_type
	60,  // [60:85] is the sub-list for method input_type
	60,  // [60:60] is the sub-list for extension type_name
	60,  // [60:60] is the sub-list for extension extendee
	0,   // [0:60] is the sub-list for field type_name
}

func init() { file_proto_deployment_manager_proto_init() }
func file_proto_deployment_manager_proto_init() {
	if File_proto_deployment_manager_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_deployment_manager_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoveClusterReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_deployment_manager_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoveClusterRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_deployment_manager_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppMetadataReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_deployment_manager_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppMetadataRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_deployment_manager_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_deployment_manager_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSolutionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_deployment_manager_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSolutionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_deployment_manager_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDeploymentsWithFilterReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_deployment_manager_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDeploymentsWithFilterRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_deployment_manager_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpgradeAppResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_deployment_manager_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpgradeAppRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_deployment_manager_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadReleaseReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_deployment_manager_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadReleaseRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_deployment_manager_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_deployment_manager_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManagedService); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_deployment_manager_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeployAppRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_deployment_manager_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_deployment_manager_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeployConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_deployment_manager_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeployAppResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_deployment_manager_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppRcSpecReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_deployment_manager_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppRcSpecRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_deployment_manager_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSolutionVersionsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_deployment_manager_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSolutionVersionsRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_deployment_manager_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolutionVersionMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_deployment_manager_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSolutionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_deployment_manager_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSolutionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_deployment_manager_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Solution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_deployment_manager_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolutionDeployments); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_deployment_manager_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolutionMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_deployment_manager_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppPvcsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_deployment_manager_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeploymentEventsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_deployment_manager_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeploymentEventsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_deployment_manager_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeploymentEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_deployment_manager_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeploymentConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_deployment_manager_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeploymentConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_deployment_manager_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeploymentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_deployment_manager_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeploymentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_deployment_manager_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDeploymentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_deployment_manager_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDeploymentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_deployment_manager_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeploymentInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_deployment_manager_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LastUpgradeOperationMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_deployment_manager_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VendorSolution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_deployment_manager_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBackupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_deployment_manager_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBackupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_deployment_manager_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackupObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_deployment_manager_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBackupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_deployment_manager_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBackupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_deployment_manager_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDeploymentConfigurationReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_deployment_manager_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDeploymentConfigurationRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_deployment_manager_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetQosIndicatorReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_deployment_manager_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListQosIndicatorReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_deployment_manager_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterQosIndicator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_deployment_manager_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListQosIndicatorRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_deployment_manager_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetQosIndicatorRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_deployment_manager_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolutionVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_deployment_manager_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCompatibleVersionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_deployment_manager_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VendorAppVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_deployment_manager_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCompatibleVersionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_deployment_manager_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeployCustomAppRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_deployment_manager_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveCustomAppRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_deployment_manager_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Meta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_deployment_manager_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveDeploymentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_deployment_manager_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveDeploymentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_deployment_manager_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsDeploymentExistRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_deployment_manager_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsDeploymentExistResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_deployment_manager_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManagedServiceDownloadDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_deployment_manager_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppResourceRequirements); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_deployment_manager_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_deployment_manager_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Maintainer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_deployment_manager_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoveClusterMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_deployment_manager_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeploymentKongEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_deployment_manager_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_deployment_manager_proto_rawDesc,
			NumEnums:      13,
			NumMessages:   83,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_deployment_manager_proto_goTypes,
		DependencyIndexes: file_proto_deployment_manager_proto_depIdxs,
		EnumInfos:         file_proto_deployment_manager_proto_enumTypes,
		MessageInfos:      file_proto_deployment_manager_proto_msgTypes,
	}.Build()
	File_proto_deployment_manager_proto = out.File
	file_proto_deployment_manager_proto_rawDesc = nil
	file_proto_deployment_manager_proto_goTypes = nil
	file_proto_deployment_manager_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DeploymentManagerClient is the client API for DeploymentManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DeploymentManagerClient interface {
	ListDeployments(ctx context.Context, in *ListDeploymentsRequest, opts ...grpc.CallOption) (*ListDeploymentsResponse, error)
	// Custom app
	DeployCustomApp(ctx context.Context, in *DeployCustomAppRequest, opts ...grpc.CallOption) (*ActionResponse, error)
	RemoveCustomApp(ctx context.Context, in *RemoveCustomAppRequest, opts ...grpc.CallOption) (*ActionResponse, error)
	GetDeployment(ctx context.Context, in *GetDeploymentRequest, opts ...grpc.CallOption) (*GetDeploymentResponse, error)
	GetDeploymentConfig(ctx context.Context, in *GetDeploymentConfigRequest, opts ...grpc.CallOption) (*GetDeploymentConfigResponse, error)
	GetDeploymentEvents(ctx context.Context, in *GetDeploymentEventsRequest, opts ...grpc.CallOption) (*GetDeploymentEventsResponse, error)
	ListSolutions(ctx context.Context, in *ListSolutionsRequest, opts ...grpc.CallOption) (*ListSolutionsResponse, error)
	GetSolution(ctx context.Context, in *GetSolutionRequest, opts ...grpc.CallOption) (*GetSolutionResponse, error)
	ListSolutionVersions(ctx context.Context, in *ListSolutionVersionsReq, opts ...grpc.CallOption) (*ListSolutionVersionsRes, error)
	GetAppRcSpec(ctx context.Context, in *GetAppRcSpecReq, opts ...grpc.CallOption) (*GetAppRcSpecRes, error)
	GetAppPvcs(ctx context.Context, in *GetAppPvcsRequest, opts ...grpc.CallOption) (*app.AppPVCs, error)
	GetAppMetadata(ctx context.Context, in *GetAppMetadataReq, opts ...grpc.CallOption) (*GetAppMetadataRes, error)
	DeployApp(ctx context.Context, in *DeployAppRequest, opts ...grpc.CallOption) (*DeployAppResponse, error)
	DownloadRelease(ctx context.Context, in *DownloadReleaseReq, opts ...grpc.CallOption) (*DownloadReleaseRes, error)
	RemoveDeployment(ctx context.Context, in *RemoveDeploymentRequest, opts ...grpc.CallOption) (*RemoveDeploymentResponse, error)
	IsDeploymentExist(ctx context.Context, in *IsDeploymentExistRequest, opts ...grpc.CallOption) (*IsDeploymentExistResponse, error)
	GetCompatibleVersions(ctx context.Context, in *GetCompatibleVersionsRequest, opts ...grpc.CallOption) (*GetCompatibleVersionsResponse, error)
	GetQosIndicator(ctx context.Context, in *GetQosIndicatorReq, opts ...grpc.CallOption) (*GetQosIndicatorRes, error)
	ListQosIndicator(ctx context.Context, in *ListQosIndicatorReq, opts ...grpc.CallOption) (*ListQosIndicatorRes, error)
	UpdateDeploymentConfiguration(ctx context.Context, in *UpdateDeploymentConfigurationReq, opts ...grpc.CallOption) (*UpdateDeploymentConfigurationRes, error)
	ListBackup(ctx context.Context, in *ListBackupRequest, opts ...grpc.CallOption) (*ListBackupResponse, error)
	DeleteBackup(ctx context.Context, in *DeleteBackupRequest, opts ...grpc.CallOption) (*DeleteBackupResponse, error)
	UpgradeApp(ctx context.Context, in *UpgradeAppRequest, opts ...grpc.CallOption) (*UpgradeAppResponse, error)
	ListDeploymentsWithFilter(ctx context.Context, in *ListDeploymentsWithFilterReq, opts ...grpc.CallOption) (*ListDeploymentsWithFilterRes, error)
	MoveCluster(ctx context.Context, in *MoveClusterReq, opts ...grpc.CallOption) (*MoveClusterRes, error)
}

type deploymentManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewDeploymentManagerClient(cc grpc.ClientConnInterface) DeploymentManagerClient {
	return &deploymentManagerClient{cc}
}

func (c *deploymentManagerClient) ListDeployments(ctx context.Context, in *ListDeploymentsRequest, opts ...grpc.CallOption) (*ListDeploymentsResponse, error) {
	out := new(ListDeploymentsResponse)
	err := c.cc.Invoke(ctx, "/deploymentManager.DeploymentManager/ListDeployments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentManagerClient) DeployCustomApp(ctx context.Context, in *DeployCustomAppRequest, opts ...grpc.CallOption) (*ActionResponse, error) {
	out := new(ActionResponse)
	err := c.cc.Invoke(ctx, "/deploymentManager.DeploymentManager/DeployCustomApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentManagerClient) RemoveCustomApp(ctx context.Context, in *RemoveCustomAppRequest, opts ...grpc.CallOption) (*ActionResponse, error) {
	out := new(ActionResponse)
	err := c.cc.Invoke(ctx, "/deploymentManager.DeploymentManager/RemoveCustomApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentManagerClient) GetDeployment(ctx context.Context, in *GetDeploymentRequest, opts ...grpc.CallOption) (*GetDeploymentResponse, error) {
	out := new(GetDeploymentResponse)
	err := c.cc.Invoke(ctx, "/deploymentManager.DeploymentManager/GetDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentManagerClient) GetDeploymentConfig(ctx context.Context, in *GetDeploymentConfigRequest, opts ...grpc.CallOption) (*GetDeploymentConfigResponse, error) {
	out := new(GetDeploymentConfigResponse)
	err := c.cc.Invoke(ctx, "/deploymentManager.DeploymentManager/GetDeploymentConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentManagerClient) GetDeploymentEvents(ctx context.Context, in *GetDeploymentEventsRequest, opts ...grpc.CallOption) (*GetDeploymentEventsResponse, error) {
	out := new(GetDeploymentEventsResponse)
	err := c.cc.Invoke(ctx, "/deploymentManager.DeploymentManager/GetDeploymentEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentManagerClient) ListSolutions(ctx context.Context, in *ListSolutionsRequest, opts ...grpc.CallOption) (*ListSolutionsResponse, error) {
	out := new(ListSolutionsResponse)
	err := c.cc.Invoke(ctx, "/deploymentManager.DeploymentManager/ListSolutions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentManagerClient) GetSolution(ctx context.Context, in *GetSolutionRequest, opts ...grpc.CallOption) (*GetSolutionResponse, error) {
	out := new(GetSolutionResponse)
	err := c.cc.Invoke(ctx, "/deploymentManager.DeploymentManager/GetSolution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentManagerClient) ListSolutionVersions(ctx context.Context, in *ListSolutionVersionsReq, opts ...grpc.CallOption) (*ListSolutionVersionsRes, error) {
	out := new(ListSolutionVersionsRes)
	err := c.cc.Invoke(ctx, "/deploymentManager.DeploymentManager/ListSolutionVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentManagerClient) GetAppRcSpec(ctx context.Context, in *GetAppRcSpecReq, opts ...grpc.CallOption) (*GetAppRcSpecRes, error) {
	out := new(GetAppRcSpecRes)
	err := c.cc.Invoke(ctx, "/deploymentManager.DeploymentManager/GetAppRcSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentManagerClient) GetAppPvcs(ctx context.Context, in *GetAppPvcsRequest, opts ...grpc.CallOption) (*app.AppPVCs, error) {
	out := new(app.AppPVCs)
	err := c.cc.Invoke(ctx, "/deploymentManager.DeploymentManager/GetAppPvcs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentManagerClient) GetAppMetadata(ctx context.Context, in *GetAppMetadataReq, opts ...grpc.CallOption) (*GetAppMetadataRes, error) {
	out := new(GetAppMetadataRes)
	err := c.cc.Invoke(ctx, "/deploymentManager.DeploymentManager/GetAppMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentManagerClient) DeployApp(ctx context.Context, in *DeployAppRequest, opts ...grpc.CallOption) (*DeployAppResponse, error) {
	out := new(DeployAppResponse)
	err := c.cc.Invoke(ctx, "/deploymentManager.DeploymentManager/DeployApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentManagerClient) DownloadRelease(ctx context.Context, in *DownloadReleaseReq, opts ...grpc.CallOption) (*DownloadReleaseRes, error) {
	out := new(DownloadReleaseRes)
	err := c.cc.Invoke(ctx, "/deploymentManager.DeploymentManager/DownloadRelease", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentManagerClient) RemoveDeployment(ctx context.Context, in *RemoveDeploymentRequest, opts ...grpc.CallOption) (*RemoveDeploymentResponse, error) {
	out := new(RemoveDeploymentResponse)
	err := c.cc.Invoke(ctx, "/deploymentManager.DeploymentManager/RemoveDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentManagerClient) IsDeploymentExist(ctx context.Context, in *IsDeploymentExistRequest, opts ...grpc.CallOption) (*IsDeploymentExistResponse, error) {
	out := new(IsDeploymentExistResponse)
	err := c.cc.Invoke(ctx, "/deploymentManager.DeploymentManager/IsDeploymentExist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentManagerClient) GetCompatibleVersions(ctx context.Context, in *GetCompatibleVersionsRequest, opts ...grpc.CallOption) (*GetCompatibleVersionsResponse, error) {
	out := new(GetCompatibleVersionsResponse)
	err := c.cc.Invoke(ctx, "/deploymentManager.DeploymentManager/GetCompatibleVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentManagerClient) GetQosIndicator(ctx context.Context, in *GetQosIndicatorReq, opts ...grpc.CallOption) (*GetQosIndicatorRes, error) {
	out := new(GetQosIndicatorRes)
	err := c.cc.Invoke(ctx, "/deploymentManager.DeploymentManager/GetQosIndicator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentManagerClient) ListQosIndicator(ctx context.Context, in *ListQosIndicatorReq, opts ...grpc.CallOption) (*ListQosIndicatorRes, error) {
	out := new(ListQosIndicatorRes)
	err := c.cc.Invoke(ctx, "/deploymentManager.DeploymentManager/ListQosIndicator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentManagerClient) UpdateDeploymentConfiguration(ctx context.Context, in *UpdateDeploymentConfigurationReq, opts ...grpc.CallOption) (*UpdateDeploymentConfigurationRes, error) {
	out := new(UpdateDeploymentConfigurationRes)
	err := c.cc.Invoke(ctx, "/deploymentManager.DeploymentManager/UpdateDeploymentConfiguration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentManagerClient) ListBackup(ctx context.Context, in *ListBackupRequest, opts ...grpc.CallOption) (*ListBackupResponse, error) {
	out := new(ListBackupResponse)
	err := c.cc.Invoke(ctx, "/deploymentManager.DeploymentManager/ListBackup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentManagerClient) DeleteBackup(ctx context.Context, in *DeleteBackupRequest, opts ...grpc.CallOption) (*DeleteBackupResponse, error) {
	out := new(DeleteBackupResponse)
	err := c.cc.Invoke(ctx, "/deploymentManager.DeploymentManager/DeleteBackup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentManagerClient) UpgradeApp(ctx context.Context, in *UpgradeAppRequest, opts ...grpc.CallOption) (*UpgradeAppResponse, error) {
	out := new(UpgradeAppResponse)
	err := c.cc.Invoke(ctx, "/deploymentManager.DeploymentManager/UpgradeApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentManagerClient) ListDeploymentsWithFilter(ctx context.Context, in *ListDeploymentsWithFilterReq, opts ...grpc.CallOption) (*ListDeploymentsWithFilterRes, error) {
	out := new(ListDeploymentsWithFilterRes)
	err := c.cc.Invoke(ctx, "/deploymentManager.DeploymentManager/ListDeploymentsWithFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentManagerClient) MoveCluster(ctx context.Context, in *MoveClusterReq, opts ...grpc.CallOption) (*MoveClusterRes, error) {
	out := new(MoveClusterRes)
	err := c.cc.Invoke(ctx, "/deploymentManager.DeploymentManager/MoveCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeploymentManagerServer is the server API for DeploymentManager service.
type DeploymentManagerServer interface {
	ListDeployments(context.Context, *ListDeploymentsRequest) (*ListDeploymentsResponse, error)
	// Custom app
	DeployCustomApp(context.Context, *DeployCustomAppRequest) (*ActionResponse, error)
	RemoveCustomApp(context.Context, *RemoveCustomAppRequest) (*ActionResponse, error)
	GetDeployment(context.Context, *GetDeploymentRequest) (*GetDeploymentResponse, error)
	GetDeploymentConfig(context.Context, *GetDeploymentConfigRequest) (*GetDeploymentConfigResponse, error)
	GetDeploymentEvents(context.Context, *GetDeploymentEventsRequest) (*GetDeploymentEventsResponse, error)
	ListSolutions(context.Context, *ListSolutionsRequest) (*ListSolutionsResponse, error)
	GetSolution(context.Context, *GetSolutionRequest) (*GetSolutionResponse, error)
	ListSolutionVersions(context.Context, *ListSolutionVersionsReq) (*ListSolutionVersionsRes, error)
	GetAppRcSpec(context.Context, *GetAppRcSpecReq) (*GetAppRcSpecRes, error)
	GetAppPvcs(context.Context, *GetAppPvcsRequest) (*app.AppPVCs, error)
	GetAppMetadata(context.Context, *GetAppMetadataReq) (*GetAppMetadataRes, error)
	DeployApp(context.Context, *DeployAppRequest) (*DeployAppResponse, error)
	DownloadRelease(context.Context, *DownloadReleaseReq) (*DownloadReleaseRes, error)
	RemoveDeployment(context.Context, *RemoveDeploymentRequest) (*RemoveDeploymentResponse, error)
	IsDeploymentExist(context.Context, *IsDeploymentExistRequest) (*IsDeploymentExistResponse, error)
	GetCompatibleVersions(context.Context, *GetCompatibleVersionsRequest) (*GetCompatibleVersionsResponse, error)
	GetQosIndicator(context.Context, *GetQosIndicatorReq) (*GetQosIndicatorRes, error)
	ListQosIndicator(context.Context, *ListQosIndicatorReq) (*ListQosIndicatorRes, error)
	UpdateDeploymentConfiguration(context.Context, *UpdateDeploymentConfigurationReq) (*UpdateDeploymentConfigurationRes, error)
	ListBackup(context.Context, *ListBackupRequest) (*ListBackupResponse, error)
	DeleteBackup(context.Context, *DeleteBackupRequest) (*DeleteBackupResponse, error)
	UpgradeApp(context.Context, *UpgradeAppRequest) (*UpgradeAppResponse, error)
	ListDeploymentsWithFilter(context.Context, *ListDeploymentsWithFilterReq) (*ListDeploymentsWithFilterRes, error)
	MoveCluster(context.Context, *MoveClusterReq) (*MoveClusterRes, error)
}

// UnimplementedDeploymentManagerServer can be embedded to have forward compatible implementations.
type UnimplementedDeploymentManagerServer struct {
}

func (*UnimplementedDeploymentManagerServer) ListDeployments(context.Context, *ListDeploymentsRequest) (*ListDeploymentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDeployments not implemented")
}
func (*UnimplementedDeploymentManagerServer) DeployCustomApp(context.Context, *DeployCustomAppRequest) (*ActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeployCustomApp not implemented")
}
func (*UnimplementedDeploymentManagerServer) RemoveCustomApp(context.Context, *RemoveCustomAppRequest) (*ActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveCustomApp not implemented")
}
func (*UnimplementedDeploymentManagerServer) GetDeployment(context.Context, *GetDeploymentRequest) (*GetDeploymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeployment not implemented")
}
func (*UnimplementedDeploymentManagerServer) GetDeploymentConfig(context.Context, *GetDeploymentConfigRequest) (*GetDeploymentConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeploymentConfig not implemented")
}
func (*UnimplementedDeploymentManagerServer) GetDeploymentEvents(context.Context, *GetDeploymentEventsRequest) (*GetDeploymentEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeploymentEvents not implemented")
}
func (*UnimplementedDeploymentManagerServer) ListSolutions(context.Context, *ListSolutionsRequest) (*ListSolutionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSolutions not implemented")
}
func (*UnimplementedDeploymentManagerServer) GetSolution(context.Context, *GetSolutionRequest) (*GetSolutionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSolution not implemented")
}
func (*UnimplementedDeploymentManagerServer) ListSolutionVersions(context.Context, *ListSolutionVersionsReq) (*ListSolutionVersionsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSolutionVersions not implemented")
}
func (*UnimplementedDeploymentManagerServer) GetAppRcSpec(context.Context, *GetAppRcSpecReq) (*GetAppRcSpecRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppRcSpec not implemented")
}
func (*UnimplementedDeploymentManagerServer) GetAppPvcs(context.Context, *GetAppPvcsRequest) (*app.AppPVCs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppPvcs not implemented")
}
func (*UnimplementedDeploymentManagerServer) GetAppMetadata(context.Context, *GetAppMetadataReq) (*GetAppMetadataRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppMetadata not implemented")
}
func (*UnimplementedDeploymentManagerServer) DeployApp(context.Context, *DeployAppRequest) (*DeployAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeployApp not implemented")
}
func (*UnimplementedDeploymentManagerServer) DownloadRelease(context.Context, *DownloadReleaseReq) (*DownloadReleaseRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadRelease not implemented")
}
func (*UnimplementedDeploymentManagerServer) RemoveDeployment(context.Context, *RemoveDeploymentRequest) (*RemoveDeploymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveDeployment not implemented")
}
func (*UnimplementedDeploymentManagerServer) IsDeploymentExist(context.Context, *IsDeploymentExistRequest) (*IsDeploymentExistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsDeploymentExist not implemented")
}
func (*UnimplementedDeploymentManagerServer) GetCompatibleVersions(context.Context, *GetCompatibleVersionsRequest) (*GetCompatibleVersionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompatibleVersions not implemented")
}
func (*UnimplementedDeploymentManagerServer) GetQosIndicator(context.Context, *GetQosIndicatorReq) (*GetQosIndicatorRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQosIndicator not implemented")
}
func (*UnimplementedDeploymentManagerServer) ListQosIndicator(context.Context, *ListQosIndicatorReq) (*ListQosIndicatorRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListQosIndicator not implemented")
}
func (*UnimplementedDeploymentManagerServer) UpdateDeploymentConfiguration(context.Context, *UpdateDeploymentConfigurationReq) (*UpdateDeploymentConfigurationRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDeploymentConfiguration not implemented")
}
func (*UnimplementedDeploymentManagerServer) ListBackup(context.Context, *ListBackupRequest) (*ListBackupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBackup not implemented")
}
func (*UnimplementedDeploymentManagerServer) DeleteBackup(context.Context, *DeleteBackupRequest) (*DeleteBackupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBackup not implemented")
}
func (*UnimplementedDeploymentManagerServer) UpgradeApp(context.Context, *UpgradeAppRequest) (*UpgradeAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradeApp not implemented")
}
func (*UnimplementedDeploymentManagerServer) ListDeploymentsWithFilter(context.Context, *ListDeploymentsWithFilterReq) (*ListDeploymentsWithFilterRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDeploymentsWithFilter not implemented")
}
func (*UnimplementedDeploymentManagerServer) MoveCluster(context.Context, *MoveClusterReq) (*MoveClusterRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveCluster not implemented")
}

func RegisterDeploymentManagerServer(s *grpc.Server, srv DeploymentManagerServer) {
	s.RegisterService(&_DeploymentManager_serviceDesc, srv)
}

func _DeploymentManager_ListDeployments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDeploymentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentManagerServer).ListDeployments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploymentManager.DeploymentManager/ListDeployments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentManagerServer).ListDeployments(ctx, req.(*ListDeploymentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentManager_DeployCustomApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeployCustomAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentManagerServer).DeployCustomApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploymentManager.DeploymentManager/DeployCustomApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentManagerServer).DeployCustomApp(ctx, req.(*DeployCustomAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentManager_RemoveCustomApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveCustomAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentManagerServer).RemoveCustomApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploymentManager.DeploymentManager/RemoveCustomApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentManagerServer).RemoveCustomApp(ctx, req.(*RemoveCustomAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentManager_GetDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentManagerServer).GetDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploymentManager.DeploymentManager/GetDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentManagerServer).GetDeployment(ctx, req.(*GetDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentManager_GetDeploymentConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeploymentConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentManagerServer).GetDeploymentConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploymentManager.DeploymentManager/GetDeploymentConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentManagerServer).GetDeploymentConfig(ctx, req.(*GetDeploymentConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentManager_GetDeploymentEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeploymentEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentManagerServer).GetDeploymentEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploymentManager.DeploymentManager/GetDeploymentEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentManagerServer).GetDeploymentEvents(ctx, req.(*GetDeploymentEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentManager_ListSolutions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSolutionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentManagerServer).ListSolutions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploymentManager.DeploymentManager/ListSolutions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentManagerServer).ListSolutions(ctx, req.(*ListSolutionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentManager_GetSolution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSolutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentManagerServer).GetSolution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploymentManager.DeploymentManager/GetSolution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentManagerServer).GetSolution(ctx, req.(*GetSolutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentManager_ListSolutionVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSolutionVersionsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentManagerServer).ListSolutionVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploymentManager.DeploymentManager/ListSolutionVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentManagerServer).ListSolutionVersions(ctx, req.(*ListSolutionVersionsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentManager_GetAppRcSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppRcSpecReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentManagerServer).GetAppRcSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploymentManager.DeploymentManager/GetAppRcSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentManagerServer).GetAppRcSpec(ctx, req.(*GetAppRcSpecReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentManager_GetAppPvcs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppPvcsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentManagerServer).GetAppPvcs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploymentManager.DeploymentManager/GetAppPvcs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentManagerServer).GetAppPvcs(ctx, req.(*GetAppPvcsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentManager_GetAppMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppMetadataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentManagerServer).GetAppMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploymentManager.DeploymentManager/GetAppMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentManagerServer).GetAppMetadata(ctx, req.(*GetAppMetadataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentManager_DeployApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeployAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentManagerServer).DeployApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploymentManager.DeploymentManager/DeployApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentManagerServer).DeployApp(ctx, req.(*DeployAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentManager_DownloadRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadReleaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentManagerServer).DownloadRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploymentManager.DeploymentManager/DownloadRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentManagerServer).DownloadRelease(ctx, req.(*DownloadReleaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentManager_RemoveDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentManagerServer).RemoveDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploymentManager.DeploymentManager/RemoveDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentManagerServer).RemoveDeployment(ctx, req.(*RemoveDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentManager_IsDeploymentExist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsDeploymentExistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentManagerServer).IsDeploymentExist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploymentManager.DeploymentManager/IsDeploymentExist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentManagerServer).IsDeploymentExist(ctx, req.(*IsDeploymentExistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentManager_GetCompatibleVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCompatibleVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentManagerServer).GetCompatibleVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploymentManager.DeploymentManager/GetCompatibleVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentManagerServer).GetCompatibleVersions(ctx, req.(*GetCompatibleVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentManager_GetQosIndicator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQosIndicatorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentManagerServer).GetQosIndicator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploymentManager.DeploymentManager/GetQosIndicator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentManagerServer).GetQosIndicator(ctx, req.(*GetQosIndicatorReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentManager_ListQosIndicator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListQosIndicatorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentManagerServer).ListQosIndicator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploymentManager.DeploymentManager/ListQosIndicator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentManagerServer).ListQosIndicator(ctx, req.(*ListQosIndicatorReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentManager_UpdateDeploymentConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeploymentConfigurationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentManagerServer).UpdateDeploymentConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploymentManager.DeploymentManager/UpdateDeploymentConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentManagerServer).UpdateDeploymentConfiguration(ctx, req.(*UpdateDeploymentConfigurationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentManager_ListBackup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBackupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentManagerServer).ListBackup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploymentManager.DeploymentManager/ListBackup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentManagerServer).ListBackup(ctx, req.(*ListBackupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentManager_DeleteBackup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBackupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentManagerServer).DeleteBackup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploymentManager.DeploymentManager/DeleteBackup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentManagerServer).DeleteBackup(ctx, req.(*DeleteBackupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentManager_UpgradeApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradeAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentManagerServer).UpgradeApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploymentManager.DeploymentManager/UpgradeApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentManagerServer).UpgradeApp(ctx, req.(*UpgradeAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentManager_ListDeploymentsWithFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDeploymentsWithFilterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentManagerServer).ListDeploymentsWithFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploymentManager.DeploymentManager/ListDeploymentsWithFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentManagerServer).ListDeploymentsWithFilter(ctx, req.(*ListDeploymentsWithFilterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentManager_MoveCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveClusterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentManagerServer).MoveCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploymentManager.DeploymentManager/MoveCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentManagerServer).MoveCluster(ctx, req.(*MoveClusterReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _DeploymentManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "deploymentManager.DeploymentManager",
	HandlerType: (*DeploymentManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListDeployments",
			Handler:    _DeploymentManager_ListDeployments_Handler,
		},
		{
			MethodName: "DeployCustomApp",
			Handler:    _DeploymentManager_DeployCustomApp_Handler,
		},
		{
			MethodName: "RemoveCustomApp",
			Handler:    _DeploymentManager_RemoveCustomApp_Handler,
		},
		{
			MethodName: "GetDeployment",
			Handler:    _DeploymentManager_GetDeployment_Handler,
		},
		{
			MethodName: "GetDeploymentConfig",
			Handler:    _DeploymentManager_GetDeploymentConfig_Handler,
		},
		{
			MethodName: "GetDeploymentEvents",
			Handler:    _DeploymentManager_GetDeploymentEvents_Handler,
		},
		{
			MethodName: "ListSolutions",
			Handler:    _DeploymentManager_ListSolutions_Handler,
		},
		{
			MethodName: "GetSolution",
			Handler:    _DeploymentManager_GetSolution_Handler,
		},
		{
			MethodName: "ListSolutionVersions",
			Handler:    _DeploymentManager_ListSolutionVersions_Handler,
		},
		{
			MethodName: "GetAppRcSpec",
			Handler:    _DeploymentManager_GetAppRcSpec_Handler,
		},
		{
			MethodName: "GetAppPvcs",
			Handler:    _DeploymentManager_GetAppPvcs_Handler,
		},
		{
			MethodName: "GetAppMetadata",
			Handler:    _DeploymentManager_GetAppMetadata_Handler,
		},
		{
			MethodName: "DeployApp",
			Handler:    _DeploymentManager_DeployApp_Handler,
		},
		{
			MethodName: "DownloadRelease",
			Handler:    _DeploymentManager_DownloadRelease_Handler,
		},
		{
			MethodName: "RemoveDeployment",
			Handler:    _DeploymentManager_RemoveDeployment_Handler,
		},
		{
			MethodName: "IsDeploymentExist",
			Handler:    _DeploymentManager_IsDeploymentExist_Handler,
		},
		{
			MethodName: "GetCompatibleVersions",
			Handler:    _DeploymentManager_GetCompatibleVersions_Handler,
		},
		{
			MethodName: "GetQosIndicator",
			Handler:    _DeploymentManager_GetQosIndicator_Handler,
		},
		{
			MethodName: "ListQosIndicator",
			Handler:    _DeploymentManager_ListQosIndicator_Handler,
		},
		{
			MethodName: "UpdateDeploymentConfiguration",
			Handler:    _DeploymentManager_UpdateDeploymentConfiguration_Handler,
		},
		{
			MethodName: "ListBackup",
			Handler:    _DeploymentManager_ListBackup_Handler,
		},
		{
			MethodName: "DeleteBackup",
			Handler:    _DeploymentManager_DeleteBackup_Handler,
		},
		{
			MethodName: "UpgradeApp",
			Handler:    _DeploymentManager_UpgradeApp_Handler,
		},
		{
			MethodName: "ListDeploymentsWithFilter",
			Handler:    _DeploymentManager_ListDeploymentsWithFilter_Handler,
		},
		{
			MethodName: "MoveCluster",
			Handler:    _DeploymentManager_MoveCluster_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/deployment_manager.proto",
}
