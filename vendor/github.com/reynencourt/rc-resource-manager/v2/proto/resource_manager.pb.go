// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.12.4
// source: proto/resource_manager.proto

package resourceManager

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	cluster "github.com/reynencourt/rc-common-lib/v2/proto/cluster"
	resource "github.com/reynencourt/rc-common-lib/v2/proto/resource"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type NodeType int32

const (
	NodeType_NodeType_Unknown NodeType = 0
	NodeType_Master           NodeType = 1
	NodeType_Etcd             NodeType = 2
	NodeType_Worker           NodeType = 3
)

// Enum value maps for NodeType.
var (
	NodeType_name = map[int32]string{
		0: "NodeType_Unknown",
		1: "Master",
		2: "Etcd",
		3: "Worker",
	}
	NodeType_value = map[string]int32{
		"NodeType_Unknown": 0,
		"Master":           1,
		"Etcd":             2,
		"Worker":           3,
	}
)

func (x NodeType) Enum() *NodeType {
	p := new(NodeType)
	*p = x
	return p
}

func (x NodeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NodeType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_resource_manager_proto_enumTypes[0].Descriptor()
}

func (NodeType) Type() protoreflect.EnumType {
	return &file_proto_resource_manager_proto_enumTypes[0]
}

func (x NodeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NodeType.Descriptor instead.
func (NodeType) EnumDescriptor() ([]byte, []int) {
	return file_proto_resource_manager_proto_rawDescGZIP(), []int{0}
}

type ClusterAction int32

const (
	ClusterAction_UnknownClusterAction ClusterAction = 0
	ClusterAction_Create               ClusterAction = 1
	ClusterAction_AddNode              ClusterAction = 2
	ClusterAction_RemoveNode           ClusterAction = 3
	ClusterAction_Delete               ClusterAction = 4
	ClusterAction_Upgrade              ClusterAction = 5
)

// Enum value maps for ClusterAction.
var (
	ClusterAction_name = map[int32]string{
		0: "UnknownClusterAction",
		1: "Create",
		2: "AddNode",
		3: "RemoveNode",
		4: "Delete",
		5: "Upgrade",
	}
	ClusterAction_value = map[string]int32{
		"UnknownClusterAction": 0,
		"Create":               1,
		"AddNode":              2,
		"RemoveNode":           3,
		"Delete":               4,
		"Upgrade":              5,
	}
)

func (x ClusterAction) Enum() *ClusterAction {
	p := new(ClusterAction)
	*p = x
	return p
}

func (x ClusterAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClusterAction) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_resource_manager_proto_enumTypes[1].Descriptor()
}

func (ClusterAction) Type() protoreflect.EnumType {
	return &file_proto_resource_manager_proto_enumTypes[1]
}

func (x ClusterAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClusterAction.Descriptor instead.
func (ClusterAction) EnumDescriptor() ([]byte, []int) {
	return file_proto_resource_manager_proto_rawDescGZIP(), []int{1}
}

type ProvisionStep int32

const (
	ProvisionStep_ProvisionStep_Unknown   ProvisionStep = 0
	ProvisionStep_Init                    ProvisionStep = 1
	ProvisionStep_ANSIBLE_APPLY           ProvisionStep = 2
	ProvisionStep_COPYING_CONFIG          ProvisionStep = 3
	ProvisionStep_STEP_COMPLETED          ProvisionStep = 4
	ProvisionStep_STEP_FAILED             ProvisionStep = 5
	ProvisionStep_DELETE_CLUSTER_STARTED  ProvisionStep = 6
	ProvisionStep_DELETE_CLUSTER_FAILED   ProvisionStep = 7
	ProvisionStep_VM_REQUESTED            ProvisionStep = 8
	ProvisionStep_VM_CREATED              ProvisionStep = 9
	ProvisionStep_UPGRADE_CLUSTER_STARTED ProvisionStep = 10
	ProvisionStep_UPGRADE_CLUSTER_FAILED  ProvisionStep = 11
)

// Enum value maps for ProvisionStep.
var (
	ProvisionStep_name = map[int32]string{
		0:  "ProvisionStep_Unknown",
		1:  "Init",
		2:  "ANSIBLE_APPLY",
		3:  "COPYING_CONFIG",
		4:  "STEP_COMPLETED",
		5:  "STEP_FAILED",
		6:  "DELETE_CLUSTER_STARTED",
		7:  "DELETE_CLUSTER_FAILED",
		8:  "VM_REQUESTED",
		9:  "VM_CREATED",
		10: "UPGRADE_CLUSTER_STARTED",
		11: "UPGRADE_CLUSTER_FAILED",
	}
	ProvisionStep_value = map[string]int32{
		"ProvisionStep_Unknown":   0,
		"Init":                    1,
		"ANSIBLE_APPLY":           2,
		"COPYING_CONFIG":          3,
		"STEP_COMPLETED":          4,
		"STEP_FAILED":             5,
		"DELETE_CLUSTER_STARTED":  6,
		"DELETE_CLUSTER_FAILED":   7,
		"VM_REQUESTED":            8,
		"VM_CREATED":              9,
		"UPGRADE_CLUSTER_STARTED": 10,
		"UPGRADE_CLUSTER_FAILED":  11,
	}
)

func (x ProvisionStep) Enum() *ProvisionStep {
	p := new(ProvisionStep)
	*p = x
	return p
}

func (x ProvisionStep) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProvisionStep) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_resource_manager_proto_enumTypes[2].Descriptor()
}

func (ProvisionStep) Type() protoreflect.EnumType {
	return &file_proto_resource_manager_proto_enumTypes[2]
}

func (x ProvisionStep) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProvisionStep.Descriptor instead.
func (ProvisionStep) EnumDescriptor() ([]byte, []int) {
	return file_proto_resource_manager_proto_rawDescGZIP(), []int{2}
}

type NodeStep int32

const (
	NodeStep_NodeStep_UNKNOWN             NodeStep = 0
	NodeStep_NodeStep_ADD_NODE_STARTED    NodeStep = 1
	NodeStep_NodeStep_ADD_NODE_FAILED     NodeStep = 3
	NodeStep_NodeStep_REMOVE_NODE_STARTED NodeStep = 4
	NodeStep_NodeStep_REMOVE_NODE_FAILED  NodeStep = 6
	NodeStep_NodeStep_READY               NodeStep = 7
	NodeStep_NodeStep_INITIALIZED         NodeStep = 8
	NodeStep_NodeStep_UNREADY             NodeStep = 9
	NodeStep_NodeStep_UNAVAILABLE         NodeStep = 10
	NodeStep_NodeStep_NETWORK_UNAVAILABLE NodeStep = 11
	NodeStep_NodeStep_FAILED_TO_ACQUIRE   NodeStep = 12
	NodeStep_NodeStep_ACQUIRED            NodeStep = 13
)

// Enum value maps for NodeStep.
var (
	NodeStep_name = map[int32]string{
		0:  "NodeStep_UNKNOWN",
		1:  "NodeStep_ADD_NODE_STARTED",
		3:  "NodeStep_ADD_NODE_FAILED",
		4:  "NodeStep_REMOVE_NODE_STARTED",
		6:  "NodeStep_REMOVE_NODE_FAILED",
		7:  "NodeStep_READY",
		8:  "NodeStep_INITIALIZED",
		9:  "NodeStep_UNREADY",
		10: "NodeStep_UNAVAILABLE",
		11: "NodeStep_NETWORK_UNAVAILABLE",
		12: "NodeStep_FAILED_TO_ACQUIRE",
		13: "NodeStep_ACQUIRED",
	}
	NodeStep_value = map[string]int32{
		"NodeStep_UNKNOWN":             0,
		"NodeStep_ADD_NODE_STARTED":    1,
		"NodeStep_ADD_NODE_FAILED":     3,
		"NodeStep_REMOVE_NODE_STARTED": 4,
		"NodeStep_REMOVE_NODE_FAILED":  6,
		"NodeStep_READY":               7,
		"NodeStep_INITIALIZED":         8,
		"NodeStep_UNREADY":             9,
		"NodeStep_UNAVAILABLE":         10,
		"NodeStep_NETWORK_UNAVAILABLE": 11,
		"NodeStep_FAILED_TO_ACQUIRE":   12,
		"NodeStep_ACQUIRED":            13,
	}
)

func (x NodeStep) Enum() *NodeStep {
	p := new(NodeStep)
	*p = x
	return p
}

func (x NodeStep) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NodeStep) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_resource_manager_proto_enumTypes[3].Descriptor()
}

func (NodeStep) Type() protoreflect.EnumType {
	return &file_proto_resource_manager_proto_enumTypes[3]
}

func (x NodeStep) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NodeStep.Descriptor instead.
func (NodeStep) EnumDescriptor() ([]byte, []int) {
	return file_proto_resource_manager_proto_rawDescGZIP(), []int{3}
}

type ClusterStatus int32

const (
	ClusterStatus_ClusterStatus_Unknown   ClusterStatus = 0
	ClusterStatus_Initialising            ClusterStatus = 1
	ClusterStatus_CreateClusterInProgress ClusterStatus = 2
	ClusterStatus_Success                 ClusterStatus = 3
	ClusterStatus_CreateClusterFailed     ClusterStatus = 4
	ClusterStatus_DeleteClusterFailed     ClusterStatus = 5
	ClusterStatus_DeleteClusterInProgress ClusterStatus = 6
	ClusterStatus_NodeDeletionInProgress  ClusterStatus = 7
	ClusterStatus_NodeAdditionInProgress  ClusterStatus = 8
)

// Enum value maps for ClusterStatus.
var (
	ClusterStatus_name = map[int32]string{
		0: "ClusterStatus_Unknown",
		1: "Initialising",
		2: "CreateClusterInProgress",
		3: "Success",
		4: "CreateClusterFailed",
		5: "DeleteClusterFailed",
		6: "DeleteClusterInProgress",
		7: "NodeDeletionInProgress",
		8: "NodeAdditionInProgress",
	}
	ClusterStatus_value = map[string]int32{
		"ClusterStatus_Unknown":   0,
		"Initialising":            1,
		"CreateClusterInProgress": 2,
		"Success":                 3,
		"CreateClusterFailed":     4,
		"DeleteClusterFailed":     5,
		"DeleteClusterInProgress": 6,
		"NodeDeletionInProgress":  7,
		"NodeAdditionInProgress":  8,
	}
)

func (x ClusterStatus) Enum() *ClusterStatus {
	p := new(ClusterStatus)
	*p = x
	return p
}

func (x ClusterStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClusterStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_resource_manager_proto_enumTypes[4].Descriptor()
}

func (ClusterStatus) Type() protoreflect.EnumType {
	return &file_proto_resource_manager_proto_enumTypes[4]
}

func (x ClusterStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClusterStatus.Descriptor instead.
func (ClusterStatus) EnumDescriptor() ([]byte, []int) {
	return file_proto_resource_manager_proto_rawDescGZIP(), []int{4}
}

type NodeStatus int32

const (
	NodeStatus_NodeStatus_Unknown     NodeStatus = 0
	NodeStatus_NodeStatusInitialising NodeStatus = 1
	NodeStatus_Ready                  NodeStatus = 3
	NodeStatus_NodeStatusFailed       NodeStatus = 4
	NodeStatus_NodeStatusNotReady     NodeStatus = 5
	NodeStatus_AddNodeInProgress      NodeStatus = 6
	NodeStatus_AddNodeFailed          NodeStatus = 7
	NodeStatus_DeleteNodeInProgress   NodeStatus = 8
	NodeStatus_DeleteNodeFailed       NodeStatus = 9
	NodeStatus_NetworkUnavailable     NodeStatus = 10
)

// Enum value maps for NodeStatus.
var (
	NodeStatus_name = map[int32]string{
		0:  "NodeStatus_Unknown",
		1:  "NodeStatusInitialising",
		3:  "Ready",
		4:  "NodeStatusFailed",
		5:  "NodeStatusNotReady",
		6:  "AddNodeInProgress",
		7:  "AddNodeFailed",
		8:  "DeleteNodeInProgress",
		9:  "DeleteNodeFailed",
		10: "NetworkUnavailable",
	}
	NodeStatus_value = map[string]int32{
		"NodeStatus_Unknown":     0,
		"NodeStatusInitialising": 1,
		"Ready":                  3,
		"NodeStatusFailed":       4,
		"NodeStatusNotReady":     5,
		"AddNodeInProgress":      6,
		"AddNodeFailed":          7,
		"DeleteNodeInProgress":   8,
		"DeleteNodeFailed":       9,
		"NetworkUnavailable":     10,
	}
)

func (x NodeStatus) Enum() *NodeStatus {
	p := new(NodeStatus)
	*p = x
	return p
}

func (x NodeStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NodeStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_resource_manager_proto_enumTypes[5].Descriptor()
}

func (NodeStatus) Type() protoreflect.EnumType {
	return &file_proto_resource_manager_proto_enumTypes[5]
}

func (x NodeStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NodeStatus.Descriptor instead.
func (NodeStatus) EnumDescriptor() ([]byte, []int) {
	return file_proto_resource_manager_proto_rawDescGZIP(), []int{5}
}

type KongOperationType int32

const (
	KongOperationType_KongOperationTypeUnknown KongOperationType = 0
	KongOperationType_KongOperationTypeCreate  KongOperationType = 1
	KongOperationType_KongOperationTypeDelete  KongOperationType = 2
)

// Enum value maps for KongOperationType.
var (
	KongOperationType_name = map[int32]string{
		0: "KongOperationTypeUnknown",
		1: "KongOperationTypeCreate",
		2: "KongOperationTypeDelete",
	}
	KongOperationType_value = map[string]int32{
		"KongOperationTypeUnknown": 0,
		"KongOperationTypeCreate":  1,
		"KongOperationTypeDelete":  2,
	}
)

func (x KongOperationType) Enum() *KongOperationType {
	p := new(KongOperationType)
	*p = x
	return p
}

func (x KongOperationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KongOperationType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_resource_manager_proto_enumTypes[6].Descriptor()
}

func (KongOperationType) Type() protoreflect.EnumType {
	return &file_proto_resource_manager_proto_enumTypes[6]
}

func (x KongOperationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KongOperationType.Descriptor instead.
func (KongOperationType) EnumDescriptor() ([]byte, []int) {
	return file_proto_resource_manager_proto_rawDescGZIP(), []int{6}
}

type MoveClusterReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	ProjectId string `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
}

func (x *MoveClusterReq) Reset() {
	*x = MoveClusterReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_resource_manager_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoveClusterReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveClusterReq) ProtoMessage() {}

func (x *MoveClusterReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_resource_manager_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveClusterReq.ProtoReflect.Descriptor instead.
func (*MoveClusterReq) Descriptor() ([]byte, []int) {
	return file_proto_resource_manager_proto_rawDescGZIP(), []int{0}
}

func (x *MoveClusterReq) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *MoveClusterReq) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

type MoveClusterRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *MoveClusterRes) Reset() {
	*x = MoveClusterRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_resource_manager_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoveClusterRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveClusterRes) ProtoMessage() {}

func (x *MoveClusterRes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_resource_manager_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveClusterRes.ProtoReflect.Descriptor instead.
func (*MoveClusterRes) Descriptor() ([]byte, []int) {
	return file_proto_resource_manager_proto_rawDescGZIP(), []int{1}
}

func (x *MoveClusterRes) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type RemoveNodeRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *RemoveNodeRes) Reset() {
	*x = RemoveNodeRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_resource_manager_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveNodeRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveNodeRes) ProtoMessage() {}

func (x *RemoveNodeRes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_resource_manager_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveNodeRes.ProtoReflect.Descriptor instead.
func (*RemoveNodeRes) Descriptor() ([]byte, []int) {
	return file_proto_resource_manager_proto_rawDescGZIP(), []int{2}
}

func (x *RemoveNodeRes) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type GetClusterDetailsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
}

func (x *GetClusterDetailsReq) Reset() {
	*x = GetClusterDetailsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_resource_manager_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClusterDetailsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClusterDetailsReq) ProtoMessage() {}

func (x *GetClusterDetailsReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_resource_manager_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClusterDetailsReq.ProtoReflect.Descriptor instead.
func (*GetClusterDetailsReq) Descriptor() ([]byte, []int) {
	return file_proto_resource_manager_proto_rawDescGZIP(), []int{3}
}

func (x *GetClusterDetailsReq) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type GetClusterDetailsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *ClusterDetails `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetClusterDetailsRes) Reset() {
	*x = GetClusterDetailsRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_resource_manager_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClusterDetailsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClusterDetailsRes) ProtoMessage() {}

func (x *GetClusterDetailsRes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_resource_manager_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClusterDetailsRes.ProtoReflect.Descriptor instead.
func (*GetClusterDetailsRes) Descriptor() ([]byte, []int) {
	return file_proto_resource_manager_proto_rawDescGZIP(), []int{4}
}

func (x *GetClusterDetailsRes) GetData() *ClusterDetails {
	if x != nil {
		return x.Data
	}
	return nil
}

type ClusterDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterName  string                `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
	ClusterId    string                `protobuf:"bytes,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	Status       cluster.ClusterStatus `protobuf:"varint,3,opt,name=status,proto3,enum=cluster.ClusterStatus" json:"status,omitempty"`
	ProviderType cluster.ProviderType  `protobuf:"varint,4,opt,name=provider_type,json=providerType,proto3,enum=cluster.ProviderType" json:"provider_type,omitempty"`
	IsHa         bool                  `protobuf:"varint,5,opt,name=is_ha,json=isHa,proto3" json:"is_ha,omitempty"`
	CreatedAt    string                `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Capacity     *Resources            `protobuf:"bytes,7,opt,name=capacity,proto3" json:"capacity,omitempty"`
	ProjectId    string                `protobuf:"bytes,8,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Allocatable  *Resources            `protobuf:"bytes,9,opt,name=allocatable,proto3" json:"allocatable,omitempty"`
	Allocated    *Resources            `protobuf:"bytes,10,opt,name=allocated,proto3" json:"allocated,omitempty"`
}

func (x *ClusterDetails) Reset() {
	*x = ClusterDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_resource_manager_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterDetails) ProtoMessage() {}

func (x *ClusterDetails) ProtoReflect() protoreflect.Message {
	mi := &file_proto_resource_manager_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterDetails.ProtoReflect.Descriptor instead.
func (*ClusterDetails) Descriptor() ([]byte, []int) {
	return file_proto_resource_manager_proto_rawDescGZIP(), []int{5}
}

func (x *ClusterDetails) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *ClusterDetails) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ClusterDetails) GetStatus() cluster.ClusterStatus {
	if x != nil {
		return x.Status
	}
	return cluster.ClusterStatus_ClusterStatus_Unknown
}

func (x *ClusterDetails) GetProviderType() cluster.ProviderType {
	if x != nil {
		return x.ProviderType
	}
	return cluster.ProviderType_ProviderType_Unknown
}

func (x *ClusterDetails) GetIsHa() bool {
	if x != nil {
		return x.IsHa
	}
	return false
}

func (x *ClusterDetails) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *ClusterDetails) GetCapacity() *Resources {
	if x != nil {
		return x.Capacity
	}
	return nil
}

func (x *ClusterDetails) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *ClusterDetails) GetAllocatable() *Resources {
	if x != nil {
		return x.Allocatable
	}
	return nil
}

func (x *ClusterDetails) GetAllocated() *Resources {
	if x != nil {
		return x.Allocated
	}
	return nil
}

type ListNodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *ListNodeResponseData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ListNodeResponse) Reset() {
	*x = ListNodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_resource_manager_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNodeResponse) ProtoMessage() {}

func (x *ListNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_resource_manager_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNodeResponse.ProtoReflect.Descriptor instead.
func (*ListNodeResponse) Descriptor() ([]byte, []int) {
	return file_proto_resource_manager_proto_rawDescGZIP(), []int{6}
}

func (x *ListNodeResponse) GetData() *ListNodeResponseData {
	if x != nil {
		return x.Data
	}
	return nil
}

type ListNodeResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterUnreachable bool                  `protobuf:"varint,1,opt,name=cluster_unreachable,json=clusterUnreachable,proto3" json:"cluster_unreachable,omitempty"`
	Nodes              []*Node               `protobuf:"bytes,2,rep,name=nodes,proto3" json:"nodes,omitempty"`
	ClusterStatus      cluster.ClusterStatus `protobuf:"varint,3,opt,name=cluster_status,json=clusterStatus,proto3,enum=cluster.ClusterStatus" json:"cluster_status,omitempty"`
}

func (x *ListNodeResponseData) Reset() {
	*x = ListNodeResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_resource_manager_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNodeResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNodeResponseData) ProtoMessage() {}

func (x *ListNodeResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_resource_manager_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNodeResponseData.ProtoReflect.Descriptor instead.
func (*ListNodeResponseData) Descriptor() ([]byte, []int) {
	return file_proto_resource_manager_proto_rawDescGZIP(), []int{7}
}

func (x *ListNodeResponseData) GetClusterUnreachable() bool {
	if x != nil {
		return x.ClusterUnreachable
	}
	return false
}

func (x *ListNodeResponseData) GetNodes() []*Node {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *ListNodeResponseData) GetClusterStatus() cluster.ClusterStatus {
	if x != nil {
		return x.ClusterStatus
	}
	return cluster.ClusterStatus_ClusterStatus_Unknown
}

type Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Capacity         *Resources         `protobuf:"bytes,1,opt,name=capacity,proto3" json:"capacity,omitempty"`
	Status           cluster.NodeStatus `protobuf:"varint,2,opt,name=status,proto3,enum=cluster.NodeStatus" json:"status,omitempty"`
	MemoryPressure   bool               `protobuf:"varint,3,opt,name=memory_pressure,json=memoryPressure,proto3" json:"memory_pressure,omitempty"`
	DiskPressure     bool               `protobuf:"varint,4,opt,name=disk_pressure,json=diskPressure,proto3" json:"disk_pressure,omitempty"`
	PidPressure      bool               `protobuf:"varint,5,opt,name=pid_pressure,json=pidPressure,proto3" json:"pid_pressure,omitempty"`
	NodeReady        bool               `protobuf:"varint,6,opt,name=node_ready,json=nodeReady,proto3" json:"node_ready,omitempty"`
	NodeName         string             `protobuf:"bytes,7,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	Ip               string             `protobuf:"bytes,8,opt,name=ip,proto3" json:"ip,omitempty"`
	NodeType         cluster.NodeType   `protobuf:"varint,9,opt,name=node_type,json=nodeType,proto3,enum=cluster.NodeType" json:"node_type,omitempty"`
	NetworkAvailable bool               `protobuf:"varint,10,opt,name=network_available,json=networkAvailable,proto3" json:"network_available,omitempty"`
	TotalAllocatable *Resources         `protobuf:"bytes,11,opt,name=total_allocatable,json=totalAllocatable,proto3" json:"total_allocatable,omitempty"`
	Allocated        *Resources         `protobuf:"bytes,12,opt,name=allocated,proto3" json:"allocated,omitempty"`
}

func (x *Node) Reset() {
	*x = Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_resource_manager_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_proto_resource_manager_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_proto_resource_manager_proto_rawDescGZIP(), []int{8}
}

func (x *Node) GetCapacity() *Resources {
	if x != nil {
		return x.Capacity
	}
	return nil
}

func (x *Node) GetStatus() cluster.NodeStatus {
	if x != nil {
		return x.Status
	}
	return cluster.NodeStatus_NodeStatus_Unknown
}

func (x *Node) GetMemoryPressure() bool {
	if x != nil {
		return x.MemoryPressure
	}
	return false
}

func (x *Node) GetDiskPressure() bool {
	if x != nil {
		return x.DiskPressure
	}
	return false
}

func (x *Node) GetPidPressure() bool {
	if x != nil {
		return x.PidPressure
	}
	return false
}

func (x *Node) GetNodeReady() bool {
	if x != nil {
		return x.NodeReady
	}
	return false
}

func (x *Node) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *Node) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *Node) GetNodeType() cluster.NodeType {
	if x != nil {
		return x.NodeType
	}
	return cluster.NodeType_NodeType_Unknown
}

func (x *Node) GetNetworkAvailable() bool {
	if x != nil {
		return x.NetworkAvailable
	}
	return false
}

func (x *Node) GetTotalAllocatable() *Resources {
	if x != nil {
		return x.TotalAllocatable
	}
	return nil
}

func (x *Node) GetAllocated() *Resources {
	if x != nil {
		return x.Allocated
	}
	return nil
}

type Resources struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cpu    *resource.Resource `protobuf:"bytes,1,opt,name=cpu,proto3" json:"cpu,omitempty"`
	Memory *resource.Resource `protobuf:"bytes,2,opt,name=memory,proto3" json:"memory,omitempty"`
	Disk   *resource.Resource `protobuf:"bytes,3,opt,name=disk,proto3" json:"disk,omitempty"`
}

func (x *Resources) Reset() {
	*x = Resources{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_resource_manager_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Resources) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resources) ProtoMessage() {}

func (x *Resources) ProtoReflect() protoreflect.Message {
	mi := &file_proto_resource_manager_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resources.ProtoReflect.Descriptor instead.
func (*Resources) Descriptor() ([]byte, []int) {
	return file_proto_resource_manager_proto_rawDescGZIP(), []int{9}
}

func (x *Resources) GetCpu() *resource.Resource {
	if x != nil {
		return x.Cpu
	}
	return nil
}

func (x *Resources) GetMemory() *resource.Resource {
	if x != nil {
		return x.Memory
	}
	return nil
}

func (x *Resources) GetDisk() *resource.Resource {
	if x != nil {
		return x.Disk
	}
	return nil
}

type ListClustersReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListClustersReq) Reset() {
	*x = ListClustersReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_resource_manager_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListClustersReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClustersReq) ProtoMessage() {}

func (x *ListClustersReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_resource_manager_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClustersReq.ProtoReflect.Descriptor instead.
func (*ListClustersReq) Descriptor() ([]byte, []int) {
	return file_proto_resource_manager_proto_rawDescGZIP(), []int{10}
}

type ListClustersRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*ClusterMetadata `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ListClustersRes) Reset() {
	*x = ListClustersRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_resource_manager_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListClustersRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClustersRes) ProtoMessage() {}

func (x *ListClustersRes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_resource_manager_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClustersRes.ProtoReflect.Descriptor instead.
func (*ListClustersRes) Descriptor() ([]byte, []int) {
	return file_proto_resource_manager_proto_rawDescGZIP(), []int{11}
}

func (x *ListClustersRes) GetData() []*ClusterMetadata {
	if x != nil {
		return x.Data
	}
	return nil
}

type ClusterMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterName  string                `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
	ClusterId    string                `protobuf:"bytes,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	Status       cluster.ClusterStatus `protobuf:"varint,3,opt,name=status,proto3,enum=cluster.ClusterStatus" json:"status,omitempty"`
	ProviderType cluster.ProviderType  `protobuf:"varint,4,opt,name=provider_type,json=providerType,proto3,enum=cluster.ProviderType" json:"provider_type,omitempty"`
	IsHa         bool                  `protobuf:"varint,5,opt,name=is_ha,json=isHa,proto3" json:"is_ha,omitempty"`
	CreatedAt    string                `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Stats        *ClusterMetaStats     `protobuf:"bytes,7,opt,name=stats,proto3" json:"stats,omitempty"`
	ProjectId    string                `protobuf:"bytes,8,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
}

func (x *ClusterMetadata) Reset() {
	*x = ClusterMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_resource_manager_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterMetadata) ProtoMessage() {}

func (x *ClusterMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_proto_resource_manager_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterMetadata.ProtoReflect.Descriptor instead.
func (*ClusterMetadata) Descriptor() ([]byte, []int) {
	return file_proto_resource_manager_proto_rawDescGZIP(), []int{12}
}

func (x *ClusterMetadata) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *ClusterMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ClusterMetadata) GetStatus() cluster.ClusterStatus {
	if x != nil {
		return x.Status
	}
	return cluster.ClusterStatus_ClusterStatus_Unknown
}

func (x *ClusterMetadata) GetProviderType() cluster.ProviderType {
	if x != nil {
		return x.ProviderType
	}
	return cluster.ProviderType_ProviderType_Unknown
}

func (x *ClusterMetadata) GetIsHa() bool {
	if x != nil {
		return x.IsHa
	}
	return false
}

func (x *ClusterMetadata) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *ClusterMetadata) GetStats() *ClusterMetaStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *ClusterMetadata) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

type ClusterMetaStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Master      *ClusterNodeStats `protobuf:"bytes,1,opt,name=master,proto3" json:"master,omitempty"`
	Etcd        *ClusterNodeStats `protobuf:"bytes,2,opt,name=etcd,proto3" json:"etcd,omitempty"`
	Worker      *ClusterNodeStats `protobuf:"bytes,3,opt,name=worker,proto3" json:"worker,omitempty"`
	Deployments *DeploymentStats  `protobuf:"bytes,4,opt,name=deployments,proto3" json:"deployments,omitempty"`
}

func (x *ClusterMetaStats) Reset() {
	*x = ClusterMetaStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_resource_manager_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterMetaStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterMetaStats) ProtoMessage() {}

func (x *ClusterMetaStats) ProtoReflect() protoreflect.Message {
	mi := &file_proto_resource_manager_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterMetaStats.ProtoReflect.Descriptor instead.
func (*ClusterMetaStats) Descriptor() ([]byte, []int) {
	return file_proto_resource_manager_proto_rawDescGZIP(), []int{13}
}

func (x *ClusterMetaStats) GetMaster() *ClusterNodeStats {
	if x != nil {
		return x.Master
	}
	return nil
}

func (x *ClusterMetaStats) GetEtcd() *ClusterNodeStats {
	if x != nil {
		return x.Etcd
	}
	return nil
}

func (x *ClusterMetaStats) GetWorker() *ClusterNodeStats {
	if x != nil {
		return x.Worker
	}
	return nil
}

func (x *ClusterMetaStats) GetDeployments() *DeploymentStats {
	if x != nil {
		return x.Deployments
	}
	return nil
}

type DeploymentStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalCount int32 `protobuf:"varint,1,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
}

func (x *DeploymentStats) Reset() {
	*x = DeploymentStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_resource_manager_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeploymentStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploymentStats) ProtoMessage() {}

func (x *DeploymentStats) ProtoReflect() protoreflect.Message {
	mi := &file_proto_resource_manager_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploymentStats.ProtoReflect.Descriptor instead.
func (*DeploymentStats) Descriptor() ([]byte, []int) {
	return file_proto_resource_manager_proto_rawDescGZIP(), []int{14}
}

func (x *DeploymentStats) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

type ClusterNodeStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalCount int32 `protobuf:"varint,1,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	InCreation int32 `protobuf:"varint,2,opt,name=in_creation,json=inCreation,proto3" json:"in_creation,omitempty"`
	InDeletion int32 `protobuf:"varint,3,opt,name=in_deletion,json=inDeletion,proto3" json:"in_deletion,omitempty"`
}

func (x *ClusterNodeStats) Reset() {
	*x = ClusterNodeStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_resource_manager_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterNodeStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterNodeStats) ProtoMessage() {}

func (x *ClusterNodeStats) ProtoReflect() protoreflect.Message {
	mi := &file_proto_resource_manager_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterNodeStats.ProtoReflect.Descriptor instead.
func (*ClusterNodeStats) Descriptor() ([]byte, []int) {
	return file_proto_resource_manager_proto_rawDescGZIP(), []int{15}
}

func (x *ClusterNodeStats) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *ClusterNodeStats) GetInCreation() int32 {
	if x != nil {
		return x.InCreation
	}
	return 0
}

func (x *ClusterNodeStats) GetInDeletion() int32 {
	if x != nil {
		return x.InDeletion
	}
	return 0
}

type IsClusterNameUniqueReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
}

func (x *IsClusterNameUniqueReq) Reset() {
	*x = IsClusterNameUniqueReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_resource_manager_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsClusterNameUniqueReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsClusterNameUniqueReq) ProtoMessage() {}

func (x *IsClusterNameUniqueReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_resource_manager_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsClusterNameUniqueReq.ProtoReflect.Descriptor instead.
func (*IsClusterNameUniqueReq) Descriptor() ([]byte, []int) {
	return file_proto_resource_manager_proto_rawDescGZIP(), []int{16}
}

func (x *IsClusterNameUniqueReq) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type IsClusterNameUniqueRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Unique bool `protobuf:"varint,1,opt,name=unique,proto3" json:"unique,omitempty"`
}

func (x *IsClusterNameUniqueRes) Reset() {
	*x = IsClusterNameUniqueRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_resource_manager_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsClusterNameUniqueRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsClusterNameUniqueRes) ProtoMessage() {}

func (x *IsClusterNameUniqueRes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_resource_manager_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsClusterNameUniqueRes.ProtoReflect.Descriptor instead.
func (*IsClusterNameUniqueRes) Descriptor() ([]byte, []int) {
	return file_proto_resource_manager_proto_rawDescGZIP(), []int{17}
}

func (x *IsClusterNameUniqueRes) GetUnique() bool {
	if x != nil {
		return x.Unique
	}
	return false
}

type CreateK8SClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProviderType cluster.ProviderType `protobuf:"varint,1,opt,name=provider_type,json=providerType,proto3,enum=cluster.ProviderType" json:"provider_type,omitempty"`
	K8SSpec      *K8SSpec             `protobuf:"bytes,2,opt,name=k8s_spec,json=k8sSpec,proto3" json:"k8s_spec,omitempty"`
	ProjectId    string               `protobuf:"bytes,3,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	CreatedBy    string               `protobuf:"bytes,4,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
}

func (x *CreateK8SClusterRequest) Reset() {
	*x = CreateK8SClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_resource_manager_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateK8SClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateK8SClusterRequest) ProtoMessage() {}

func (x *CreateK8SClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_resource_manager_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateK8SClusterRequest.ProtoReflect.Descriptor instead.
func (*CreateK8SClusterRequest) Descriptor() ([]byte, []int) {
	return file_proto_resource_manager_proto_rawDescGZIP(), []int{18}
}

func (x *CreateK8SClusterRequest) GetProviderType() cluster.ProviderType {
	if x != nil {
		return x.ProviderType
	}
	return cluster.ProviderType_ProviderType_Unknown
}

func (x *CreateK8SClusterRequest) GetK8SSpec() *K8SSpec {
	if x != nil {
		return x.K8SSpec
	}
	return nil
}

func (x *CreateK8SClusterRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *CreateK8SClusterRequest) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

type AddNodeToK8SClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId string          `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	K8SSpec   *AddNodeK8SSpec `protobuf:"bytes,2,opt,name=k8s_spec,json=k8sSpec,proto3" json:"k8s_spec,omitempty"`
	CreatedBy string          `protobuf:"bytes,3,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
}

func (x *AddNodeToK8SClusterRequest) Reset() {
	*x = AddNodeToK8SClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_resource_manager_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddNodeToK8SClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddNodeToK8SClusterRequest) ProtoMessage() {}

func (x *AddNodeToK8SClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_resource_manager_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddNodeToK8SClusterRequest.ProtoReflect.Descriptor instead.
func (*AddNodeToK8SClusterRequest) Descriptor() ([]byte, []int) {
	return file_proto_resource_manager_proto_rawDescGZIP(), []int{19}
}

func (x *AddNodeToK8SClusterRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *AddNodeToK8SClusterRequest) GetK8SSpec() *AddNodeK8SSpec {
	if x != nil {
		return x.K8SSpec
	}
	return nil
}

func (x *AddNodeToK8SClusterRequest) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

type AddNodeK8SSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkerInstanceCount uint32   `protobuf:"varint,1,opt,name=worker_instance_count,json=workerInstanceCount,proto3" json:"worker_instance_count,omitempty"`
	InstanceSize        string   `protobuf:"bytes,2,opt,name=instance_size,json=instanceSize,proto3" json:"instance_size,omitempty"`
	StorageSize         uint32   `protobuf:"varint,3,opt,name=storage_size,json=storageSize,proto3" json:"storage_size,omitempty"`
	WorkerInstanceIps   []string `protobuf:"bytes,4,rep,name=worker_instance_ips,json=workerInstanceIps,proto3" json:"worker_instance_ips,omitempty"`
}

func (x *AddNodeK8SSpec) Reset() {
	*x = AddNodeK8SSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_resource_manager_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddNodeK8SSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddNodeK8SSpec) ProtoMessage() {}

func (x *AddNodeK8SSpec) ProtoReflect() protoreflect.Message {
	mi := &file_proto_resource_manager_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddNodeK8SSpec.ProtoReflect.Descriptor instead.
func (*AddNodeK8SSpec) Descriptor() ([]byte, []int) {
	return file_proto_resource_manager_proto_rawDescGZIP(), []int{20}
}

func (x *AddNodeK8SSpec) GetWorkerInstanceCount() uint32 {
	if x != nil {
		return x.WorkerInstanceCount
	}
	return 0
}

func (x *AddNodeK8SSpec) GetInstanceSize() string {
	if x != nil {
		return x.InstanceSize
	}
	return ""
}

func (x *AddNodeK8SSpec) GetStorageSize() uint32 {
	if x != nil {
		return x.StorageSize
	}
	return 0
}

func (x *AddNodeK8SSpec) GetWorkerInstanceIps() []string {
	if x != nil {
		return x.WorkerInstanceIps
	}
	return nil
}

type AddNodeToK8SClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *AddNodeToK8SClusterResponse) Reset() {
	*x = AddNodeToK8SClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_resource_manager_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddNodeToK8SClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddNodeToK8SClusterResponse) ProtoMessage() {}

func (x *AddNodeToK8SClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_resource_manager_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddNodeToK8SClusterResponse.ProtoReflect.Descriptor instead.
func (*AddNodeToK8SClusterResponse) Descriptor() ([]byte, []int) {
	return file_proto_resource_manager_proto_rawDescGZIP(), []int{21}
}

func (x *AddNodeToK8SClusterResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type K8SSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterName         string   `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
	MasterInstanceCount uint32   `protobuf:"varint,2,opt,name=master_instance_count,json=masterInstanceCount,proto3" json:"master_instance_count,omitempty"`
	WorkerInstanceCount uint32   `protobuf:"varint,3,opt,name=worker_instance_count,json=workerInstanceCount,proto3" json:"worker_instance_count,omitempty"`
	EtcdInstanceCount   uint32   `protobuf:"varint,4,opt,name=etcd_instance_count,json=etcdInstanceCount,proto3" json:"etcd_instance_count,omitempty"`
	InstanceSize        string   `protobuf:"bytes,5,opt,name=instance_size,json=instanceSize,proto3" json:"instance_size,omitempty"`
	StorageSize         uint32   `protobuf:"varint,6,opt,name=storage_size,json=storageSize,proto3" json:"storage_size,omitempty"`
	MasterInstanceIps   []string `protobuf:"bytes,7,rep,name=master_instance_ips,json=masterInstanceIps,proto3" json:"master_instance_ips,omitempty"`
	WorkerInstanceIps   []string `protobuf:"bytes,8,rep,name=worker_instance_ips,json=workerInstanceIps,proto3" json:"worker_instance_ips,omitempty"`
	EtcdInstanceIps     []string `protobuf:"bytes,9,rep,name=etcd_instance_ips,json=etcdInstanceIps,proto3" json:"etcd_instance_ips,omitempty"`
	ServiceClusterCidr  string   `protobuf:"bytes,10,opt,name=service_cluster_cidr,json=serviceClusterCidr,proto3" json:"service_cluster_cidr,omitempty"`
	PodClusterCidr      string   `protobuf:"bytes,11,opt,name=pod_cluster_cidr,json=podClusterCidr,proto3" json:"pod_cluster_cidr,omitempty"`
	NodePrefix          int32    `protobuf:"varint,12,opt,name=node_prefix,json=nodePrefix,proto3" json:"node_prefix,omitempty"`
	Template            string   `protobuf:"bytes,13,opt,name=template,proto3" json:"template,omitempty"`
	DeployFalco         bool     `protobuf:"varint,14,opt,name=deploy_falco,json=deployFalco,proto3" json:"deploy_falco,omitempty"`
	ClusterId           string   `protobuf:"bytes,15,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
}

func (x *K8SSpec) Reset() {
	*x = K8SSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_resource_manager_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *K8SSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*K8SSpec) ProtoMessage() {}

func (x *K8SSpec) ProtoReflect() protoreflect.Message {
	mi := &file_proto_resource_manager_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use K8SSpec.ProtoReflect.Descriptor instead.
func (*K8SSpec) Descriptor() ([]byte, []int) {
	return file_proto_resource_manager_proto_rawDescGZIP(), []int{22}
}

func (x *K8SSpec) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *K8SSpec) GetMasterInstanceCount() uint32 {
	if x != nil {
		return x.MasterInstanceCount
	}
	return 0
}

func (x *K8SSpec) GetWorkerInstanceCount() uint32 {
	if x != nil {
		return x.WorkerInstanceCount
	}
	return 0
}

func (x *K8SSpec) GetEtcdInstanceCount() uint32 {
	if x != nil {
		return x.EtcdInstanceCount
	}
	return 0
}

func (x *K8SSpec) GetInstanceSize() string {
	if x != nil {
		return x.InstanceSize
	}
	return ""
}

func (x *K8SSpec) GetStorageSize() uint32 {
	if x != nil {
		return x.StorageSize
	}
	return 0
}

func (x *K8SSpec) GetMasterInstanceIps() []string {
	if x != nil {
		return x.MasterInstanceIps
	}
	return nil
}

func (x *K8SSpec) GetWorkerInstanceIps() []string {
	if x != nil {
		return x.WorkerInstanceIps
	}
	return nil
}

func (x *K8SSpec) GetEtcdInstanceIps() []string {
	if x != nil {
		return x.EtcdInstanceIps
	}
	return nil
}

func (x *K8SSpec) GetServiceClusterCidr() string {
	if x != nil {
		return x.ServiceClusterCidr
	}
	return ""
}

func (x *K8SSpec) GetPodClusterCidr() string {
	if x != nil {
		return x.PodClusterCidr
	}
	return ""
}

func (x *K8SSpec) GetNodePrefix() int32 {
	if x != nil {
		return x.NodePrefix
	}
	return 0
}

func (x *K8SSpec) GetTemplate() string {
	if x != nil {
		return x.Template
	}
	return ""
}

func (x *K8SSpec) GetDeployFalco() bool {
	if x != nil {
		return x.DeployFalco
	}
	return false
}

func (x *K8SSpec) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type CreateK8SClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success   bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	ClusterId string `protobuf:"bytes,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
}

func (x *CreateK8SClusterResponse) Reset() {
	*x = CreateK8SClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_resource_manager_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateK8SClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateK8SClusterResponse) ProtoMessage() {}

func (x *CreateK8SClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_resource_manager_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateK8SClusterResponse.ProtoReflect.Descriptor instead.
func (*CreateK8SClusterResponse) Descriptor() ([]byte, []int) {
	return file_proto_resource_manager_proto_rawDescGZIP(), []int{23}
}

func (x *CreateK8SClusterResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CreateK8SClusterResponse) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type UpgradeInfrastructureRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterName string `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
	KubeVersion string `protobuf:"bytes,2,opt,name=kube_version,json=kubeVersion,proto3" json:"kube_version,omitempty"`
}

func (x *UpgradeInfrastructureRequest) Reset() {
	*x = UpgradeInfrastructureRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_resource_manager_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpgradeInfrastructureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeInfrastructureRequest) ProtoMessage() {}

func (x *UpgradeInfrastructureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_resource_manager_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeInfrastructureRequest.ProtoReflect.Descriptor instead.
func (*UpgradeInfrastructureRequest) Descriptor() ([]byte, []int) {
	return file_proto_resource_manager_proto_rawDescGZIP(), []int{24}
}

func (x *UpgradeInfrastructureRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *UpgradeInfrastructureRequest) GetKubeVersion() string {
	if x != nil {
		return x.KubeVersion
	}
	return ""
}

type UpgradeInfrastructureResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *UpgradeInfrastructureResponse) Reset() {
	*x = UpgradeInfrastructureResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_resource_manager_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpgradeInfrastructureResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeInfrastructureResponse) ProtoMessage() {}

func (x *UpgradeInfrastructureResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_resource_manager_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeInfrastructureResponse.ProtoReflect.Descriptor instead.
func (*UpgradeInfrastructureResponse) Descriptor() ([]byte, []int) {
	return file_proto_resource_manager_proto_rawDescGZIP(), []int{25}
}

func (x *UpgradeInfrastructureResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type CanDeleteNodeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeNames []string `protobuf:"bytes,1,rep,name=node_names,json=nodeNames,proto3" json:"node_names,omitempty"`
	ClusterId string   `protobuf:"bytes,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
}

func (x *CanDeleteNodeReq) Reset() {
	*x = CanDeleteNodeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_resource_manager_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CanDeleteNodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CanDeleteNodeReq) ProtoMessage() {}

func (x *CanDeleteNodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_resource_manager_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CanDeleteNodeReq.ProtoReflect.Descriptor instead.
func (*CanDeleteNodeReq) Descriptor() ([]byte, []int) {
	return file_proto_resource_manager_proto_rawDescGZIP(), []int{26}
}

func (x *CanDeleteNodeReq) GetNodeNames() []string {
	if x != nil {
		return x.NodeNames
	}
	return nil
}

func (x *CanDeleteNodeReq) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type CanDeleteNodeRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QosIndicator *resource.NodeDeletionQosIndicator `protobuf:"bytes,1,opt,name=qos_indicator,json=qosIndicator,proto3" json:"qos_indicator,omitempty"`
}

func (x *CanDeleteNodeRes) Reset() {
	*x = CanDeleteNodeRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_resource_manager_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CanDeleteNodeRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CanDeleteNodeRes) ProtoMessage() {}

func (x *CanDeleteNodeRes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_resource_manager_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CanDeleteNodeRes.ProtoReflect.Descriptor instead.
func (*CanDeleteNodeRes) Descriptor() ([]byte, []int) {
	return file_proto_resource_manager_proto_rawDescGZIP(), []int{27}
}

func (x *CanDeleteNodeRes) GetQosIndicator() *resource.NodeDeletionQosIndicator {
	if x != nil {
		return x.QosIndicator
	}
	return nil
}

type AmSmtpConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host          string `protobuf:"bytes,1,opt,name=Host,proto3" json:"Host,omitempty"`
	Port          string `protobuf:"bytes,2,opt,name=Port,proto3" json:"Port,omitempty"`
	SmtpUserName  string `protobuf:"bytes,3,opt,name=SmtpUserName,proto3" json:"SmtpUserName,omitempty"`
	SmtpPassword  string `protobuf:"bytes,4,opt,name=SmtpPassword,proto3" json:"SmtpPassword,omitempty"`
	SenderEmail   string `protobuf:"bytes,5,opt,name=SenderEmail,proto3" json:"SenderEmail,omitempty"`
	ReceiverEmail string `protobuf:"bytes,6,opt,name=ReceiverEmail,proto3" json:"ReceiverEmail,omitempty"`
	TlsEnabled    bool   `protobuf:"varint,7,opt,name=TlsEnabled,proto3" json:"TlsEnabled,omitempty"`
}

func (x *AmSmtpConfigRequest) Reset() {
	*x = AmSmtpConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_resource_manager_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AmSmtpConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AmSmtpConfigRequest) ProtoMessage() {}

func (x *AmSmtpConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_resource_manager_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AmSmtpConfigRequest.ProtoReflect.Descriptor instead.
func (*AmSmtpConfigRequest) Descriptor() ([]byte, []int) {
	return file_proto_resource_manager_proto_rawDescGZIP(), []int{28}
}

func (x *AmSmtpConfigRequest) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *AmSmtpConfigRequest) GetPort() string {
	if x != nil {
		return x.Port
	}
	return ""
}

func (x *AmSmtpConfigRequest) GetSmtpUserName() string {
	if x != nil {
		return x.SmtpUserName
	}
	return ""
}

func (x *AmSmtpConfigRequest) GetSmtpPassword() string {
	if x != nil {
		return x.SmtpPassword
	}
	return ""
}

func (x *AmSmtpConfigRequest) GetSenderEmail() string {
	if x != nil {
		return x.SenderEmail
	}
	return ""
}

func (x *AmSmtpConfigRequest) GetReceiverEmail() string {
	if x != nil {
		return x.ReceiverEmail
	}
	return ""
}

func (x *AmSmtpConfigRequest) GetTlsEnabled() bool {
	if x != nil {
		return x.TlsEnabled
	}
	return false
}

type AmSmtpConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok bool `protobuf:"varint,1,opt,name=Ok,proto3" json:"Ok,omitempty"`
}

func (x *AmSmtpConfigResponse) Reset() {
	*x = AmSmtpConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_resource_manager_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AmSmtpConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AmSmtpConfigResponse) ProtoMessage() {}

func (x *AmSmtpConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_resource_manager_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AmSmtpConfigResponse.ProtoReflect.Descriptor instead.
func (*AmSmtpConfigResponse) Descriptor() ([]byte, []int) {
	return file_proto_resource_manager_proto_rawDescGZIP(), []int{29}
}

func (x *AmSmtpConfigResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

type WriteCloudConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info []byte `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *WriteCloudConfigRequest) Reset() {
	*x = WriteCloudConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_resource_manager_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteCloudConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteCloudConfigRequest) ProtoMessage() {}

func (x *WriteCloudConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_resource_manager_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteCloudConfigRequest.ProtoReflect.Descriptor instead.
func (*WriteCloudConfigRequest) Descriptor() ([]byte, []int) {
	return file_proto_resource_manager_proto_rawDescGZIP(), []int{30}
}

func (x *WriteCloudConfigRequest) GetInfo() []byte {
	if x != nil {
		return x.Info
	}
	return nil
}

type WriteCloudConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok bool `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
}

func (x *WriteCloudConfigResponse) Reset() {
	*x = WriteCloudConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_resource_manager_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteCloudConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteCloudConfigResponse) ProtoMessage() {}

func (x *WriteCloudConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_resource_manager_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteCloudConfigResponse.ProtoReflect.Descriptor instead.
func (*WriteCloudConfigResponse) Descriptor() ([]byte, []int) {
	return file_proto_resource_manager_proto_rawDescGZIP(), []int{31}
}

func (x *WriteCloudConfigResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

type GetRookCephDasboardPasswordReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterName string `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
}

func (x *GetRookCephDasboardPasswordReq) Reset() {
	*x = GetRookCephDasboardPasswordReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_resource_manager_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRookCephDasboardPasswordReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRookCephDasboardPasswordReq) ProtoMessage() {}

func (x *GetRookCephDasboardPasswordReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_resource_manager_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRookCephDasboardPasswordReq.ProtoReflect.Descriptor instead.
func (*GetRookCephDasboardPasswordReq) Descriptor() ([]byte, []int) {
	return file_proto_resource_manager_proto_rawDescGZIP(), []int{32}
}

func (x *GetRookCephDasboardPasswordReq) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

type GetRookCephDasboardPasswordRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Password string `protobuf:"bytes,1,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *GetRookCephDasboardPasswordRes) Reset() {
	*x = GetRookCephDasboardPasswordRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_resource_manager_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRookCephDasboardPasswordRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRookCephDasboardPasswordRes) ProtoMessage() {}

func (x *GetRookCephDasboardPasswordRes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_resource_manager_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRookCephDasboardPasswordRes.ProtoReflect.Descriptor instead.
func (*GetRookCephDasboardPasswordRes) Descriptor() ([]byte, []int) {
	return file_proto_resource_manager_proto_rawDescGZIP(), []int{33}
}

func (x *GetRookCephDasboardPasswordRes) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type LockInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
}

func (x *LockInfoRequest) Reset() {
	*x = LockInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_resource_manager_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LockInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LockInfoRequest) ProtoMessage() {}

func (x *LockInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_resource_manager_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LockInfoRequest.ProtoReflect.Descriptor instead.
func (*LockInfoRequest) Descriptor() ([]byte, []int) {
	return file_proto_resource_manager_proto_rawDescGZIP(), []int{34}
}

func (x *LockInfoRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type ClusterLock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreatedAt string `protobuf:"bytes,1,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	ValidTil  string `protobuf:"bytes,2,opt,name=valid_til,json=validTil,proto3" json:"valid_til,omitempty"`
	NodeName  string `protobuf:"bytes,3,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	Action    string `protobuf:"bytes,4,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *ClusterLock) Reset() {
	*x = ClusterLock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_resource_manager_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterLock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterLock) ProtoMessage() {}

func (x *ClusterLock) ProtoReflect() protoreflect.Message {
	mi := &file_proto_resource_manager_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterLock.ProtoReflect.Descriptor instead.
func (*ClusterLock) Descriptor() ([]byte, []int) {
	return file_proto_resource_manager_proto_rawDescGZIP(), []int{35}
}

func (x *ClusterLock) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *ClusterLock) GetValidTil() string {
	if x != nil {
		return x.ValidTil
	}
	return ""
}

func (x *ClusterLock) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *ClusterLock) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

type DeleteIngressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IngressName   string `protobuf:"bytes,1,opt,name=ingress_name,json=ingressName,proto3" json:"ingress_name,omitempty"`
	Namespace     string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	ClusterId     string `protobuf:"bytes,3,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	ClusterConfig string `protobuf:"bytes,4,opt,name=cluster_config,json=clusterConfig,proto3" json:"cluster_config,omitempty"`
}

func (x *DeleteIngressRequest) Reset() {
	*x = DeleteIngressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_resource_manager_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteIngressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteIngressRequest) ProtoMessage() {}

func (x *DeleteIngressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_resource_manager_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteIngressRequest.ProtoReflect.Descriptor instead.
func (*DeleteIngressRequest) Descriptor() ([]byte, []int) {
	return file_proto_resource_manager_proto_rawDescGZIP(), []int{36}
}

func (x *DeleteIngressRequest) GetIngressName() string {
	if x != nil {
		return x.IngressName
	}
	return ""
}

func (x *DeleteIngressRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *DeleteIngressRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *DeleteIngressRequest) GetClusterConfig() string {
	if x != nil {
		return x.ClusterConfig
	}
	return ""
}

type DeleteIngressResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *DeleteIngressResponse) Reset() {
	*x = DeleteIngressResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_resource_manager_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteIngressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteIngressResponse) ProtoMessage() {}

func (x *DeleteIngressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_resource_manager_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteIngressResponse.ProtoReflect.Descriptor instead.
func (*DeleteIngressResponse) Descriptor() ([]byte, []int) {
	return file_proto_resource_manager_proto_rawDescGZIP(), []int{37}
}

func (x *DeleteIngressResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type DeleteNamespaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *DeleteNamespaceRequest) Reset() {
	*x = DeleteNamespaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_resource_manager_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteNamespaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNamespaceRequest) ProtoMessage() {}

func (x *DeleteNamespaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_resource_manager_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNamespaceRequest.ProtoReflect.Descriptor instead.
func (*DeleteNamespaceRequest) Descriptor() ([]byte, []int) {
	return file_proto_resource_manager_proto_rawDescGZIP(), []int{38}
}

func (x *DeleteNamespaceRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *DeleteNamespaceRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

type DeleteNamespaceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *DeleteNamespaceResponse) Reset() {
	*x = DeleteNamespaceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_resource_manager_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteNamespaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNamespaceResponse) ProtoMessage() {}

func (x *DeleteNamespaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_resource_manager_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNamespaceResponse.ProtoReflect.Descriptor instead.
func (*DeleteNamespaceResponse) Descriptor() ([]byte, []int) {
	return file_proto_resource_manager_proto_rawDescGZIP(), []int{39}
}

func (x *DeleteNamespaceResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type CreateNamespaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	ClusterId string `protobuf:"bytes,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
}

func (x *CreateNamespaceRequest) Reset() {
	*x = CreateNamespaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_resource_manager_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNamespaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNamespaceRequest) ProtoMessage() {}

func (x *CreateNamespaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_resource_manager_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNamespaceRequest.ProtoReflect.Descriptor instead.
func (*CreateNamespaceRequest) Descriptor() ([]byte, []int) {
	return file_proto_resource_manager_proto_rawDescGZIP(), []int{40}
}

func (x *CreateNamespaceRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *CreateNamespaceRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type CreateNamespaceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *CreateNamespaceResponse) Reset() {
	*x = CreateNamespaceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_resource_manager_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNamespaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNamespaceResponse) ProtoMessage() {}

func (x *CreateNamespaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_resource_manager_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNamespaceResponse.ProtoReflect.Descriptor instead.
func (*CreateNamespaceResponse) Descriptor() ([]byte, []int) {
	return file_proto_resource_manager_proto_rawDescGZIP(), []int{41}
}

func (x *CreateNamespaceResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type NodeIPRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeName  string `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	ClusterId string `protobuf:"bytes,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
}

func (x *NodeIPRequest) Reset() {
	*x = NodeIPRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_resource_manager_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeIPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeIPRequest) ProtoMessage() {}

func (x *NodeIPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_resource_manager_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeIPRequest.ProtoReflect.Descriptor instead.
func (*NodeIPRequest) Descriptor() ([]byte, []int) {
	return file_proto_resource_manager_proto_rawDescGZIP(), []int{42}
}

func (x *NodeIPRequest) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *NodeIPRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type NodeIPResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
}

func (x *NodeIPResponse) Reset() {
	*x = NodeIPResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_resource_manager_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeIPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeIPResponse) ProtoMessage() {}

func (x *NodeIPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_resource_manager_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeIPResponse.ProtoReflect.Descriptor instead.
func (*NodeIPResponse) Descriptor() ([]byte, []int) {
	return file_proto_resource_manager_proto_rawDescGZIP(), []int{43}
}

func (x *NodeIPResponse) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

type ProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ProfileRequest) Reset() {
	*x = ProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_resource_manager_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileRequest) ProtoMessage() {}

func (x *ProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_resource_manager_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileRequest.ProtoReflect.Descriptor instead.
func (*ProfileRequest) Descriptor() ([]byte, []int) {
	return file_proto_resource_manager_proto_rawDescGZIP(), []int{44}
}

type ProfileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProviderType cluster.ProviderType `protobuf:"varint,1,opt,name=provider_type,json=providerType,proto3,enum=cluster.ProviderType" json:"provider_type,omitempty"`
	Region       string               `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
}

func (x *ProfileResponse) Reset() {
	*x = ProfileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_resource_manager_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileResponse) ProtoMessage() {}

func (x *ProfileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_resource_manager_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileResponse.ProtoReflect.Descriptor instead.
func (*ProfileResponse) Descriptor() ([]byte, []int) {
	return file_proto_resource_manager_proto_rawDescGZIP(), []int{45}
}

func (x *ProfileResponse) GetProviderType() cluster.ProviderType {
	if x != nil {
		return x.ProviderType
	}
	return cluster.ProviderType_ProviderType_Unknown
}

func (x *ProfileResponse) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

type GetRcInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetRcInfoReq) Reset() {
	*x = GetRcInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_resource_manager_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRcInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRcInfoReq) ProtoMessage() {}

func (x *GetRcInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_resource_manager_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRcInfoReq.ProtoReflect.Descriptor instead.
func (*GetRcInfoReq) Descriptor() ([]byte, []int) {
	return file_proto_resource_manager_proto_rawDescGZIP(), []int{46}
}

type GetRcInfoRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response string `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *GetRcInfoRes) Reset() {
	*x = GetRcInfoRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_resource_manager_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRcInfoRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRcInfoRes) ProtoMessage() {}

func (x *GetRcInfoRes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_resource_manager_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRcInfoRes.ProtoReflect.Descriptor instead.
func (*GetRcInfoRes) Descriptor() ([]byte, []int) {
	return file_proto_resource_manager_proto_rawDescGZIP(), []int{47}
}

func (x *GetRcInfoRes) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

type ApplyIngressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId     string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	Ingress       string `protobuf:"bytes,2,opt,name=ingress,proto3" json:"ingress,omitempty"`
	ClusterConfig string `protobuf:"bytes,3,opt,name=cluster_config,json=clusterConfig,proto3" json:"cluster_config,omitempty"`
}

func (x *ApplyIngressRequest) Reset() {
	*x = ApplyIngressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_resource_manager_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyIngressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyIngressRequest) ProtoMessage() {}

func (x *ApplyIngressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_resource_manager_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyIngressRequest.ProtoReflect.Descriptor instead.
func (*ApplyIngressRequest) Descriptor() ([]byte, []int) {
	return file_proto_resource_manager_proto_rawDescGZIP(), []int{48}
}

func (x *ApplyIngressRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ApplyIngressRequest) GetIngress() string {
	if x != nil {
		return x.Ingress
	}
	return ""
}

func (x *ApplyIngressRequest) GetClusterConfig() string {
	if x != nil {
		return x.ClusterConfig
	}
	return ""
}

type ApplyIngressResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok bool `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
}

func (x *ApplyIngressResponse) Reset() {
	*x = ApplyIngressResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_resource_manager_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyIngressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyIngressResponse) ProtoMessage() {}

func (x *ApplyIngressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_resource_manager_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyIngressResponse.ProtoReflect.Descriptor instead.
func (*ApplyIngressResponse) Descriptor() ([]byte, []int) {
	return file_proto_resource_manager_proto_rawDescGZIP(), []int{49}
}

func (x *ApplyIngressResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

type WorkerIPRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
}

func (x *WorkerIPRequest) Reset() {
	*x = WorkerIPRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_resource_manager_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkerIPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerIPRequest) ProtoMessage() {}

func (x *WorkerIPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_resource_manager_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerIPRequest.ProtoReflect.Descriptor instead.
func (*WorkerIPRequest) Descriptor() ([]byte, []int) {
	return file_proto_resource_manager_proto_rawDescGZIP(), []int{50}
}

func (x *WorkerIPRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type WorkerIPResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip []string `protobuf:"bytes,1,rep,name=ip,proto3" json:"ip,omitempty"`
}

func (x *WorkerIPResponse) Reset() {
	*x = WorkerIPResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_resource_manager_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkerIPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerIPResponse) ProtoMessage() {}

func (x *WorkerIPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_resource_manager_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerIPResponse.ProtoReflect.Descriptor instead.
func (*WorkerIPResponse) Descriptor() ([]byte, []int) {
	return file_proto_resource_manager_proto_rawDescGZIP(), []int{51}
}

func (x *WorkerIPResponse) GetIp() []string {
	if x != nil {
		return x.Ip
	}
	return nil
}

type GetKubeConfigRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterConfig string `protobuf:"bytes,1,opt,name=cluster_config,json=clusterConfig,proto3" json:"cluster_config,omitempty"`
}

func (x *GetKubeConfigRes) Reset() {
	*x = GetKubeConfigRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_resource_manager_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetKubeConfigRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKubeConfigRes) ProtoMessage() {}

func (x *GetKubeConfigRes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_resource_manager_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKubeConfigRes.ProtoReflect.Descriptor instead.
func (*GetKubeConfigRes) Descriptor() ([]byte, []int) {
	return file_proto_resource_manager_proto_rawDescGZIP(), []int{52}
}

func (x *GetKubeConfigRes) GetClusterConfig() string {
	if x != nil {
		return x.ClusterConfig
	}
	return ""
}

type GetKubeConfigReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
}

func (x *GetKubeConfigReq) Reset() {
	*x = GetKubeConfigReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_resource_manager_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetKubeConfigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKubeConfigReq) ProtoMessage() {}

func (x *GetKubeConfigReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_resource_manager_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKubeConfigReq.ProtoReflect.Descriptor instead.
func (*GetKubeConfigReq) Descriptor() ([]byte, []int) {
	return file_proto_resource_manager_proto_rawDescGZIP(), []int{53}
}

func (x *GetKubeConfigReq) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type RegionTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProviderType cluster.ProviderType `protobuf:"varint,1,opt,name=provider_type,json=providerType,proto3,enum=cluster.ProviderType" json:"provider_type,omitempty"`
}

func (x *RegionTypeRequest) Reset() {
	*x = RegionTypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_resource_manager_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegionTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegionTypeRequest) ProtoMessage() {}

func (x *RegionTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_resource_manager_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegionTypeRequest.ProtoReflect.Descriptor instead.
func (*RegionTypeRequest) Descriptor() ([]byte, []int) {
	return file_proto_resource_manager_proto_rawDescGZIP(), []int{54}
}

func (x *RegionTypeRequest) GetProviderType() cluster.ProviderType {
	if x != nil {
		return x.ProviderType
	}
	return cluster.ProviderType_ProviderType_Unknown
}

type RegionTypeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Regions []string `protobuf:"bytes,1,rep,name=regions,proto3" json:"regions,omitempty"`
}

func (x *RegionTypeResponse) Reset() {
	*x = RegionTypeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_resource_manager_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegionTypeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegionTypeResponse) ProtoMessage() {}

func (x *RegionTypeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_resource_manager_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegionTypeResponse.ProtoReflect.Descriptor instead.
func (*RegionTypeResponse) Descriptor() ([]byte, []int) {
	return file_proto_resource_manager_proto_rawDescGZIP(), []int{55}
}

func (x *RegionTypeResponse) GetRegions() []string {
	if x != nil {
		return x.Regions
	}
	return nil
}

type MachineTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProviderType cluster.ProviderType `protobuf:"varint,1,opt,name=provider_type,json=providerType,proto3,enum=cluster.ProviderType" json:"provider_type,omitempty"`
}

func (x *MachineTypeRequest) Reset() {
	*x = MachineTypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_resource_manager_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MachineTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineTypeRequest) ProtoMessage() {}

func (x *MachineTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_resource_manager_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineTypeRequest.ProtoReflect.Descriptor instead.
func (*MachineTypeRequest) Descriptor() ([]byte, []int) {
	return file_proto_resource_manager_proto_rawDescGZIP(), []int{56}
}

func (x *MachineTypeRequest) GetProviderType() cluster.ProviderType {
	if x != nil {
		return x.ProviderType
	}
	return cluster.ProviderType_ProviderType_Unknown
}

type MachineTypeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MachineTypes []string `protobuf:"bytes,1,rep,name=machine_types,json=machineTypes,proto3" json:"machine_types,omitempty"`
}

func (x *MachineTypeResponse) Reset() {
	*x = MachineTypeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_resource_manager_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MachineTypeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineTypeResponse) ProtoMessage() {}

func (x *MachineTypeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_resource_manager_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineTypeResponse.ProtoReflect.Descriptor instead.
func (*MachineTypeResponse) Descriptor() ([]byte, []int) {
	return file_proto_resource_manager_proto_rawDescGZIP(), []int{57}
}

func (x *MachineTypeResponse) GetMachineTypes() []string {
	if x != nil {
		return x.MachineTypes
	}
	return nil
}

type HealthRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HealthRequest) Reset() {
	*x = HealthRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_resource_manager_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthRequest) ProtoMessage() {}

func (x *HealthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_resource_manager_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthRequest.ProtoReflect.Descriptor instead.
func (*HealthRequest) Descriptor() ([]byte, []int) {
	return file_proto_resource_manager_proto_rawDescGZIP(), []int{58}
}

type HealthResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok string `protobuf:"bytes,1,opt,name=ok,proto3" json:"ok,omitempty"`
}

func (x *HealthResponse) Reset() {
	*x = HealthResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_resource_manager_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthResponse) ProtoMessage() {}

func (x *HealthResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_resource_manager_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthResponse.ProtoReflect.Descriptor instead.
func (*HealthResponse) Descriptor() ([]byte, []int) {
	return file_proto_resource_manager_proto_rawDescGZIP(), []int{59}
}

func (x *HealthResponse) GetOk() string {
	if x != nil {
		return x.Ok
	}
	return ""
}

type RemoveNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId   string   `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	NodeNames   []string `protobuf:"bytes,3,rep,name=nodeNames,proto3" json:"nodeNames,omitempty"`
	ForceRemove bool     `protobuf:"varint,4,opt,name=forceRemove,proto3" json:"forceRemove,omitempty"`
}

func (x *RemoveNodeRequest) Reset() {
	*x = RemoveNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_resource_manager_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveNodeRequest) ProtoMessage() {}

func (x *RemoveNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_resource_manager_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveNodeRequest.ProtoReflect.Descriptor instead.
func (*RemoveNodeRequest) Descriptor() ([]byte, []int) {
	return file_proto_resource_manager_proto_rawDescGZIP(), []int{60}
}

func (x *RemoveNodeRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *RemoveNodeRequest) GetNodeNames() []string {
	if x != nil {
		return x.NodeNames
	}
	return nil
}

func (x *RemoveNodeRequest) GetForceRemove() bool {
	if x != nil {
		return x.ForceRemove
	}
	return false
}

type DeleteK8SClusterReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	ProjectId string `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Filters   string `protobuf:"bytes,3,opt,name=filters,proto3" json:"filters,omitempty"`
}

func (x *DeleteK8SClusterReq) Reset() {
	*x = DeleteK8SClusterReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_resource_manager_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteK8SClusterReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteK8SClusterReq) ProtoMessage() {}

func (x *DeleteK8SClusterReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_resource_manager_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteK8SClusterReq.ProtoReflect.Descriptor instead.
func (*DeleteK8SClusterReq) Descriptor() ([]byte, []int) {
	return file_proto_resource_manager_proto_rawDescGZIP(), []int{61}
}

func (x *DeleteK8SClusterReq) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *DeleteK8SClusterReq) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *DeleteK8SClusterReq) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

type DeleteK8SClusterRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *DeleteK8SClusterRes) Reset() {
	*x = DeleteK8SClusterRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_resource_manager_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteK8SClusterRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteK8SClusterRes) ProtoMessage() {}

func (x *DeleteK8SClusterRes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_resource_manager_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteK8SClusterRes.ProtoReflect.Descriptor instead.
func (*DeleteK8SClusterRes) Descriptor() ([]byte, []int) {
	return file_proto_resource_manager_proto_rawDescGZIP(), []int{62}
}

func (x *DeleteK8SClusterRes) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type ProvisionStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Progress                int64         `protobuf:"varint,1,opt,name=progress,proto3" json:"progress,omitempty"`
	TimePassedSinceInSecond int64         `protobuf:"varint,2,opt,name=time_passed_since_in_second,proto3" json:"time_passed_since_in_second,omitempty"`
	Success                 bool          `protobuf:"varint,3,opt,name=success,proto3" json:"success,omitempty"`
	LastStep                ClusterStatus `protobuf:"varint,4,opt,name=last_step,proto3,enum=resourceManager.ClusterStatus" json:"last_step,omitempty"`
}

func (x *ProvisionStatus) Reset() {
	*x = ProvisionStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_resource_manager_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProvisionStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProvisionStatus) ProtoMessage() {}

func (x *ProvisionStatus) ProtoReflect() protoreflect.Message {
	mi := &file_proto_resource_manager_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProvisionStatus.ProtoReflect.Descriptor instead.
func (*ProvisionStatus) Descriptor() ([]byte, []int) {
	return file_proto_resource_manager_proto_rawDescGZIP(), []int{63}
}

func (x *ProvisionStatus) GetProgress() int64 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *ProvisionStatus) GetTimePassedSinceInSecond() int64 {
	if x != nil {
		return x.TimePassedSinceInSecond
	}
	return 0
}

func (x *ProvisionStatus) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ProvisionStatus) GetLastStep() ClusterStatus {
	if x != nil {
		return x.LastStep
	}
	return ClusterStatus_ClusterStatus_Unknown
}

type ProvisioningStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProvisionStatus *ProvisionStatus `protobuf:"bytes,1,opt,name=provision_status,proto3" json:"provision_status,omitempty"`
}

func (x *ProvisioningStateResponse) Reset() {
	*x = ProvisioningStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_resource_manager_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProvisioningStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProvisioningStateResponse) ProtoMessage() {}

func (x *ProvisioningStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_resource_manager_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProvisioningStateResponse.ProtoReflect.Descriptor instead.
func (*ProvisioningStateResponse) Descriptor() ([]byte, []int) {
	return file_proto_resource_manager_proto_rawDescGZIP(), []int{64}
}

func (x *ProvisioningStateResponse) GetProvisionStatus() *ProvisionStatus {
	if x != nil {
		return x.ProvisionStatus
	}
	return nil
}

type ProvisioningStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
}

func (x *ProvisioningStateRequest) Reset() {
	*x = ProvisioningStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_resource_manager_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProvisioningStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProvisioningStateRequest) ProtoMessage() {}

func (x *ProvisioningStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_resource_manager_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProvisioningStateRequest.ProtoReflect.Descriptor instead.
func (*ProvisioningStateRequest) Descriptor() ([]byte, []int) {
	return file_proto_resource_manager_proto_rawDescGZIP(), []int{65}
}

func (x *ProvisioningStateRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type LogsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterName string `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
}

func (x *LogsRequest) Reset() {
	*x = LogsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_resource_manager_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogsRequest) ProtoMessage() {}

func (x *LogsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_resource_manager_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogsRequest.ProtoReflect.Descriptor instead.
func (*LogsRequest) Descriptor() ([]byte, []int) {
	return file_proto_resource_manager_proto_rawDescGZIP(), []int{66}
}

func (x *LogsRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

type LogsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterName  string `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
	OperationLog string `protobuf:"bytes,2,opt,name=operation_log,json=operationLog,proto3" json:"operation_log,omitempty"`
}

func (x *LogsResponse) Reset() {
	*x = LogsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_resource_manager_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogsResponse) ProtoMessage() {}

func (x *LogsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_resource_manager_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogsResponse.ProtoReflect.Descriptor instead.
func (*LogsResponse) Descriptor() ([]byte, []int) {
	return file_proto_resource_manager_proto_rawDescGZIP(), []int{67}
}

func (x *LogsResponse) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *LogsResponse) GetOperationLog() string {
	if x != nil {
		return x.OperationLog
	}
	return ""
}

type ListNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
}

func (x *ListNodeRequest) Reset() {
	*x = ListNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_resource_manager_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNodeRequest) ProtoMessage() {}

func (x *ListNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_resource_manager_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNodeRequest.ProtoReflect.Descriptor instead.
func (*ListNodeRequest) Descriptor() ([]byte, []int) {
	return file_proto_resource_manager_proto_rawDescGZIP(), []int{68}
}

func (x *ListNodeRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type GCPProvider struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GcpCredentials string `protobuf:"bytes,1,opt,name=gcp_credentials,proto3" json:"gcp_credentials,omitempty"`
	GcpProject     string `protobuf:"bytes,2,opt,name=gcp_project,proto3" json:"gcp_project,omitempty"`
	GcpRegion      string `protobuf:"bytes,3,opt,name=gcp_region,proto3" json:"gcp_region,omitempty"`
}

func (x *GCPProvider) Reset() {
	*x = GCPProvider{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_resource_manager_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCPProvider) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCPProvider) ProtoMessage() {}

func (x *GCPProvider) ProtoReflect() protoreflect.Message {
	mi := &file_proto_resource_manager_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCPProvider.ProtoReflect.Descriptor instead.
func (*GCPProvider) Descriptor() ([]byte, []int) {
	return file_proto_resource_manager_proto_rawDescGZIP(), []int{69}
}

func (x *GCPProvider) GetGcpCredentials() string {
	if x != nil {
		return x.GcpCredentials
	}
	return ""
}

func (x *GCPProvider) GetGcpProject() string {
	if x != nil {
		return x.GcpProject
	}
	return ""
}

func (x *GCPProvider) GetGcpRegion() string {
	if x != nil {
		return x.GcpRegion
	}
	return ""
}

type NodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
}

func (x *NodeRequest) Reset() {
	*x = NodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_resource_manager_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeRequest) ProtoMessage() {}

func (x *NodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_resource_manager_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeRequest.ProtoReflect.Descriptor instead.
func (*NodeRequest) Descriptor() ([]byte, []int) {
	return file_proto_resource_manager_proto_rawDescGZIP(), []int{70}
}

func (x *NodeRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type InstanceParameterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	K8SDefinition *K8S                 `protobuf:"bytes,2,opt,name=k8s_definition,json=k8sDefinition,proto3" json:"k8s_definition,omitempty"`
	Forced        bool                 `protobuf:"varint,3,opt,name=forced,proto3" json:"forced,omitempty"`
	ProviderType  cluster.ProviderType `protobuf:"varint,4,opt,name=provider_type,json=providerType,proto3,enum=cluster.ProviderType" json:"provider_type,omitempty"`
}

func (x *InstanceParameterRequest) Reset() {
	*x = InstanceParameterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_resource_manager_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceParameterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceParameterRequest) ProtoMessage() {}

func (x *InstanceParameterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_resource_manager_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceParameterRequest.ProtoReflect.Descriptor instead.
func (*InstanceParameterRequest) Descriptor() ([]byte, []int) {
	return file_proto_resource_manager_proto_rawDescGZIP(), []int{71}
}

func (x *InstanceParameterRequest) GetK8SDefinition() *K8S {
	if x != nil {
		return x.K8SDefinition
	}
	return nil
}

func (x *InstanceParameterRequest) GetForced() bool {
	if x != nil {
		return x.Forced
	}
	return false
}

func (x *InstanceParameterRequest) GetProviderType() cluster.ProviderType {
	if x != nil {
		return x.ProviderType
	}
	return cluster.ProviderType_ProviderType_Unknown
}

type Network struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VpcCidr       string  `protobuf:"bytes,1,opt,name=vpcCidr,proto3" json:"vpcCidr,omitempty"`
	PrivateSubnet *Subnet `protobuf:"bytes,2,opt,name=privateSubnet,proto3" json:"privateSubnet,omitempty"`
	PublicSubnet  *Subnet `protobuf:"bytes,3,opt,name=publicSubnet,proto3" json:"publicSubnet,omitempty"`
}

func (x *Network) Reset() {
	*x = Network{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_resource_manager_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Network) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Network) ProtoMessage() {}

func (x *Network) ProtoReflect() protoreflect.Message {
	mi := &file_proto_resource_manager_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Network.ProtoReflect.Descriptor instead.
func (*Network) Descriptor() ([]byte, []int) {
	return file_proto_resource_manager_proto_rawDescGZIP(), []int{72}
}

func (x *Network) GetVpcCidr() string {
	if x != nil {
		return x.VpcCidr
	}
	return ""
}

func (x *Network) GetPrivateSubnet() *Subnet {
	if x != nil {
		return x.PrivateSubnet
	}
	return nil
}

func (x *Network) GetPublicSubnet() *Subnet {
	if x != nil {
		return x.PublicSubnet
	}
	return nil
}

type K8S struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterName         string   `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
	MasterInstanceCount uint32   `protobuf:"varint,2,opt,name=master_instance_count,json=masterInstanceCount,proto3" json:"master_instance_count,omitempty"`
	InstanceSize        string   `protobuf:"bytes,3,opt,name=instance_size,json=instanceSize,proto3" json:"instance_size,omitempty"`
	WorkerInstanceCount uint32   `protobuf:"varint,4,opt,name=worker_instance_count,json=workerInstanceCount,proto3" json:"worker_instance_count,omitempty"`
	EtcdInstanceCount   uint32   `protobuf:"varint,5,opt,name=etcd_instance_count,json=etcdInstanceCount,proto3" json:"etcd_instance_count,omitempty"`
	MasterInstanceIps   []string `protobuf:"bytes,6,rep,name=master_instance_ips,json=masterInstanceIps,proto3" json:"master_instance_ips,omitempty"`
	WorkerInstanceIps   []string `protobuf:"bytes,7,rep,name=worker_instance_ips,json=workerInstanceIps,proto3" json:"worker_instance_ips,omitempty"`
	EtcdInstanceIps     []string `protobuf:"bytes,8,rep,name=etcd_instance_ips,json=etcdInstanceIps,proto3" json:"etcd_instance_ips,omitempty"`
	StorageSize         uint32   `protobuf:"varint,11,opt,name=storage_size,json=storageSize,proto3" json:"storage_size,omitempty"`
	ServiceClusterCidr  string   `protobuf:"bytes,12,opt,name=service_cluster_cidr,json=serviceClusterCidr,proto3" json:"service_cluster_cidr,omitempty"`
	PodClusterCidr      string   `protobuf:"bytes,13,opt,name=pod_cluster_cidr,json=podClusterCidr,proto3" json:"pod_cluster_cidr,omitempty"`
	NodePrefix          int32    `protobuf:"varint,14,opt,name=node_prefix,json=nodePrefix,proto3" json:"node_prefix,omitempty"`
	Template            string   `protobuf:"bytes,15,opt,name=template,proto3" json:"template,omitempty"`
	DeployFalco         bool     `protobuf:"varint,16,opt,name=deploy_falco,json=deployFalco,proto3" json:"deploy_falco,omitempty"`
	ProjectId           int32    `protobuf:"varint,17,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
}

func (x *K8S) Reset() {
	*x = K8S{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_resource_manager_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *K8S) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*K8S) ProtoMessage() {}

func (x *K8S) ProtoReflect() protoreflect.Message {
	mi := &file_proto_resource_manager_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use K8S.ProtoReflect.Descriptor instead.
func (*K8S) Descriptor() ([]byte, []int) {
	return file_proto_resource_manager_proto_rawDescGZIP(), []int{73}
}

func (x *K8S) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *K8S) GetMasterInstanceCount() uint32 {
	if x != nil {
		return x.MasterInstanceCount
	}
	return 0
}

func (x *K8S) GetInstanceSize() string {
	if x != nil {
		return x.InstanceSize
	}
	return ""
}

func (x *K8S) GetWorkerInstanceCount() uint32 {
	if x != nil {
		return x.WorkerInstanceCount
	}
	return 0
}

func (x *K8S) GetEtcdInstanceCount() uint32 {
	if x != nil {
		return x.EtcdInstanceCount
	}
	return 0
}

func (x *K8S) GetMasterInstanceIps() []string {
	if x != nil {
		return x.MasterInstanceIps
	}
	return nil
}

func (x *K8S) GetWorkerInstanceIps() []string {
	if x != nil {
		return x.WorkerInstanceIps
	}
	return nil
}

func (x *K8S) GetEtcdInstanceIps() []string {
	if x != nil {
		return x.EtcdInstanceIps
	}
	return nil
}

func (x *K8S) GetStorageSize() uint32 {
	if x != nil {
		return x.StorageSize
	}
	return 0
}

func (x *K8S) GetServiceClusterCidr() string {
	if x != nil {
		return x.ServiceClusterCidr
	}
	return ""
}

func (x *K8S) GetPodClusterCidr() string {
	if x != nil {
		return x.PodClusterCidr
	}
	return ""
}

func (x *K8S) GetNodePrefix() int32 {
	if x != nil {
		return x.NodePrefix
	}
	return 0
}

func (x *K8S) GetTemplate() string {
	if x != nil {
		return x.Template
	}
	return ""
}

func (x *K8S) GetDeployFalco() bool {
	if x != nil {
		return x.DeployFalco
	}
	return false
}

func (x *K8S) GetProjectId() int32 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

type Subnet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubnetCidr []string `protobuf:"bytes,1,rep,name=subnetCidr,proto3" json:"subnetCidr,omitempty"`
}

func (x *Subnet) Reset() {
	*x = Subnet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_resource_manager_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Subnet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subnet) ProtoMessage() {}

func (x *Subnet) ProtoReflect() protoreflect.Message {
	mi := &file_proto_resource_manager_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subnet.ProtoReflect.Descriptor instead.
func (*Subnet) Descriptor() ([]byte, []int) {
	return file_proto_resource_manager_proto_rawDescGZIP(), []int{74}
}

func (x *Subnet) GetSubnetCidr() []string {
	if x != nil {
		return x.SubnetCidr
	}
	return nil
}

type InfrastructureActionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Action  string `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *InfrastructureActionResponse) Reset() {
	*x = InfrastructureActionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_resource_manager_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InfrastructureActionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfrastructureActionResponse) ProtoMessage() {}

func (x *InfrastructureActionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_resource_manager_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfrastructureActionResponse.ProtoReflect.Descriptor instead.
func (*InfrastructureActionResponse) Descriptor() ([]byte, []int) {
	return file_proto_resource_manager_proto_rawDescGZIP(), []int{75}
}

func (x *InfrastructureActionResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *InfrastructureActionResponse) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

type KubeParameterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MasterIp       []string      `protobuf:"bytes,1,rep,name=master_ip,json=masterIp,proto3" json:"master_ip,omitempty"`
	WorkerIp       []string      `protobuf:"bytes,2,rep,name=worker_ip,json=workerIp,proto3" json:"worker_ip,omitempty"`
	EtcdIp         []string      `protobuf:"bytes,3,rep,name=etcd_ip,json=etcdIp,proto3" json:"etcd_ip,omitempty"`
	ApiserverLbdn  string        `protobuf:"bytes,5,opt,name=apiserver_lbdn,json=apiserverLbdn,proto3" json:"apiserver_lbdn,omitempty"`
	ClusterName    string        `protobuf:"bytes,6,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
	User           string        `protobuf:"bytes,8,opt,name=user,proto3" json:"user,omitempty"`
	ApiserverLbVip string        `protobuf:"bytes,9,opt,name=apiserver_lb_vip,json=apiserverLbVip,proto3" json:"apiserver_lb_vip,omitempty"`
	ClusterAction  ClusterAction `protobuf:"varint,10,opt,name=cluster_action,json=clusterAction,proto3,enum=resourceManager.ClusterAction" json:"cluster_action,omitempty"`
}

func (x *KubeParameterRequest) Reset() {
	*x = KubeParameterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_resource_manager_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubeParameterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubeParameterRequest) ProtoMessage() {}

func (x *KubeParameterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_resource_manager_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubeParameterRequest.ProtoReflect.Descriptor instead.
func (*KubeParameterRequest) Descriptor() ([]byte, []int) {
	return file_proto_resource_manager_proto_rawDescGZIP(), []int{76}
}

func (x *KubeParameterRequest) GetMasterIp() []string {
	if x != nil {
		return x.MasterIp
	}
	return nil
}

func (x *KubeParameterRequest) GetWorkerIp() []string {
	if x != nil {
		return x.WorkerIp
	}
	return nil
}

func (x *KubeParameterRequest) GetEtcdIp() []string {
	if x != nil {
		return x.EtcdIp
	}
	return nil
}

func (x *KubeParameterRequest) GetApiserverLbdn() string {
	if x != nil {
		return x.ApiserverLbdn
	}
	return ""
}

func (x *KubeParameterRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *KubeParameterRequest) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *KubeParameterRequest) GetApiserverLbVip() string {
	if x != nil {
		return x.ApiserverLbVip
	}
	return ""
}

func (x *KubeParameterRequest) GetClusterAction() ClusterAction {
	if x != nil {
		return x.ClusterAction
	}
	return ClusterAction_UnknownClusterAction
}

type KubeParameterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success    bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Kubeconfig string `protobuf:"bytes,2,opt,name=kubeconfig,proto3" json:"kubeconfig,omitempty"`
}

func (x *KubeParameterResponse) Reset() {
	*x = KubeParameterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_resource_manager_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubeParameterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubeParameterResponse) ProtoMessage() {}

func (x *KubeParameterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_resource_manager_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubeParameterResponse.ProtoReflect.Descriptor instead.
func (*KubeParameterResponse) Descriptor() ([]byte, []int) {
	return file_proto_resource_manager_proto_rawDescGZIP(), []int{77}
}

func (x *KubeParameterResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *KubeParameterResponse) GetKubeconfig() string {
	if x != nil {
		return x.Kubeconfig
	}
	return ""
}

type ClusterKongEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId string            `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	Hosts     []string          `protobuf:"bytes,2,rep,name=hosts,proto3" json:"hosts,omitempty"`
	Operation KongOperationType `protobuf:"varint,3,opt,name=operation,proto3,enum=resourceManager.KongOperationType" json:"operation,omitempty"`
}

func (x *ClusterKongEvent) Reset() {
	*x = ClusterKongEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_resource_manager_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterKongEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterKongEvent) ProtoMessage() {}

func (x *ClusterKongEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_resource_manager_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterKongEvent.ProtoReflect.Descriptor instead.
func (*ClusterKongEvent) Descriptor() ([]byte, []int) {
	return file_proto_resource_manager_proto_rawDescGZIP(), []int{78}
}

func (x *ClusterKongEvent) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ClusterKongEvent) GetHosts() []string {
	if x != nil {
		return x.Hosts
	}
	return nil
}

func (x *ClusterKongEvent) GetOperation() KongOperationType {
	if x != nil {
		return x.Operation
	}
	return KongOperationType_KongOperationTypeUnknown
}

type NodeKongEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId string            `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	Ip        string            `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	Operation KongOperationType `protobuf:"varint,3,opt,name=operation,proto3,enum=resourceManager.KongOperationType" json:"operation,omitempty"`
}

func (x *NodeKongEvent) Reset() {
	*x = NodeKongEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_resource_manager_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeKongEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeKongEvent) ProtoMessage() {}

func (x *NodeKongEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_resource_manager_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeKongEvent.ProtoReflect.Descriptor instead.
func (*NodeKongEvent) Descriptor() ([]byte, []int) {
	return file_proto_resource_manager_proto_rawDescGZIP(), []int{79}
}

func (x *NodeKongEvent) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *NodeKongEvent) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *NodeKongEvent) GetOperation() KongOperationType {
	if x != nil {
		return x.Operation
	}
	return KongOperationType_KongOperationTypeUnknown
}

var File_proto_resource_manager_proto protoreflect.FileDescriptor

var file_proto_resource_manager_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x1a,
	0x4c, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x72, 0x65, 0x79, 0x6e, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x72, 0x74, 0x2f, 0x72,
	0x63, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2d, 0x6c, 0x69, 0x62, 0x2f, 0x76, 0x32, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x4a, 0x76,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x72, 0x65, 0x79, 0x6e, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x72, 0x74, 0x2f, 0x72, 0x63, 0x2d,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2d, 0x6c, 0x69, 0x62, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x65,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4e, 0x0a, 0x0e, 0x4d, 0x6f, 0x76, 0x65, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0x2a, 0x0a, 0x0e, 0x4d, 0x6f, 0x76, 0x65, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x22, 0x29, 0x0a, 0x0d, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x35,
	0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0x4b, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x12, 0x33, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0xc1, 0x03, 0x0a, 0x0e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3a, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15,
	0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x69, 0x73, 0x5f, 0x68, 0x61, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x04, 0x69, 0x73, 0x48, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x36, 0x0a, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63,
	0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x3c,
	0x0a, 0x0b, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52,
	0x0b, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x38, 0x0a, 0x09,
	0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x09, 0x61, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x22, 0x4d, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xb3, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2f,
	0x0a, 0x13, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63,
	0x68, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x2b, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x0e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x88, 0x04, 0x0a, 0x04,
	0x4e, 0x6f, 0x64, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x52, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x2b, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0e, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75,
	0x72, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x6b, 0x50,
	0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x69, 0x64, 0x5f, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x70,
	0x69, 0x64, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x6e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x61, 0x64, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f,
	0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x2e, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x6e, 0x6f,
	0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x10, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x47, 0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x38, 0x0a, 0x09,
	0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x09, 0x61, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x22, 0x85, 0x01, 0x0a, 0x09, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x03, 0x63, 0x70, 0x75, 0x12, 0x2a, 0x0a, 0x06, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x26, 0x0a, 0x04, 0x64, 0x69, 0x73, 0x6b, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x04, 0x64, 0x69, 0x73, 0x6b, 0x22, 0x11,
	0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x71, 0x22, 0x47, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xcb, 0x02, 0x0a, 0x0f, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x21,
	0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x2e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x3a, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x05,
	0x69, 0x73, 0x5f, 0x68, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x69, 0x73, 0x48,
	0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x37, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0x83, 0x02, 0x0a, 0x10, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x39, 0x0a,
	0x06, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x52, 0x06, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x04, 0x65, 0x74, 0x63, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x04, 0x65, 0x74, 0x63, 0x64, 0x12,
	0x39, 0x0a, 0x06, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x52, 0x06, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x0b, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x52, 0x0b, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x32,
	0x0a, 0x0f, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x75, 0x0a, 0x10, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x5f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x6e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x5f, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x69,
	0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x37, 0x0a, 0x16, 0x49, 0x73, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65,
	0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x22, 0x30, 0x0a, 0x16, 0x49, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x52, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x75, 0x6e,
	0x69, 0x71, 0x75, 0x65, 0x22, 0xc8, 0x01, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b,
	0x38, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3a, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x08,
	0x6b, 0x38, 0x73, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x4b, 0x38, 0x73, 0x53, 0x70, 0x65, 0x63, 0x52, 0x07, 0x6b, 0x38, 0x73, 0x53, 0x70, 0x65,
	0x63, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x22,
	0x96, 0x01, 0x0a, 0x1a, 0x41, 0x64, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x6f, 0x4b, 0x38, 0x73,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3a, 0x0a,
	0x08, 0x6b, 0x38, 0x73, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x41, 0x64, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x4b, 0x38, 0x73, 0x53, 0x70, 0x65, 0x63,
	0x52, 0x07, 0x6b, 0x38, 0x73, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x22, 0xbc, 0x01, 0x0a, 0x0e, 0x41, 0x64, 0x64,
	0x4e, 0x6f, 0x64, 0x65, 0x4b, 0x38, 0x73, 0x53, 0x70, 0x65, 0x63, 0x12, 0x32, 0x0a, 0x15, 0x77,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x77, 0x6f, 0x72, 0x6b,
	0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x77, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x70, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x49, 0x70, 0x73, 0x22, 0x37, 0x0a, 0x1b, 0x41, 0x64, 0x64, 0x4e, 0x6f,
	0x64, 0x65, 0x54, 0x6f, 0x4b, 0x38, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x22, 0xf3, 0x04, 0x0a, 0x07, 0x4b, 0x38, 0x73, 0x53, 0x70, 0x65, 0x63, 0x12, 0x21, 0x0a, 0x0c,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x32, 0x0a, 0x15, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x13, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x65, 0x74, 0x63, 0x64, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x65, 0x74, 0x63, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x2e, 0x0a, 0x13, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x69, 0x70, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x70, 0x73, 0x12,
	0x2e, 0x0a, 0x13, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x69, 0x70, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x77, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x70, 0x73, 0x12,
	0x2a, 0x0a, 0x11, 0x65, 0x74, 0x63, 0x64, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x69, 0x70, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x74, 0x63, 0x64,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x70, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x63,
	0x69, 0x64, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x69, 0x64, 0x72, 0x12, 0x28, 0x0a,
	0x10, 0x70, 0x6f, 0x64, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x69, 0x64,
	0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x6f, 0x64, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x43, 0x69, 0x64, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6e, 0x6f,
	0x64, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x5f, 0x66,
	0x61, 0x6c, 0x63, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x46, 0x61, 0x6c, 0x63, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0x53, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4b, 0x38, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0x64, 0x0a, 0x1c, 0x55,
	0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x72, 0x61, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x6b, 0x75, 0x62, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6b, 0x75, 0x62, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x39, 0x0a, 0x1d, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x72,
	0x61, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x50, 0x0a, 0x10,
	0x43, 0x61, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71,
	0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0x5b,
	0x0a, 0x10, 0x43, 0x61, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x73, 0x12, 0x47, 0x0a, 0x0d, 0x71, 0x6f, 0x73, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f,
	0x6e, 0x51, 0x6f, 0x73, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x0c, 0x71,
	0x6f, 0x73, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x22, 0xed, 0x01, 0x0a, 0x13,
	0x41, 0x6d, 0x53, 0x6d, 0x74, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x53,
	0x6d, 0x74, 0x70, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x53, 0x6d, 0x74, 0x70, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x53, 0x6d, 0x74, 0x70, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x53, 0x6d, 0x74, 0x70, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x54,
	0x6c, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x54, 0x6c, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x26, 0x0a, 0x14, 0x41,
	0x6d, 0x53, 0x6d, 0x74, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x4f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x02, 0x4f, 0x6b, 0x22, 0x2d, 0x0a, 0x17, 0x57, 0x72, 0x69, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x69, 0x6e,
	0x66, 0x6f, 0x22, 0x2a, 0x0a, 0x18, 0x57, 0x72, 0x69, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b, 0x22, 0x43,
	0x0a, 0x1e, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x6b, 0x43, 0x65, 0x70, 0x68, 0x44, 0x61, 0x73,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71,
	0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x3c, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x6b, 0x43, 0x65,
	0x70, 0x68, 0x44, 0x61, 0x73, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x52, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x22, 0x30, 0x0a, 0x0f, 0x4c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x22, 0x7e, 0x0a, 0x0b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x6f,
	0x63, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x74, 0x69, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x69, 0x6c, 0x12, 0x1b,
	0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x9d, 0x01, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x22, 0x31, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x55, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x33, 0x0a,
	0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x22, 0x55, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0x33, 0x0a, 0x17, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x4b,
	0x0a, 0x0d, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0x20, 0x0a, 0x0e, 0x4e,
	0x6f, 0x64, 0x65, 0x49, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x22, 0x10, 0x0a,
	0x0e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x65, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x22, 0x0e, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x52, 0x63, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x22, 0x2a, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x52, 0x63, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x75, 0x0a, 0x13, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x6e, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6e, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x26, 0x0a, 0x14, 0x41, 0x70, 0x70,
	0x6c, 0x79, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f,
	0x6b, 0x22, 0x30, 0x0a, 0x0f, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x50, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x22, 0x22, 0x0a, 0x10, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x50, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x22, 0x39, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4b, 0x75,
	0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x22, 0x31, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0x4f, 0x0a, 0x11, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0d, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x15, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x2e, 0x0a, 0x12, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x50, 0x0a, 0x12, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0d,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x3a, 0x0a, 0x13, 0x4d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x22, 0x0f, 0x0a, 0x0d, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x20, 0x0a, 0x0e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x6f, 0x6b, 0x22, 0x72, 0x0a, 0x11, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6e,
	0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09,
	0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x6f, 0x72,
	0x63, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x22, 0x6d, 0x0a, 0x13, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x38, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22, 0x2f, 0x0a, 0x13, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4b, 0x38, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0xc7, 0x01, 0x0a, 0x0f,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x40, 0x0a, 0x1b, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65,
	0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x1b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x73, 0x69,
	0x6e, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x3c, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x73, 0x74, 0x65, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x73, 0x74, 0x65, 0x70, 0x22, 0x69, 0x0a, 0x19, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4c, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x10,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x39, 0x0a, 0x18, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0x30, 0x0a, 0x0b, 0x4c,
	0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x56, 0x0a,
	0x0c, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x6f,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x22, 0x30, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0x79, 0x0a, 0x0b, 0x47, 0x43, 0x50, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x67, 0x63, 0x70, 0x5f, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x67, 0x63, 0x70, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73,
	0x12, 0x20, 0x0a, 0x0b, 0x67, 0x63, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x63, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x63, 0x70, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x67, 0x63, 0x70, 0x5f, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x22, 0x2c, 0x0a, 0x0b, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x22, 0xab, 0x01, 0x0a, 0x18, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a,
	0x0e, 0x6b, 0x38, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4b, 0x38, 0x73, 0x52, 0x0d, 0x6b, 0x38, 0x73,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f,
	0x72, 0x63, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x63,
	0x65, 0x64, 0x12, 0x3a, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x9f,
	0x01, 0x0a, 0x07, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x70,
	0x63, 0x43, 0x69, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x70, 0x63,
	0x43, 0x69, 0x64, 0x72, 0x12, 0x3d, 0x0a, 0x0d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x53,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x53, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x12, 0x3b, 0x0a, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x53, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x53, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x52, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x22, 0xef, 0x04, 0x0a, 0x03, 0x4b, 0x38, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x13, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x65, 0x74, 0x63, 0x64,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x65, 0x74, 0x63, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x70, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x70, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x77, 0x6f, 0x72, 0x6b,
	0x65, 0x72, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x70, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x70, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x65, 0x74, 0x63, 0x64,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x70, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x74, 0x63, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x49, 0x70, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x69, 0x64, 0x72, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x69, 0x64, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x6f, 0x64,
	0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x69, 0x64, 0x72, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x6f, 0x64, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43,
	0x69, 0x64, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x5f, 0x66, 0x61, 0x6c, 0x63, 0x6f,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x46, 0x61,
	0x6c, 0x63, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x22, 0x28, 0x0a, 0x06, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x43, 0x69, 0x64, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x43, 0x69, 0x64, 0x72, 0x22, 0x50, 0x0a, 0x1c,
	0x49, 0x6e, 0x66, 0x72, 0x61, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb8,
	0x02, 0x0a, 0x14, 0x4b, 0x75, 0x62, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x69, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x69,
	0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49,
	0x70, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x74, 0x63, 0x64, 0x5f, 0x69, 0x70, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x06, 0x65, 0x74, 0x63, 0x64, 0x49, 0x70, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x70,
	0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6c, 0x62, 0x64, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x61, 0x70, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x62, 0x64,
	0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x70, 0x69, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6c, 0x62, 0x5f, 0x76, 0x69, 0x70, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x61, 0x70, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x62, 0x56,
	0x69, 0x70, 0x12, 0x45, 0x0a, 0x0e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x51, 0x0a, 0x15, 0x4b, 0x75, 0x62,
	0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x6b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x89, 0x01, 0x0a,
	0x10, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4b, 0x6f, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x05, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x40, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4b, 0x6f, 0x6e, 0x67,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x80, 0x01, 0x0a, 0x0d, 0x4e, 0x6f, 0x64,
	0x65, 0x4b, 0x6f, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x40, 0x0a, 0x09, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4b,
	0x6f, 0x6e, 0x67, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2a, 0x42, 0x0a, 0x08, 0x4e,
	0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x4e, 0x6f, 0x64, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x45, 0x74, 0x63,
	0x64, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x10, 0x03, 0x2a,
	0x6b, 0x0a, 0x0d, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x18, 0x0a, 0x14, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x4e, 0x6f, 0x64,
	0x65, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4e, 0x6f, 0x64,
	0x65, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x10, 0x04, 0x12,
	0x0b, 0x0a, 0x07, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x10, 0x05, 0x2a, 0x92, 0x02, 0x0a,
	0x0d, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x65, 0x70, 0x12, 0x19,
	0x0a, 0x15, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x65, 0x70, 0x5f,
	0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x6e, 0x69,
	0x74, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x4e, 0x53, 0x49, 0x42, 0x4c, 0x45, 0x5f, 0x41,
	0x50, 0x50, 0x4c, 0x59, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4f, 0x50, 0x59, 0x49, 0x4e,
	0x47, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54,
	0x45, 0x50, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0f,
	0x0a, 0x0b, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x05, 0x12,
	0x1a, 0x0a, 0x16, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45,
	0x52, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x44,
	0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x45, 0x44, 0x10, 0x07, 0x12, 0x10, 0x0a, 0x0c, 0x56, 0x4d, 0x5f, 0x52, 0x45, 0x51,
	0x55, 0x45, 0x53, 0x54, 0x45, 0x44, 0x10, 0x08, 0x12, 0x0e, 0x0a, 0x0a, 0x56, 0x4d, 0x5f, 0x43,
	0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x10, 0x09, 0x12, 0x1b, 0x0a, 0x17, 0x55, 0x50, 0x47, 0x52,
	0x41, 0x44, 0x45, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x52,
	0x54, 0x45, 0x44, 0x10, 0x0a, 0x12, 0x1a, 0x0a, 0x16, 0x55, 0x50, 0x47, 0x52, 0x41, 0x44, 0x45,
	0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10,
	0x0b, 0x2a, 0xd7, 0x02, 0x0a, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x65, 0x70, 0x12, 0x14,
	0x0a, 0x10, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x65, 0x70, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x65, 0x70,
	0x5f, 0x41, 0x44, 0x44, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45,
	0x44, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x65, 0x70, 0x5f,
	0x41, 0x44, 0x44, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10,
	0x03, 0x12, 0x20, 0x0a, 0x1c, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x65, 0x70, 0x5f, 0x52, 0x45,
	0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45,
	0x44, 0x10, 0x04, 0x12, 0x1f, 0x0a, 0x1b, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x65, 0x70, 0x5f,
	0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c,
	0x45, 0x44, 0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x65, 0x70,
	0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x07, 0x12, 0x18, 0x0a, 0x14, 0x4e, 0x6f, 0x64, 0x65,
	0x53, 0x74, 0x65, 0x70, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44,
	0x10, 0x08, 0x12, 0x14, 0x0a, 0x10, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x65, 0x70, 0x5f, 0x55,
	0x4e, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x09, 0x12, 0x18, 0x0a, 0x14, 0x4e, 0x6f, 0x64, 0x65,
	0x53, 0x74, 0x65, 0x70, 0x5f, 0x55, 0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45,
	0x10, 0x0a, 0x12, 0x20, 0x0a, 0x1c, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x65, 0x70, 0x5f, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x55, 0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42,
	0x4c, 0x45, 0x10, 0x0b, 0x12, 0x1e, 0x0a, 0x1a, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x65, 0x70,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x54, 0x4f, 0x5f, 0x41, 0x43, 0x51, 0x55, 0x49,
	0x52, 0x45, 0x10, 0x0c, 0x12, 0x15, 0x0a, 0x11, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x65, 0x70,
	0x5f, 0x41, 0x43, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x0d, 0x2a, 0xed, 0x01, 0x0a, 0x0d,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a,
	0x15, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x55,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x6c, 0x69, 0x73, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x04, 0x12, 0x17, 0x0a,
	0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x46, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x10, 0x05, 0x12, 0x1b, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x10, 0x06, 0x12, 0x1a, 0x0a, 0x16, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x10, 0x07, 0x12,
	0x1a, 0x0a, 0x16, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x10, 0x08, 0x2a, 0xeb, 0x01, 0x0a, 0x0a,
	0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x4e, 0x6f,
	0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x73, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x12, 0x09,
	0x0a, 0x05, 0x52, 0x65, 0x61, 0x64, 0x79, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x4e, 0x6f, 0x64,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x04, 0x12,
	0x16, 0x0a, 0x12, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x6f, 0x74,
	0x52, 0x65, 0x61, 0x64, 0x79, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x4e, 0x6f,
	0x64, 0x65, 0x49, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x10, 0x06, 0x12, 0x11,
	0x0a, 0x0d, 0x41, 0x64, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10,
	0x07, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x49,
	0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x10, 0x08, 0x12, 0x14, 0x0a, 0x10, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10,
	0x09, 0x12, 0x16, 0x0a, 0x12, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x55, 0x6e, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x0a, 0x2a, 0x6b, 0x0a, 0x11, 0x4b, 0x6f, 0x6e,
	0x67, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c,
	0x0a, 0x18, 0x4b, 0x6f, 0x6e, 0x67, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17,
	0x4b, 0x6f, 0x6e, 0x67, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x4b, 0x6f, 0x6e,
	0x67, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x10, 0x02, 0x32, 0xf8, 0x1b, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x69, 0x0a, 0x10, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4b, 0x38, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x28,
	0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x38, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4b, 0x38, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x08, 0x41, 0x64, 0x64, 0x4e, 0x6f, 0x64, 0x65,
	0x73, 0x12, 0x2b, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x6f, 0x4b, 0x38, 0x73,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c,
	0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x41, 0x64, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x6f, 0x4b, 0x38, 0x73, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x60,
	0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x38, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x12, 0x24, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x38, 0x73, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4b, 0x38, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x22, 0x00,
	0x12, 0x52, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x20, 0x2e,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x21, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x0b, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x73, 0x12, 0x22, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x0d, 0x43, 0x61, 0x6e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x2e, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x6e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x43, 0x61, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73,
	0x22, 0x00, 0x12, 0x51, 0x0a, 0x0b, 0x4d, 0x6f, 0x76, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x12, 0x1f, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x48, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x12, 0x1e, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4b, 0x75, 0x62, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x21, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x75, 0x62, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4b,
	0x75, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x55,
	0x0a, 0x0c, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x50, 0x73, 0x12, 0x20,
	0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x21, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65,
	0x49, 0x50, 0x12, 0x1e, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x52, 0x63, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1d, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x71, 0x1a, 0x1d, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73,
	0x22, 0x00, 0x12, 0x51, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x12, 0x1f, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x20, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x27, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x28, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x66, 0x0a,
	0x0f, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73,
	0x12, 0x27, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x27, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x28, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4f, 0x0a,
	0x0b, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x2e, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c,
	0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c,
	0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x6b, 0x22, 0x00, 0x12, 0x69,
	0x0a, 0x10, 0x57, 0x72, 0x69, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x28, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x12, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x41, 0x6d, 0x53, 0x4d, 0x54, 0x50, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x24, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x41, 0x6d, 0x53, 0x6d, 0x74, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x41, 0x6d, 0x53, 0x6d, 0x74, 0x70, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x69,
	0x0a, 0x13, 0x49, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x55,
	0x6e, 0x69, 0x71, 0x75, 0x65, 0x12, 0x27, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x49, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x27,
	0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x49, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x55, 0x6e,
	0x69, 0x71, 0x75, 0x65, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x0c, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x20, 0x2e, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12,
	0x63, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x12, 0x25, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52,
	0x65, 0x73, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x12, 0x22, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x0b, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x23, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x42, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x2d,
	0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x42, 0x79, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x0d, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x25, 0x2e, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x27, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x0d,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x25, 0x2e,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x71, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x2d, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x55, 0x0a, 0x0b, 0x54, 0x65, 0x73, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x12, 0x23, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x0f, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x27, 0x2e, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x5d, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x12, 0x27, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x66, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x12, 0x27, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x28, 0x2e, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x6b, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x2a, 0x2e, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x63, 0x0a, 0x0e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x56,
	0x43, 0x73, 0x12, 0x26, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50,
	0x56, 0x43, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x56, 0x43, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6c, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x65, 0x72, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x29, 0x2e, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x65, 0x72, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x6c, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x65, 0x72, 0x55, 0x73, 0x65, 0x64, 0x42, 0x79, 0x12, 0x29, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x55, 0x73, 0x65, 0x64, 0x42, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x65,
	0x72, 0x55, 0x73, 0x65, 0x64, 0x42, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x42, 0x45, 0x5a, 0x43, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x72, 0x65, 0x79, 0x6e, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x72, 0x74, 0x2f, 0x72, 0x63, 0x2d, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f,
	0x76, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_resource_manager_proto_rawDescOnce sync.Once
	file_proto_resource_manager_proto_rawDescData = file_proto_resource_manager_proto_rawDesc
)

func file_proto_resource_manager_proto_rawDescGZIP() []byte {
	file_proto_resource_manager_proto_rawDescOnce.Do(func() {
		file_proto_resource_manager_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_resource_manager_proto_rawDescData)
	})
	return file_proto_resource_manager_proto_rawDescData
}

var file_proto_resource_manager_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_proto_resource_manager_proto_msgTypes = make([]protoimpl.MessageInfo, 80)
var file_proto_resource_manager_proto_goTypes = []interface{}{
	(NodeType)(0),                             // 0: resourceManager.NodeType
	(ClusterAction)(0),                        // 1: resourceManager.ClusterAction
	(ProvisionStep)(0),                        // 2: resourceManager.ProvisionStep
	(NodeStep)(0),                             // 3: resourceManager.NodeStep
	(ClusterStatus)(0),                        // 4: resourceManager.ClusterStatus
	(NodeStatus)(0),                           // 5: resourceManager.NodeStatus
	(KongOperationType)(0),                    // 6: resourceManager.KongOperationType
	(*MoveClusterReq)(nil),                    // 7: resourceManager.MoveClusterReq
	(*MoveClusterRes)(nil),                    // 8: resourceManager.MoveClusterRes
	(*RemoveNodeRes)(nil),                     // 9: resourceManager.RemoveNodeRes
	(*GetClusterDetailsReq)(nil),              // 10: resourceManager.GetClusterDetailsReq
	(*GetClusterDetailsRes)(nil),              // 11: resourceManager.GetClusterDetailsRes
	(*ClusterDetails)(nil),                    // 12: resourceManager.ClusterDetails
	(*ListNodeResponse)(nil),                  // 13: resourceManager.ListNodeResponse
	(*ListNodeResponseData)(nil),              // 14: resourceManager.ListNodeResponseData
	(*Node)(nil),                              // 15: resourceManager.Node
	(*Resources)(nil),                         // 16: resourceManager.Resources
	(*ListClustersReq)(nil),                   // 17: resourceManager.ListClustersReq
	(*ListClustersRes)(nil),                   // 18: resourceManager.ListClustersRes
	(*ClusterMetadata)(nil),                   // 19: resourceManager.ClusterMetadata
	(*ClusterMetaStats)(nil),                  // 20: resourceManager.ClusterMetaStats
	(*DeploymentStats)(nil),                   // 21: resourceManager.DeploymentStats
	(*ClusterNodeStats)(nil),                  // 22: resourceManager.ClusterNodeStats
	(*IsClusterNameUniqueReq)(nil),            // 23: resourceManager.IsClusterNameUniqueReq
	(*IsClusterNameUniqueRes)(nil),            // 24: resourceManager.IsClusterNameUniqueRes
	(*CreateK8SClusterRequest)(nil),           // 25: resourceManager.CreateK8sClusterRequest
	(*AddNodeToK8SClusterRequest)(nil),        // 26: resourceManager.AddNodeToK8sClusterRequest
	(*AddNodeK8SSpec)(nil),                    // 27: resourceManager.AddNodeK8sSpec
	(*AddNodeToK8SClusterResponse)(nil),       // 28: resourceManager.AddNodeToK8sClusterResponse
	(*K8SSpec)(nil),                           // 29: resourceManager.K8sSpec
	(*CreateK8SClusterResponse)(nil),          // 30: resourceManager.CreateK8sClusterResponse
	(*UpgradeInfrastructureRequest)(nil),      // 31: resourceManager.UpgradeInfrastructureRequest
	(*UpgradeInfrastructureResponse)(nil),     // 32: resourceManager.UpgradeInfrastructureResponse
	(*CanDeleteNodeReq)(nil),                  // 33: resourceManager.CanDeleteNodeReq
	(*CanDeleteNodeRes)(nil),                  // 34: resourceManager.CanDeleteNodeRes
	(*AmSmtpConfigRequest)(nil),               // 35: resourceManager.AmSmtpConfigRequest
	(*AmSmtpConfigResponse)(nil),              // 36: resourceManager.AmSmtpConfigResponse
	(*WriteCloudConfigRequest)(nil),           // 37: resourceManager.WriteCloudConfigRequest
	(*WriteCloudConfigResponse)(nil),          // 38: resourceManager.WriteCloudConfigResponse
	(*GetRookCephDasboardPasswordReq)(nil),    // 39: resourceManager.GetRookCephDasboardPasswordReq
	(*GetRookCephDasboardPasswordRes)(nil),    // 40: resourceManager.GetRookCephDasboardPasswordRes
	(*LockInfoRequest)(nil),                   // 41: resourceManager.LockInfoRequest
	(*ClusterLock)(nil),                       // 42: resourceManager.ClusterLock
	(*DeleteIngressRequest)(nil),              // 43: resourceManager.DeleteIngressRequest
	(*DeleteIngressResponse)(nil),             // 44: resourceManager.DeleteIngressResponse
	(*DeleteNamespaceRequest)(nil),            // 45: resourceManager.DeleteNamespaceRequest
	(*DeleteNamespaceResponse)(nil),           // 46: resourceManager.DeleteNamespaceResponse
	(*CreateNamespaceRequest)(nil),            // 47: resourceManager.CreateNamespaceRequest
	(*CreateNamespaceResponse)(nil),           // 48: resourceManager.CreateNamespaceResponse
	(*NodeIPRequest)(nil),                     // 49: resourceManager.NodeIPRequest
	(*NodeIPResponse)(nil),                    // 50: resourceManager.NodeIPResponse
	(*ProfileRequest)(nil),                    // 51: resourceManager.ProfileRequest
	(*ProfileResponse)(nil),                   // 52: resourceManager.ProfileResponse
	(*GetRcInfoReq)(nil),                      // 53: resourceManager.GetRcInfoReq
	(*GetRcInfoRes)(nil),                      // 54: resourceManager.GetRcInfoRes
	(*ApplyIngressRequest)(nil),               // 55: resourceManager.ApplyIngressRequest
	(*ApplyIngressResponse)(nil),              // 56: resourceManager.ApplyIngressResponse
	(*WorkerIPRequest)(nil),                   // 57: resourceManager.WorkerIPRequest
	(*WorkerIPResponse)(nil),                  // 58: resourceManager.WorkerIPResponse
	(*GetKubeConfigRes)(nil),                  // 59: resourceManager.GetKubeConfigRes
	(*GetKubeConfigReq)(nil),                  // 60: resourceManager.GetKubeConfigReq
	(*RegionTypeRequest)(nil),                 // 61: resourceManager.RegionTypeRequest
	(*RegionTypeResponse)(nil),                // 62: resourceManager.RegionTypeResponse
	(*MachineTypeRequest)(nil),                // 63: resourceManager.MachineTypeRequest
	(*MachineTypeResponse)(nil),               // 64: resourceManager.MachineTypeResponse
	(*HealthRequest)(nil),                     // 65: resourceManager.HealthRequest
	(*HealthResponse)(nil),                    // 66: resourceManager.HealthResponse
	(*RemoveNodeRequest)(nil),                 // 67: resourceManager.RemoveNodeRequest
	(*DeleteK8SClusterReq)(nil),               // 68: resourceManager.DeleteK8sClusterReq
	(*DeleteK8SClusterRes)(nil),               // 69: resourceManager.DeleteK8sClusterRes
	(*ProvisionStatus)(nil),                   // 70: resourceManager.ProvisionStatus
	(*ProvisioningStateResponse)(nil),         // 71: resourceManager.ProvisioningStateResponse
	(*ProvisioningStateRequest)(nil),          // 72: resourceManager.ProvisioningStateRequest
	(*LogsRequest)(nil),                       // 73: resourceManager.LogsRequest
	(*LogsResponse)(nil),                      // 74: resourceManager.LogsResponse
	(*ListNodeRequest)(nil),                   // 75: resourceManager.ListNodeRequest
	(*GCPProvider)(nil),                       // 76: resourceManager.GCPProvider
	(*NodeRequest)(nil),                       // 77: resourceManager.NodeRequest
	(*InstanceParameterRequest)(nil),          // 78: resourceManager.InstanceParameterRequest
	(*Network)(nil),                           // 79: resourceManager.Network
	(*K8S)(nil),                               // 80: resourceManager.K8s
	(*Subnet)(nil),                            // 81: resourceManager.Subnet
	(*InfrastructureActionResponse)(nil),      // 82: resourceManager.InfrastructureActionResponse
	(*KubeParameterRequest)(nil),              // 83: resourceManager.KubeParameterRequest
	(*KubeParameterResponse)(nil),             // 84: resourceManager.KubeParameterResponse
	(*ClusterKongEvent)(nil),                  // 85: resourceManager.ClusterKongEvent
	(*NodeKongEvent)(nil),                     // 86: resourceManager.NodeKongEvent
	(cluster.ClusterStatus)(0),                // 87: cluster.ClusterStatus
	(cluster.ProviderType)(0),                 // 88: cluster.ProviderType
	(cluster.NodeStatus)(0),                   // 89: cluster.NodeStatus
	(cluster.NodeType)(0),                     // 90: cluster.NodeType
	(*resource.Resource)(nil),                 // 91: resource.Resource
	(*resource.NodeDeletionQosIndicator)(nil), // 92: resource.NodeDeletionQosIndicator
	(*AddStorageRequest)(nil),                 // 93: resourceManager.AddStorageRequest
	(*ListStorageRequest)(nil),                // 94: resourceManager.ListStorageRequest
	(*GetStorageByStorageIdRequest)(nil),      // 95: resourceManager.GetStorageByStorageIdRequest
	(*UpdateStorageRequest)(nil),              // 96: resourceManager.UpdateStorageRequest
	(*DeleteStorageRequest)(nil),              // 97: resourceManager.DeleteStorageRequest
	(*UpdateStorageProjectsRequest)(nil),      // 98: resourceManager.UpdateStorageProjectsRequest
	(*TestStorageRequest)(nil),                // 99: resourceManager.TestStorageRequest
	(*StorageProjectsRequest)(nil),            // 100: resourceManager.StorageProjectsRequest
	(*AddStorageClassRequest)(nil),            // 101: resourceManager.AddStorageClassRequest
	(*GetStorageClassRequest)(nil),            // 102: resourceManager.GetStorageClassRequest
	(*ListStorageClassRequest)(nil),           // 103: resourceManager.ListStorageClassRequest
	(*DeleteStorageClassRequest)(nil),         // 104: resourceManager.DeleteStorageClassRequest
	(*DeploymentPVCsRequest)(nil),             // 105: resourceManager.DeploymentPVCsRequest
	(*ProvisionerExistsRequest)(nil),          // 106: resourceManager.ProvisionerExistsRequest
	(*ProvisionerUsedByRequest)(nil),          // 107: resourceManager.ProvisionerUsedByRequest
	(*ActionResponse)(nil),                    // 108: resourceManager.ActionResponse
	(*ListStorageResponse)(nil),               // 109: resourceManager.ListStorageResponse
	(*Storage)(nil),                           // 110: resourceManager.Storage
	(*DetailedActionResponse)(nil),            // 111: resourceManager.DetailedActionResponse
	(*StorageProjectsResponse)(nil),           // 112: resourceManager.StorageProjectsResponse
	(*GetStorageClassResponse)(nil),           // 113: resourceManager.GetStorageClassResponse
	(*ListStorageClassResponse)(nil),          // 114: resourceManager.ListStorageClassResponse
	(*DeploymentPVCsResponse)(nil),            // 115: resourceManager.DeploymentPVCsResponse
	(*ProvisionerExistsResponse)(nil),         // 116: resourceManager.ProvisionerExistsResponse
	(*ProvisionerUsedByResponse)(nil),         // 117: resourceManager.ProvisionerUsedByResponse
}
var file_proto_resource_manager_proto_depIdxs = []int32{
	12,  // 0: resourceManager.GetClusterDetailsRes.data:type_name -> resourceManager.ClusterDetails
	87,  // 1: resourceManager.ClusterDetails.status:type_name -> cluster.ClusterStatus
	88,  // 2: resourceManager.ClusterDetails.provider_type:type_name -> cluster.ProviderType
	16,  // 3: resourceManager.ClusterDetails.capacity:type_name -> resourceManager.Resources
	16,  // 4: resourceManager.ClusterDetails.allocatable:type_name -> resourceManager.Resources
	16,  // 5: resourceManager.ClusterDetails.allocated:type_name -> resourceManager.Resources
	14,  // 6: resourceManager.ListNodeResponse.data:type_name -> resourceManager.ListNodeResponseData
	15,  // 7: resourceManager.ListNodeResponseData.nodes:type_name -> resourceManager.Node
	87,  // 8: resourceManager.ListNodeResponseData.cluster_status:type_name -> cluster.ClusterStatus
	16,  // 9: resourceManager.Node.capacity:type_name -> resourceManager.Resources
	89,  // 10: resourceManager.Node.status:type_name -> cluster.NodeStatus
	90,  // 11: resourceManager.Node.node_type:type_name -> cluster.NodeType
	16,  // 12: resourceManager.Node.total_allocatable:type_name -> resourceManager.Resources
	16,  // 13: resourceManager.Node.allocated:type_name -> resourceManager.Resources
	91,  // 14: resourceManager.Resources.cpu:type_name -> resource.Resource
	91,  // 15: resourceManager.Resources.memory:type_name -> resource.Resource
	91,  // 16: resourceManager.Resources.disk:type_name -> resource.Resource
	19,  // 17: resourceManager.ListClustersRes.data:type_name -> resourceManager.ClusterMetadata
	87,  // 18: resourceManager.ClusterMetadata.status:type_name -> cluster.ClusterStatus
	88,  // 19: resourceManager.ClusterMetadata.provider_type:type_name -> cluster.ProviderType
	20,  // 20: resourceManager.ClusterMetadata.stats:type_name -> resourceManager.ClusterMetaStats
	22,  // 21: resourceManager.ClusterMetaStats.master:type_name -> resourceManager.ClusterNodeStats
	22,  // 22: resourceManager.ClusterMetaStats.etcd:type_name -> resourceManager.ClusterNodeStats
	22,  // 23: resourceManager.ClusterMetaStats.worker:type_name -> resourceManager.ClusterNodeStats
	21,  // 24: resourceManager.ClusterMetaStats.deployments:type_name -> resourceManager.DeploymentStats
	88,  // 25: resourceManager.CreateK8sClusterRequest.provider_type:type_name -> cluster.ProviderType
	29,  // 26: resourceManager.CreateK8sClusterRequest.k8s_spec:type_name -> resourceManager.K8sSpec
	27,  // 27: resourceManager.AddNodeToK8sClusterRequest.k8s_spec:type_name -> resourceManager.AddNodeK8sSpec
	92,  // 28: resourceManager.CanDeleteNodeRes.qos_indicator:type_name -> resource.NodeDeletionQosIndicator
	88,  // 29: resourceManager.ProfileResponse.provider_type:type_name -> cluster.ProviderType
	88,  // 30: resourceManager.RegionTypeRequest.provider_type:type_name -> cluster.ProviderType
	88,  // 31: resourceManager.MachineTypeRequest.provider_type:type_name -> cluster.ProviderType
	4,   // 32: resourceManager.ProvisionStatus.last_step:type_name -> resourceManager.ClusterStatus
	70,  // 33: resourceManager.ProvisioningStateResponse.provision_status:type_name -> resourceManager.ProvisionStatus
	80,  // 34: resourceManager.InstanceParameterRequest.k8s_definition:type_name -> resourceManager.K8s
	88,  // 35: resourceManager.InstanceParameterRequest.provider_type:type_name -> cluster.ProviderType
	81,  // 36: resourceManager.Network.privateSubnet:type_name -> resourceManager.Subnet
	81,  // 37: resourceManager.Network.publicSubnet:type_name -> resourceManager.Subnet
	1,   // 38: resourceManager.KubeParameterRequest.cluster_action:type_name -> resourceManager.ClusterAction
	6,   // 39: resourceManager.ClusterKongEvent.operation:type_name -> resourceManager.KongOperationType
	6,   // 40: resourceManager.NodeKongEvent.operation:type_name -> resourceManager.KongOperationType
	25,  // 41: resourceManager.ResourceManager.CreateK8sCluster:input_type -> resourceManager.CreateK8sClusterRequest
	26,  // 42: resourceManager.ResourceManager.AddNodes:input_type -> resourceManager.AddNodeToK8sClusterRequest
	68,  // 43: resourceManager.ResourceManager.DeleteK8sCluster:input_type -> resourceManager.DeleteK8sClusterReq
	75,  // 44: resourceManager.ResourceManager.ListNodes:input_type -> resourceManager.ListNodeRequest
	67,  // 45: resourceManager.ResourceManager.RemoveNodes:input_type -> resourceManager.RemoveNodeRequest
	33,  // 46: resourceManager.ResourceManager.CanDeleteNode:input_type -> resourceManager.CanDeleteNodeReq
	7,   // 47: resourceManager.ResourceManager.MoveCluster:input_type -> resourceManager.MoveClusterReq
	65,  // 48: resourceManager.ResourceManager.GetHealth:input_type -> resourceManager.HealthRequest
	60,  // 49: resourceManager.ResourceManager.GetKubeConfig:input_type -> resourceManager.GetKubeConfigReq
	57,  // 50: resourceManager.ResourceManager.GetWorkerIPs:input_type -> resourceManager.WorkerIPRequest
	49,  // 51: resourceManager.ResourceManager.GetNodeIP:input_type -> resourceManager.NodeIPRequest
	53,  // 52: resourceManager.ResourceManager.GetRcInfo:input_type -> resourceManager.GetRcInfoReq
	51,  // 53: resourceManager.ResourceManager.GetProfile:input_type -> resourceManager.ProfileRequest
	47,  // 54: resourceManager.ResourceManager.CreateNamespace:input_type -> resourceManager.CreateNamespaceRequest
	47,  // 55: resourceManager.ResourceManager.NamespaceExists:input_type -> resourceManager.CreateNamespaceRequest
	45,  // 56: resourceManager.ResourceManager.DeleteNamespace:input_type -> resourceManager.DeleteNamespaceRequest
	41,  // 57: resourceManager.ResourceManager.GetLockInfo:input_type -> resourceManager.LockInfoRequest
	37,  // 58: resourceManager.ResourceManager.WriteCloudConfig:input_type -> resourceManager.WriteCloudConfigRequest
	35,  // 59: resourceManager.ResourceManager.UpdateAmSMTPConfig:input_type -> resourceManager.AmSmtpConfigRequest
	23,  // 60: resourceManager.ResourceManager.IsClusterNameUnique:input_type -> resourceManager.IsClusterNameUniqueReq
	17,  // 61: resourceManager.ResourceManager.ListClusters:input_type -> resourceManager.ListClustersReq
	10,  // 62: resourceManager.ResourceManager.GetClusterDetails:input_type -> resourceManager.GetClusterDetailsReq
	93,  // 63: resourceManager.ResourceManager.AddStorage:input_type -> resourceManager.AddStorageRequest
	94,  // 64: resourceManager.ResourceManager.ListStorage:input_type -> resourceManager.ListStorageRequest
	95,  // 65: resourceManager.ResourceManager.GetStorageByStorageId:input_type -> resourceManager.GetStorageByStorageIdRequest
	96,  // 66: resourceManager.ResourceManager.UpdateStorage:input_type -> resourceManager.UpdateStorageRequest
	97,  // 67: resourceManager.ResourceManager.DeleteStorage:input_type -> resourceManager.DeleteStorageRequest
	98,  // 68: resourceManager.ResourceManager.UpdateStorageProjects:input_type -> resourceManager.UpdateStorageProjectsRequest
	99,  // 69: resourceManager.ResourceManager.TestStorage:input_type -> resourceManager.TestStorageRequest
	100, // 70: resourceManager.ResourceManager.StorageProjects:input_type -> resourceManager.StorageProjectsRequest
	101, // 71: resourceManager.ResourceManager.AddStorageClass:input_type -> resourceManager.AddStorageClassRequest
	102, // 72: resourceManager.ResourceManager.GetStorageClass:input_type -> resourceManager.GetStorageClassRequest
	103, // 73: resourceManager.ResourceManager.ListStorageClass:input_type -> resourceManager.ListStorageClassRequest
	104, // 74: resourceManager.ResourceManager.DeleteStorageClass:input_type -> resourceManager.DeleteStorageClassRequest
	105, // 75: resourceManager.ResourceManager.DeploymentPVCs:input_type -> resourceManager.DeploymentPVCsRequest
	106, // 76: resourceManager.ResourceManager.ProvisionerExists:input_type -> resourceManager.ProvisionerExistsRequest
	107, // 77: resourceManager.ResourceManager.ProvisionerUsedBy:input_type -> resourceManager.ProvisionerUsedByRequest
	30,  // 78: resourceManager.ResourceManager.CreateK8sCluster:output_type -> resourceManager.CreateK8sClusterResponse
	28,  // 79: resourceManager.ResourceManager.AddNodes:output_type -> resourceManager.AddNodeToK8sClusterResponse
	69,  // 80: resourceManager.ResourceManager.DeleteK8sCluster:output_type -> resourceManager.DeleteK8sClusterRes
	13,  // 81: resourceManager.ResourceManager.ListNodes:output_type -> resourceManager.ListNodeResponse
	9,   // 82: resourceManager.ResourceManager.RemoveNodes:output_type -> resourceManager.RemoveNodeRes
	34,  // 83: resourceManager.ResourceManager.CanDeleteNode:output_type -> resourceManager.CanDeleteNodeRes
	8,   // 84: resourceManager.ResourceManager.MoveCluster:output_type -> resourceManager.MoveClusterRes
	66,  // 85: resourceManager.ResourceManager.GetHealth:output_type -> resourceManager.HealthResponse
	59,  // 86: resourceManager.ResourceManager.GetKubeConfig:output_type -> resourceManager.GetKubeConfigRes
	58,  // 87: resourceManager.ResourceManager.GetWorkerIPs:output_type -> resourceManager.WorkerIPResponse
	50,  // 88: resourceManager.ResourceManager.GetNodeIP:output_type -> resourceManager.NodeIPResponse
	54,  // 89: resourceManager.ResourceManager.GetRcInfo:output_type -> resourceManager.GetRcInfoRes
	52,  // 90: resourceManager.ResourceManager.GetProfile:output_type -> resourceManager.ProfileResponse
	48,  // 91: resourceManager.ResourceManager.CreateNamespace:output_type -> resourceManager.CreateNamespaceResponse
	48,  // 92: resourceManager.ResourceManager.NamespaceExists:output_type -> resourceManager.CreateNamespaceResponse
	46,  // 93: resourceManager.ResourceManager.DeleteNamespace:output_type -> resourceManager.DeleteNamespaceResponse
	42,  // 94: resourceManager.ResourceManager.GetLockInfo:output_type -> resourceManager.ClusterLock
	38,  // 95: resourceManager.ResourceManager.WriteCloudConfig:output_type -> resourceManager.WriteCloudConfigResponse
	36,  // 96: resourceManager.ResourceManager.UpdateAmSMTPConfig:output_type -> resourceManager.AmSmtpConfigResponse
	24,  // 97: resourceManager.ResourceManager.IsClusterNameUnique:output_type -> resourceManager.IsClusterNameUniqueRes
	18,  // 98: resourceManager.ResourceManager.ListClusters:output_type -> resourceManager.ListClustersRes
	11,  // 99: resourceManager.ResourceManager.GetClusterDetails:output_type -> resourceManager.GetClusterDetailsRes
	108, // 100: resourceManager.ResourceManager.AddStorage:output_type -> resourceManager.ActionResponse
	109, // 101: resourceManager.ResourceManager.ListStorage:output_type -> resourceManager.ListStorageResponse
	110, // 102: resourceManager.ResourceManager.GetStorageByStorageId:output_type -> resourceManager.Storage
	111, // 103: resourceManager.ResourceManager.UpdateStorage:output_type -> resourceManager.DetailedActionResponse
	111, // 104: resourceManager.ResourceManager.DeleteStorage:output_type -> resourceManager.DetailedActionResponse
	111, // 105: resourceManager.ResourceManager.UpdateStorageProjects:output_type -> resourceManager.DetailedActionResponse
	108, // 106: resourceManager.ResourceManager.TestStorage:output_type -> resourceManager.ActionResponse
	112, // 107: resourceManager.ResourceManager.StorageProjects:output_type -> resourceManager.StorageProjectsResponse
	108, // 108: resourceManager.ResourceManager.AddStorageClass:output_type -> resourceManager.ActionResponse
	113, // 109: resourceManager.ResourceManager.GetStorageClass:output_type -> resourceManager.GetStorageClassResponse
	114, // 110: resourceManager.ResourceManager.ListStorageClass:output_type -> resourceManager.ListStorageClassResponse
	111, // 111: resourceManager.ResourceManager.DeleteStorageClass:output_type -> resourceManager.DetailedActionResponse
	115, // 112: resourceManager.ResourceManager.DeploymentPVCs:output_type -> resourceManager.DeploymentPVCsResponse
	116, // 113: resourceManager.ResourceManager.ProvisionerExists:output_type -> resourceManager.ProvisionerExistsResponse
	117, // 114: resourceManager.ResourceManager.ProvisionerUsedBy:output_type -> resourceManager.ProvisionerUsedByResponse
	78,  // [78:115] is the sub-list for method output_type
	41,  // [41:78] is the sub-list for method input_type
	41,  // [41:41] is the sub-list for extension type_name
	41,  // [41:41] is the sub-list for extension extendee
	0,   // [0:41] is the sub-list for field type_name
}

func init() { file_proto_resource_manager_proto_init() }
func file_proto_resource_manager_proto_init() {
	if File_proto_resource_manager_proto != nil {
		return
	}
	file_proto_storage_proto_init()
	file_proto_provisioner_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_proto_resource_manager_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoveClusterReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_resource_manager_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoveClusterRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_resource_manager_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveNodeRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_resource_manager_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClusterDetailsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_resource_manager_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClusterDetailsRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_resource_manager_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_resource_manager_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_resource_manager_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNodeResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_resource_manager_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_resource_manager_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Resources); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_resource_manager_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListClustersReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_resource_manager_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListClustersRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_resource_manager_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_resource_manager_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterMetaStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_resource_manager_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeploymentStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_resource_manager_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterNodeStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_resource_manager_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsClusterNameUniqueReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_resource_manager_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsClusterNameUniqueRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_resource_manager_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateK8SClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_resource_manager_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddNodeToK8SClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_resource_manager_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddNodeK8SSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_resource_manager_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddNodeToK8SClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_resource_manager_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*K8SSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_resource_manager_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateK8SClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_resource_manager_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpgradeInfrastructureRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_resource_manager_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpgradeInfrastructureResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_resource_manager_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CanDeleteNodeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_resource_manager_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CanDeleteNodeRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_resource_manager_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AmSmtpConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_resource_manager_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AmSmtpConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_resource_manager_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteCloudConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_resource_manager_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteCloudConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_resource_manager_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRookCephDasboardPasswordReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_resource_manager_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRookCephDasboardPasswordRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_resource_manager_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LockInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_resource_manager_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterLock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_resource_manager_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteIngressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_resource_manager_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteIngressResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_resource_manager_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteNamespaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_resource_manager_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteNamespaceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_resource_manager_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNamespaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_resource_manager_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNamespaceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_resource_manager_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeIPRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_resource_manager_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeIPResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_resource_manager_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_resource_manager_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_resource_manager_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRcInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_resource_manager_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRcInfoRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_resource_manager_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyIngressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_resource_manager_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyIngressResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_resource_manager_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkerIPRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_resource_manager_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkerIPResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_resource_manager_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetKubeConfigRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_resource_manager_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetKubeConfigReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_resource_manager_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegionTypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_resource_manager_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegionTypeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_resource_manager_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MachineTypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_resource_manager_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MachineTypeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_resource_manager_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_resource_manager_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_resource_manager_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_resource_manager_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteK8SClusterReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_resource_manager_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteK8SClusterRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_resource_manager_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProvisionStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_resource_manager_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProvisioningStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_resource_manager_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProvisioningStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_resource_manager_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_resource_manager_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_resource_manager_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_resource_manager_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCPProvider); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_resource_manager_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_resource_manager_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceParameterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_resource_manager_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Network); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_resource_manager_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*K8S); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_resource_manager_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Subnet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_resource_manager_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InfrastructureActionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_resource_manager_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubeParameterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_resource_manager_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubeParameterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_resource_manager_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterKongEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_resource_manager_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeKongEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_resource_manager_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   80,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_resource_manager_proto_goTypes,
		DependencyIndexes: file_proto_resource_manager_proto_depIdxs,
		EnumInfos:         file_proto_resource_manager_proto_enumTypes,
		MessageInfos:      file_proto_resource_manager_proto_msgTypes,
	}.Build()
	File_proto_resource_manager_proto = out.File
	file_proto_resource_manager_proto_rawDesc = nil
	file_proto_resource_manager_proto_goTypes = nil
	file_proto_resource_manager_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ResourceManagerClient is the client API for ResourceManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ResourceManagerClient interface {
	CreateK8SCluster(ctx context.Context, in *CreateK8SClusterRequest, opts ...grpc.CallOption) (*CreateK8SClusterResponse, error)
	AddNodes(ctx context.Context, in *AddNodeToK8SClusterRequest, opts ...grpc.CallOption) (*AddNodeToK8SClusterResponse, error)
	DeleteK8SCluster(ctx context.Context, in *DeleteK8SClusterReq, opts ...grpc.CallOption) (*DeleteK8SClusterRes, error)
	ListNodes(ctx context.Context, in *ListNodeRequest, opts ...grpc.CallOption) (*ListNodeResponse, error)
	RemoveNodes(ctx context.Context, in *RemoveNodeRequest, opts ...grpc.CallOption) (*RemoveNodeRes, error)
	CanDeleteNode(ctx context.Context, in *CanDeleteNodeReq, opts ...grpc.CallOption) (*CanDeleteNodeRes, error)
	MoveCluster(ctx context.Context, in *MoveClusterReq, opts ...grpc.CallOption) (*MoveClusterRes, error)
	GetHealth(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error)
	GetKubeConfig(ctx context.Context, in *GetKubeConfigReq, opts ...grpc.CallOption) (*GetKubeConfigRes, error)
	GetWorkerIPs(ctx context.Context, in *WorkerIPRequest, opts ...grpc.CallOption) (*WorkerIPResponse, error)
	//  To be reviewed (TBR)
	GetNodeIP(ctx context.Context, in *NodeIPRequest, opts ...grpc.CallOption) (*NodeIPResponse, error)
	GetRcInfo(ctx context.Context, in *GetRcInfoReq, opts ...grpc.CallOption) (*GetRcInfoRes, error)
	GetProfile(ctx context.Context, in *ProfileRequest, opts ...grpc.CallOption) (*ProfileResponse, error)
	CreateNamespace(ctx context.Context, in *CreateNamespaceRequest, opts ...grpc.CallOption) (*CreateNamespaceResponse, error)
	NamespaceExists(ctx context.Context, in *CreateNamespaceRequest, opts ...grpc.CallOption) (*CreateNamespaceResponse, error)
	DeleteNamespace(ctx context.Context, in *DeleteNamespaceRequest, opts ...grpc.CallOption) (*DeleteNamespaceResponse, error)
	//  To be reviewed (TBR)
	GetLockInfo(ctx context.Context, in *LockInfoRequest, opts ...grpc.CallOption) (*ClusterLock, error)
	WriteCloudConfig(ctx context.Context, in *WriteCloudConfigRequest, opts ...grpc.CallOption) (*WriteCloudConfigResponse, error)
	UpdateAmSMTPConfig(ctx context.Context, in *AmSmtpConfigRequest, opts ...grpc.CallOption) (*AmSmtpConfigResponse, error)
	IsClusterNameUnique(ctx context.Context, in *IsClusterNameUniqueReq, opts ...grpc.CallOption) (*IsClusterNameUniqueRes, error)
	ListClusters(ctx context.Context, in *ListClustersReq, opts ...grpc.CallOption) (*ListClustersRes, error)
	GetClusterDetails(ctx context.Context, in *GetClusterDetailsReq, opts ...grpc.CallOption) (*GetClusterDetailsRes, error)
	// Storage
	AddStorage(ctx context.Context, in *AddStorageRequest, opts ...grpc.CallOption) (*ActionResponse, error)
	ListStorage(ctx context.Context, in *ListStorageRequest, opts ...grpc.CallOption) (*ListStorageResponse, error)
	GetStorageByStorageId(ctx context.Context, in *GetStorageByStorageIdRequest, opts ...grpc.CallOption) (*Storage, error)
	UpdateStorage(ctx context.Context, in *UpdateStorageRequest, opts ...grpc.CallOption) (*DetailedActionResponse, error)
	DeleteStorage(ctx context.Context, in *DeleteStorageRequest, opts ...grpc.CallOption) (*DetailedActionResponse, error)
	UpdateStorageProjects(ctx context.Context, in *UpdateStorageProjectsRequest, opts ...grpc.CallOption) (*DetailedActionResponse, error)
	TestStorage(ctx context.Context, in *TestStorageRequest, opts ...grpc.CallOption) (*ActionResponse, error)
	StorageProjects(ctx context.Context, in *StorageProjectsRequest, opts ...grpc.CallOption) (*StorageProjectsResponse, error)
	// Storage class
	AddStorageClass(ctx context.Context, in *AddStorageClassRequest, opts ...grpc.CallOption) (*ActionResponse, error)
	GetStorageClass(ctx context.Context, in *GetStorageClassRequest, opts ...grpc.CallOption) (*GetStorageClassResponse, error)
	ListStorageClass(ctx context.Context, in *ListStorageClassRequest, opts ...grpc.CallOption) (*ListStorageClassResponse, error)
	DeleteStorageClass(ctx context.Context, in *DeleteStorageClassRequest, opts ...grpc.CallOption) (*DetailedActionResponse, error)
	DeploymentPVCs(ctx context.Context, in *DeploymentPVCsRequest, opts ...grpc.CallOption) (*DeploymentPVCsResponse, error)
	// Provisioner
	ProvisionerExists(ctx context.Context, in *ProvisionerExistsRequest, opts ...grpc.CallOption) (*ProvisionerExistsResponse, error)
	ProvisionerUsedBy(ctx context.Context, in *ProvisionerUsedByRequest, opts ...grpc.CallOption) (*ProvisionerUsedByResponse, error)
}

type resourceManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewResourceManagerClient(cc grpc.ClientConnInterface) ResourceManagerClient {
	return &resourceManagerClient{cc}
}

func (c *resourceManagerClient) CreateK8SCluster(ctx context.Context, in *CreateK8SClusterRequest, opts ...grpc.CallOption) (*CreateK8SClusterResponse, error) {
	out := new(CreateK8SClusterResponse)
	err := c.cc.Invoke(ctx, "/resourceManager.ResourceManager/CreateK8sCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerClient) AddNodes(ctx context.Context, in *AddNodeToK8SClusterRequest, opts ...grpc.CallOption) (*AddNodeToK8SClusterResponse, error) {
	out := new(AddNodeToK8SClusterResponse)
	err := c.cc.Invoke(ctx, "/resourceManager.ResourceManager/AddNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerClient) DeleteK8SCluster(ctx context.Context, in *DeleteK8SClusterReq, opts ...grpc.CallOption) (*DeleteK8SClusterRes, error) {
	out := new(DeleteK8SClusterRes)
	err := c.cc.Invoke(ctx, "/resourceManager.ResourceManager/DeleteK8sCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerClient) ListNodes(ctx context.Context, in *ListNodeRequest, opts ...grpc.CallOption) (*ListNodeResponse, error) {
	out := new(ListNodeResponse)
	err := c.cc.Invoke(ctx, "/resourceManager.ResourceManager/ListNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerClient) RemoveNodes(ctx context.Context, in *RemoveNodeRequest, opts ...grpc.CallOption) (*RemoveNodeRes, error) {
	out := new(RemoveNodeRes)
	err := c.cc.Invoke(ctx, "/resourceManager.ResourceManager/RemoveNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerClient) CanDeleteNode(ctx context.Context, in *CanDeleteNodeReq, opts ...grpc.CallOption) (*CanDeleteNodeRes, error) {
	out := new(CanDeleteNodeRes)
	err := c.cc.Invoke(ctx, "/resourceManager.ResourceManager/CanDeleteNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerClient) MoveCluster(ctx context.Context, in *MoveClusterReq, opts ...grpc.CallOption) (*MoveClusterRes, error) {
	out := new(MoveClusterRes)
	err := c.cc.Invoke(ctx, "/resourceManager.ResourceManager/MoveCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerClient) GetHealth(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error) {
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, "/resourceManager.ResourceManager/GetHealth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerClient) GetKubeConfig(ctx context.Context, in *GetKubeConfigReq, opts ...grpc.CallOption) (*GetKubeConfigRes, error) {
	out := new(GetKubeConfigRes)
	err := c.cc.Invoke(ctx, "/resourceManager.ResourceManager/GetKubeConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerClient) GetWorkerIPs(ctx context.Context, in *WorkerIPRequest, opts ...grpc.CallOption) (*WorkerIPResponse, error) {
	out := new(WorkerIPResponse)
	err := c.cc.Invoke(ctx, "/resourceManager.ResourceManager/GetWorkerIPs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerClient) GetNodeIP(ctx context.Context, in *NodeIPRequest, opts ...grpc.CallOption) (*NodeIPResponse, error) {
	out := new(NodeIPResponse)
	err := c.cc.Invoke(ctx, "/resourceManager.ResourceManager/GetNodeIP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerClient) GetRcInfo(ctx context.Context, in *GetRcInfoReq, opts ...grpc.CallOption) (*GetRcInfoRes, error) {
	out := new(GetRcInfoRes)
	err := c.cc.Invoke(ctx, "/resourceManager.ResourceManager/GetRcInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerClient) GetProfile(ctx context.Context, in *ProfileRequest, opts ...grpc.CallOption) (*ProfileResponse, error) {
	out := new(ProfileResponse)
	err := c.cc.Invoke(ctx, "/resourceManager.ResourceManager/GetProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerClient) CreateNamespace(ctx context.Context, in *CreateNamespaceRequest, opts ...grpc.CallOption) (*CreateNamespaceResponse, error) {
	out := new(CreateNamespaceResponse)
	err := c.cc.Invoke(ctx, "/resourceManager.ResourceManager/CreateNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerClient) NamespaceExists(ctx context.Context, in *CreateNamespaceRequest, opts ...grpc.CallOption) (*CreateNamespaceResponse, error) {
	out := new(CreateNamespaceResponse)
	err := c.cc.Invoke(ctx, "/resourceManager.ResourceManager/NamespaceExists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerClient) DeleteNamespace(ctx context.Context, in *DeleteNamespaceRequest, opts ...grpc.CallOption) (*DeleteNamespaceResponse, error) {
	out := new(DeleteNamespaceResponse)
	err := c.cc.Invoke(ctx, "/resourceManager.ResourceManager/DeleteNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerClient) GetLockInfo(ctx context.Context, in *LockInfoRequest, opts ...grpc.CallOption) (*ClusterLock, error) {
	out := new(ClusterLock)
	err := c.cc.Invoke(ctx, "/resourceManager.ResourceManager/GetLockInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerClient) WriteCloudConfig(ctx context.Context, in *WriteCloudConfigRequest, opts ...grpc.CallOption) (*WriteCloudConfigResponse, error) {
	out := new(WriteCloudConfigResponse)
	err := c.cc.Invoke(ctx, "/resourceManager.ResourceManager/WriteCloudConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerClient) UpdateAmSMTPConfig(ctx context.Context, in *AmSmtpConfigRequest, opts ...grpc.CallOption) (*AmSmtpConfigResponse, error) {
	out := new(AmSmtpConfigResponse)
	err := c.cc.Invoke(ctx, "/resourceManager.ResourceManager/UpdateAmSMTPConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerClient) IsClusterNameUnique(ctx context.Context, in *IsClusterNameUniqueReq, opts ...grpc.CallOption) (*IsClusterNameUniqueRes, error) {
	out := new(IsClusterNameUniqueRes)
	err := c.cc.Invoke(ctx, "/resourceManager.ResourceManager/IsClusterNameUnique", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerClient) ListClusters(ctx context.Context, in *ListClustersReq, opts ...grpc.CallOption) (*ListClustersRes, error) {
	out := new(ListClustersRes)
	err := c.cc.Invoke(ctx, "/resourceManager.ResourceManager/ListClusters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerClient) GetClusterDetails(ctx context.Context, in *GetClusterDetailsReq, opts ...grpc.CallOption) (*GetClusterDetailsRes, error) {
	out := new(GetClusterDetailsRes)
	err := c.cc.Invoke(ctx, "/resourceManager.ResourceManager/GetClusterDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerClient) AddStorage(ctx context.Context, in *AddStorageRequest, opts ...grpc.CallOption) (*ActionResponse, error) {
	out := new(ActionResponse)
	err := c.cc.Invoke(ctx, "/resourceManager.ResourceManager/AddStorage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerClient) ListStorage(ctx context.Context, in *ListStorageRequest, opts ...grpc.CallOption) (*ListStorageResponse, error) {
	out := new(ListStorageResponse)
	err := c.cc.Invoke(ctx, "/resourceManager.ResourceManager/ListStorage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerClient) GetStorageByStorageId(ctx context.Context, in *GetStorageByStorageIdRequest, opts ...grpc.CallOption) (*Storage, error) {
	out := new(Storage)
	err := c.cc.Invoke(ctx, "/resourceManager.ResourceManager/GetStorageByStorageId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerClient) UpdateStorage(ctx context.Context, in *UpdateStorageRequest, opts ...grpc.CallOption) (*DetailedActionResponse, error) {
	out := new(DetailedActionResponse)
	err := c.cc.Invoke(ctx, "/resourceManager.ResourceManager/UpdateStorage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerClient) DeleteStorage(ctx context.Context, in *DeleteStorageRequest, opts ...grpc.CallOption) (*DetailedActionResponse, error) {
	out := new(DetailedActionResponse)
	err := c.cc.Invoke(ctx, "/resourceManager.ResourceManager/DeleteStorage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerClient) UpdateStorageProjects(ctx context.Context, in *UpdateStorageProjectsRequest, opts ...grpc.CallOption) (*DetailedActionResponse, error) {
	out := new(DetailedActionResponse)
	err := c.cc.Invoke(ctx, "/resourceManager.ResourceManager/UpdateStorageProjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerClient) TestStorage(ctx context.Context, in *TestStorageRequest, opts ...grpc.CallOption) (*ActionResponse, error) {
	out := new(ActionResponse)
	err := c.cc.Invoke(ctx, "/resourceManager.ResourceManager/TestStorage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerClient) StorageProjects(ctx context.Context, in *StorageProjectsRequest, opts ...grpc.CallOption) (*StorageProjectsResponse, error) {
	out := new(StorageProjectsResponse)
	err := c.cc.Invoke(ctx, "/resourceManager.ResourceManager/StorageProjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerClient) AddStorageClass(ctx context.Context, in *AddStorageClassRequest, opts ...grpc.CallOption) (*ActionResponse, error) {
	out := new(ActionResponse)
	err := c.cc.Invoke(ctx, "/resourceManager.ResourceManager/AddStorageClass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerClient) GetStorageClass(ctx context.Context, in *GetStorageClassRequest, opts ...grpc.CallOption) (*GetStorageClassResponse, error) {
	out := new(GetStorageClassResponse)
	err := c.cc.Invoke(ctx, "/resourceManager.ResourceManager/GetStorageClass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerClient) ListStorageClass(ctx context.Context, in *ListStorageClassRequest, opts ...grpc.CallOption) (*ListStorageClassResponse, error) {
	out := new(ListStorageClassResponse)
	err := c.cc.Invoke(ctx, "/resourceManager.ResourceManager/ListStorageClass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerClient) DeleteStorageClass(ctx context.Context, in *DeleteStorageClassRequest, opts ...grpc.CallOption) (*DetailedActionResponse, error) {
	out := new(DetailedActionResponse)
	err := c.cc.Invoke(ctx, "/resourceManager.ResourceManager/DeleteStorageClass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerClient) DeploymentPVCs(ctx context.Context, in *DeploymentPVCsRequest, opts ...grpc.CallOption) (*DeploymentPVCsResponse, error) {
	out := new(DeploymentPVCsResponse)
	err := c.cc.Invoke(ctx, "/resourceManager.ResourceManager/DeploymentPVCs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerClient) ProvisionerExists(ctx context.Context, in *ProvisionerExistsRequest, opts ...grpc.CallOption) (*ProvisionerExistsResponse, error) {
	out := new(ProvisionerExistsResponse)
	err := c.cc.Invoke(ctx, "/resourceManager.ResourceManager/ProvisionerExists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerClient) ProvisionerUsedBy(ctx context.Context, in *ProvisionerUsedByRequest, opts ...grpc.CallOption) (*ProvisionerUsedByResponse, error) {
	out := new(ProvisionerUsedByResponse)
	err := c.cc.Invoke(ctx, "/resourceManager.ResourceManager/ProvisionerUsedBy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResourceManagerServer is the server API for ResourceManager service.
type ResourceManagerServer interface {
	CreateK8SCluster(context.Context, *CreateK8SClusterRequest) (*CreateK8SClusterResponse, error)
	AddNodes(context.Context, *AddNodeToK8SClusterRequest) (*AddNodeToK8SClusterResponse, error)
	DeleteK8SCluster(context.Context, *DeleteK8SClusterReq) (*DeleteK8SClusterRes, error)
	ListNodes(context.Context, *ListNodeRequest) (*ListNodeResponse, error)
	RemoveNodes(context.Context, *RemoveNodeRequest) (*RemoveNodeRes, error)
	CanDeleteNode(context.Context, *CanDeleteNodeReq) (*CanDeleteNodeRes, error)
	MoveCluster(context.Context, *MoveClusterReq) (*MoveClusterRes, error)
	GetHealth(context.Context, *HealthRequest) (*HealthResponse, error)
	GetKubeConfig(context.Context, *GetKubeConfigReq) (*GetKubeConfigRes, error)
	GetWorkerIPs(context.Context, *WorkerIPRequest) (*WorkerIPResponse, error)
	//  To be reviewed (TBR)
	GetNodeIP(context.Context, *NodeIPRequest) (*NodeIPResponse, error)
	GetRcInfo(context.Context, *GetRcInfoReq) (*GetRcInfoRes, error)
	GetProfile(context.Context, *ProfileRequest) (*ProfileResponse, error)
	CreateNamespace(context.Context, *CreateNamespaceRequest) (*CreateNamespaceResponse, error)
	NamespaceExists(context.Context, *CreateNamespaceRequest) (*CreateNamespaceResponse, error)
	DeleteNamespace(context.Context, *DeleteNamespaceRequest) (*DeleteNamespaceResponse, error)
	//  To be reviewed (TBR)
	GetLockInfo(context.Context, *LockInfoRequest) (*ClusterLock, error)
	WriteCloudConfig(context.Context, *WriteCloudConfigRequest) (*WriteCloudConfigResponse, error)
	UpdateAmSMTPConfig(context.Context, *AmSmtpConfigRequest) (*AmSmtpConfigResponse, error)
	IsClusterNameUnique(context.Context, *IsClusterNameUniqueReq) (*IsClusterNameUniqueRes, error)
	ListClusters(context.Context, *ListClustersReq) (*ListClustersRes, error)
	GetClusterDetails(context.Context, *GetClusterDetailsReq) (*GetClusterDetailsRes, error)
	// Storage
	AddStorage(context.Context, *AddStorageRequest) (*ActionResponse, error)
	ListStorage(context.Context, *ListStorageRequest) (*ListStorageResponse, error)
	GetStorageByStorageId(context.Context, *GetStorageByStorageIdRequest) (*Storage, error)
	UpdateStorage(context.Context, *UpdateStorageRequest) (*DetailedActionResponse, error)
	DeleteStorage(context.Context, *DeleteStorageRequest) (*DetailedActionResponse, error)
	UpdateStorageProjects(context.Context, *UpdateStorageProjectsRequest) (*DetailedActionResponse, error)
	TestStorage(context.Context, *TestStorageRequest) (*ActionResponse, error)
	StorageProjects(context.Context, *StorageProjectsRequest) (*StorageProjectsResponse, error)
	// Storage class
	AddStorageClass(context.Context, *AddStorageClassRequest) (*ActionResponse, error)
	GetStorageClass(context.Context, *GetStorageClassRequest) (*GetStorageClassResponse, error)
	ListStorageClass(context.Context, *ListStorageClassRequest) (*ListStorageClassResponse, error)
	DeleteStorageClass(context.Context, *DeleteStorageClassRequest) (*DetailedActionResponse, error)
	DeploymentPVCs(context.Context, *DeploymentPVCsRequest) (*DeploymentPVCsResponse, error)
	// Provisioner
	ProvisionerExists(context.Context, *ProvisionerExistsRequest) (*ProvisionerExistsResponse, error)
	ProvisionerUsedBy(context.Context, *ProvisionerUsedByRequest) (*ProvisionerUsedByResponse, error)
}

// UnimplementedResourceManagerServer can be embedded to have forward compatible implementations.
type UnimplementedResourceManagerServer struct {
}

func (*UnimplementedResourceManagerServer) CreateK8SCluster(context.Context, *CreateK8SClusterRequest) (*CreateK8SClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateK8SCluster not implemented")
}
func (*UnimplementedResourceManagerServer) AddNodes(context.Context, *AddNodeToK8SClusterRequest) (*AddNodeToK8SClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNodes not implemented")
}
func (*UnimplementedResourceManagerServer) DeleteK8SCluster(context.Context, *DeleteK8SClusterReq) (*DeleteK8SClusterRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteK8SCluster not implemented")
}
func (*UnimplementedResourceManagerServer) ListNodes(context.Context, *ListNodeRequest) (*ListNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNodes not implemented")
}
func (*UnimplementedResourceManagerServer) RemoveNodes(context.Context, *RemoveNodeRequest) (*RemoveNodeRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveNodes not implemented")
}
func (*UnimplementedResourceManagerServer) CanDeleteNode(context.Context, *CanDeleteNodeReq) (*CanDeleteNodeRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CanDeleteNode not implemented")
}
func (*UnimplementedResourceManagerServer) MoveCluster(context.Context, *MoveClusterReq) (*MoveClusterRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveCluster not implemented")
}
func (*UnimplementedResourceManagerServer) GetHealth(context.Context, *HealthRequest) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHealth not implemented")
}
func (*UnimplementedResourceManagerServer) GetKubeConfig(context.Context, *GetKubeConfigReq) (*GetKubeConfigRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKubeConfig not implemented")
}
func (*UnimplementedResourceManagerServer) GetWorkerIPs(context.Context, *WorkerIPRequest) (*WorkerIPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkerIPs not implemented")
}
func (*UnimplementedResourceManagerServer) GetNodeIP(context.Context, *NodeIPRequest) (*NodeIPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeIP not implemented")
}
func (*UnimplementedResourceManagerServer) GetRcInfo(context.Context, *GetRcInfoReq) (*GetRcInfoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRcInfo not implemented")
}
func (*UnimplementedResourceManagerServer) GetProfile(context.Context, *ProfileRequest) (*ProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfile not implemented")
}
func (*UnimplementedResourceManagerServer) CreateNamespace(context.Context, *CreateNamespaceRequest) (*CreateNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNamespace not implemented")
}
func (*UnimplementedResourceManagerServer) NamespaceExists(context.Context, *CreateNamespaceRequest) (*CreateNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NamespaceExists not implemented")
}
func (*UnimplementedResourceManagerServer) DeleteNamespace(context.Context, *DeleteNamespaceRequest) (*DeleteNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNamespace not implemented")
}
func (*UnimplementedResourceManagerServer) GetLockInfo(context.Context, *LockInfoRequest) (*ClusterLock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLockInfo not implemented")
}
func (*UnimplementedResourceManagerServer) WriteCloudConfig(context.Context, *WriteCloudConfigRequest) (*WriteCloudConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteCloudConfig not implemented")
}
func (*UnimplementedResourceManagerServer) UpdateAmSMTPConfig(context.Context, *AmSmtpConfigRequest) (*AmSmtpConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAmSMTPConfig not implemented")
}
func (*UnimplementedResourceManagerServer) IsClusterNameUnique(context.Context, *IsClusterNameUniqueReq) (*IsClusterNameUniqueRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsClusterNameUnique not implemented")
}
func (*UnimplementedResourceManagerServer) ListClusters(context.Context, *ListClustersReq) (*ListClustersRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListClusters not implemented")
}
func (*UnimplementedResourceManagerServer) GetClusterDetails(context.Context, *GetClusterDetailsReq) (*GetClusterDetailsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusterDetails not implemented")
}
func (*UnimplementedResourceManagerServer) AddStorage(context.Context, *AddStorageRequest) (*ActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddStorage not implemented")
}
func (*UnimplementedResourceManagerServer) ListStorage(context.Context, *ListStorageRequest) (*ListStorageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStorage not implemented")
}
func (*UnimplementedResourceManagerServer) GetStorageByStorageId(context.Context, *GetStorageByStorageIdRequest) (*Storage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStorageByStorageId not implemented")
}
func (*UnimplementedResourceManagerServer) UpdateStorage(context.Context, *UpdateStorageRequest) (*DetailedActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStorage not implemented")
}
func (*UnimplementedResourceManagerServer) DeleteStorage(context.Context, *DeleteStorageRequest) (*DetailedActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStorage not implemented")
}
func (*UnimplementedResourceManagerServer) UpdateStorageProjects(context.Context, *UpdateStorageProjectsRequest) (*DetailedActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStorageProjects not implemented")
}
func (*UnimplementedResourceManagerServer) TestStorage(context.Context, *TestStorageRequest) (*ActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestStorage not implemented")
}
func (*UnimplementedResourceManagerServer) StorageProjects(context.Context, *StorageProjectsRequest) (*StorageProjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StorageProjects not implemented")
}
func (*UnimplementedResourceManagerServer) AddStorageClass(context.Context, *AddStorageClassRequest) (*ActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddStorageClass not implemented")
}
func (*UnimplementedResourceManagerServer) GetStorageClass(context.Context, *GetStorageClassRequest) (*GetStorageClassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStorageClass not implemented")
}
func (*UnimplementedResourceManagerServer) ListStorageClass(context.Context, *ListStorageClassRequest) (*ListStorageClassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStorageClass not implemented")
}
func (*UnimplementedResourceManagerServer) DeleteStorageClass(context.Context, *DeleteStorageClassRequest) (*DetailedActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStorageClass not implemented")
}
func (*UnimplementedResourceManagerServer) DeploymentPVCs(context.Context, *DeploymentPVCsRequest) (*DeploymentPVCsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeploymentPVCs not implemented")
}
func (*UnimplementedResourceManagerServer) ProvisionerExists(context.Context, *ProvisionerExistsRequest) (*ProvisionerExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProvisionerExists not implemented")
}
func (*UnimplementedResourceManagerServer) ProvisionerUsedBy(context.Context, *ProvisionerUsedByRequest) (*ProvisionerUsedByResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProvisionerUsedBy not implemented")
}

func RegisterResourceManagerServer(s *grpc.Server, srv ResourceManagerServer) {
	s.RegisterService(&_ResourceManager_serviceDesc, srv)
}

func _ResourceManager_CreateK8SCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateK8SClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServer).CreateK8SCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resourceManager.ResourceManager/CreateK8SCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServer).CreateK8SCluster(ctx, req.(*CreateK8SClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManager_AddNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNodeToK8SClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServer).AddNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resourceManager.ResourceManager/AddNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServer).AddNodes(ctx, req.(*AddNodeToK8SClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManager_DeleteK8SCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteK8SClusterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServer).DeleteK8SCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resourceManager.ResourceManager/DeleteK8SCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServer).DeleteK8SCluster(ctx, req.(*DeleteK8SClusterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManager_ListNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServer).ListNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resourceManager.ResourceManager/ListNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServer).ListNodes(ctx, req.(*ListNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManager_RemoveNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServer).RemoveNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resourceManager.ResourceManager/RemoveNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServer).RemoveNodes(ctx, req.(*RemoveNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManager_CanDeleteNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CanDeleteNodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServer).CanDeleteNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resourceManager.ResourceManager/CanDeleteNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServer).CanDeleteNode(ctx, req.(*CanDeleteNodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManager_MoveCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveClusterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServer).MoveCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resourceManager.ResourceManager/MoveCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServer).MoveCluster(ctx, req.(*MoveClusterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManager_GetHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServer).GetHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resourceManager.ResourceManager/GetHealth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServer).GetHealth(ctx, req.(*HealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManager_GetKubeConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKubeConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServer).GetKubeConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resourceManager.ResourceManager/GetKubeConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServer).GetKubeConfig(ctx, req.(*GetKubeConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManager_GetWorkerIPs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkerIPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServer).GetWorkerIPs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resourceManager.ResourceManager/GetWorkerIPs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServer).GetWorkerIPs(ctx, req.(*WorkerIPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManager_GetNodeIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeIPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServer).GetNodeIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resourceManager.ResourceManager/GetNodeIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServer).GetNodeIP(ctx, req.(*NodeIPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManager_GetRcInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRcInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServer).GetRcInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resourceManager.ResourceManager/GetRcInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServer).GetRcInfo(ctx, req.(*GetRcInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManager_GetProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServer).GetProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resourceManager.ResourceManager/GetProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServer).GetProfile(ctx, req.(*ProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManager_CreateNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServer).CreateNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resourceManager.ResourceManager/CreateNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServer).CreateNamespace(ctx, req.(*CreateNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManager_NamespaceExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServer).NamespaceExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resourceManager.ResourceManager/NamespaceExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServer).NamespaceExists(ctx, req.(*CreateNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManager_DeleteNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServer).DeleteNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resourceManager.ResourceManager/DeleteNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServer).DeleteNamespace(ctx, req.(*DeleteNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManager_GetLockInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServer).GetLockInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resourceManager.ResourceManager/GetLockInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServer).GetLockInfo(ctx, req.(*LockInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManager_WriteCloudConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteCloudConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServer).WriteCloudConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resourceManager.ResourceManager/WriteCloudConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServer).WriteCloudConfig(ctx, req.(*WriteCloudConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManager_UpdateAmSMTPConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AmSmtpConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServer).UpdateAmSMTPConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resourceManager.ResourceManager/UpdateAmSMTPConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServer).UpdateAmSMTPConfig(ctx, req.(*AmSmtpConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManager_IsClusterNameUnique_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsClusterNameUniqueReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServer).IsClusterNameUnique(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resourceManager.ResourceManager/IsClusterNameUnique",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServer).IsClusterNameUnique(ctx, req.(*IsClusterNameUniqueReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManager_ListClusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClustersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServer).ListClusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resourceManager.ResourceManager/ListClusters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServer).ListClusters(ctx, req.(*ListClustersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManager_GetClusterDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClusterDetailsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServer).GetClusterDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resourceManager.ResourceManager/GetClusterDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServer).GetClusterDetails(ctx, req.(*GetClusterDetailsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManager_AddStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddStorageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServer).AddStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resourceManager.ResourceManager/AddStorage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServer).AddStorage(ctx, req.(*AddStorageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManager_ListStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStorageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServer).ListStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resourceManager.ResourceManager/ListStorage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServer).ListStorage(ctx, req.(*ListStorageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManager_GetStorageByStorageId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStorageByStorageIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServer).GetStorageByStorageId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resourceManager.ResourceManager/GetStorageByStorageId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServer).GetStorageByStorageId(ctx, req.(*GetStorageByStorageIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManager_UpdateStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStorageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServer).UpdateStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resourceManager.ResourceManager/UpdateStorage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServer).UpdateStorage(ctx, req.(*UpdateStorageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManager_DeleteStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStorageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServer).DeleteStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resourceManager.ResourceManager/DeleteStorage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServer).DeleteStorage(ctx, req.(*DeleteStorageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManager_UpdateStorageProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStorageProjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServer).UpdateStorageProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resourceManager.ResourceManager/UpdateStorageProjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServer).UpdateStorageProjects(ctx, req.(*UpdateStorageProjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManager_TestStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestStorageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServer).TestStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resourceManager.ResourceManager/TestStorage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServer).TestStorage(ctx, req.(*TestStorageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManager_StorageProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StorageProjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServer).StorageProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resourceManager.ResourceManager/StorageProjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServer).StorageProjects(ctx, req.(*StorageProjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManager_AddStorageClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddStorageClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServer).AddStorageClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resourceManager.ResourceManager/AddStorageClass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServer).AddStorageClass(ctx, req.(*AddStorageClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManager_GetStorageClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStorageClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServer).GetStorageClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resourceManager.ResourceManager/GetStorageClass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServer).GetStorageClass(ctx, req.(*GetStorageClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManager_ListStorageClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStorageClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServer).ListStorageClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resourceManager.ResourceManager/ListStorageClass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServer).ListStorageClass(ctx, req.(*ListStorageClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManager_DeleteStorageClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStorageClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServer).DeleteStorageClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resourceManager.ResourceManager/DeleteStorageClass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServer).DeleteStorageClass(ctx, req.(*DeleteStorageClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManager_DeploymentPVCs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeploymentPVCsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServer).DeploymentPVCs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resourceManager.ResourceManager/DeploymentPVCs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServer).DeploymentPVCs(ctx, req.(*DeploymentPVCsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManager_ProvisionerExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProvisionerExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServer).ProvisionerExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resourceManager.ResourceManager/ProvisionerExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServer).ProvisionerExists(ctx, req.(*ProvisionerExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManager_ProvisionerUsedBy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProvisionerUsedByRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServer).ProvisionerUsedBy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resourceManager.ResourceManager/ProvisionerUsedBy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServer).ProvisionerUsedBy(ctx, req.(*ProvisionerUsedByRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ResourceManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "resourceManager.ResourceManager",
	HandlerType: (*ResourceManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateK8sCluster",
			Handler:    _ResourceManager_CreateK8SCluster_Handler,
		},
		{
			MethodName: "AddNodes",
			Handler:    _ResourceManager_AddNodes_Handler,
		},
		{
			MethodName: "DeleteK8sCluster",
			Handler:    _ResourceManager_DeleteK8SCluster_Handler,
		},
		{
			MethodName: "ListNodes",
			Handler:    _ResourceManager_ListNodes_Handler,
		},
		{
			MethodName: "RemoveNodes",
			Handler:    _ResourceManager_RemoveNodes_Handler,
		},
		{
			MethodName: "CanDeleteNode",
			Handler:    _ResourceManager_CanDeleteNode_Handler,
		},
		{
			MethodName: "MoveCluster",
			Handler:    _ResourceManager_MoveCluster_Handler,
		},
		{
			MethodName: "GetHealth",
			Handler:    _ResourceManager_GetHealth_Handler,
		},
		{
			MethodName: "GetKubeConfig",
			Handler:    _ResourceManager_GetKubeConfig_Handler,
		},
		{
			MethodName: "GetWorkerIPs",
			Handler:    _ResourceManager_GetWorkerIPs_Handler,
		},
		{
			MethodName: "GetNodeIP",
			Handler:    _ResourceManager_GetNodeIP_Handler,
		},
		{
			MethodName: "GetRcInfo",
			Handler:    _ResourceManager_GetRcInfo_Handler,
		},
		{
			MethodName: "GetProfile",
			Handler:    _ResourceManager_GetProfile_Handler,
		},
		{
			MethodName: "CreateNamespace",
			Handler:    _ResourceManager_CreateNamespace_Handler,
		},
		{
			MethodName: "NamespaceExists",
			Handler:    _ResourceManager_NamespaceExists_Handler,
		},
		{
			MethodName: "DeleteNamespace",
			Handler:    _ResourceManager_DeleteNamespace_Handler,
		},
		{
			MethodName: "GetLockInfo",
			Handler:    _ResourceManager_GetLockInfo_Handler,
		},
		{
			MethodName: "WriteCloudConfig",
			Handler:    _ResourceManager_WriteCloudConfig_Handler,
		},
		{
			MethodName: "UpdateAmSMTPConfig",
			Handler:    _ResourceManager_UpdateAmSMTPConfig_Handler,
		},
		{
			MethodName: "IsClusterNameUnique",
			Handler:    _ResourceManager_IsClusterNameUnique_Handler,
		},
		{
			MethodName: "ListClusters",
			Handler:    _ResourceManager_ListClusters_Handler,
		},
		{
			MethodName: "GetClusterDetails",
			Handler:    _ResourceManager_GetClusterDetails_Handler,
		},
		{
			MethodName: "AddStorage",
			Handler:    _ResourceManager_AddStorage_Handler,
		},
		{
			MethodName: "ListStorage",
			Handler:    _ResourceManager_ListStorage_Handler,
		},
		{
			MethodName: "GetStorageByStorageId",
			Handler:    _ResourceManager_GetStorageByStorageId_Handler,
		},
		{
			MethodName: "UpdateStorage",
			Handler:    _ResourceManager_UpdateStorage_Handler,
		},
		{
			MethodName: "DeleteStorage",
			Handler:    _ResourceManager_DeleteStorage_Handler,
		},
		{
			MethodName: "UpdateStorageProjects",
			Handler:    _ResourceManager_UpdateStorageProjects_Handler,
		},
		{
			MethodName: "TestStorage",
			Handler:    _ResourceManager_TestStorage_Handler,
		},
		{
			MethodName: "StorageProjects",
			Handler:    _ResourceManager_StorageProjects_Handler,
		},
		{
			MethodName: "AddStorageClass",
			Handler:    _ResourceManager_AddStorageClass_Handler,
		},
		{
			MethodName: "GetStorageClass",
			Handler:    _ResourceManager_GetStorageClass_Handler,
		},
		{
			MethodName: "ListStorageClass",
			Handler:    _ResourceManager_ListStorageClass_Handler,
		},
		{
			MethodName: "DeleteStorageClass",
			Handler:    _ResourceManager_DeleteStorageClass_Handler,
		},
		{
			MethodName: "DeploymentPVCs",
			Handler:    _ResourceManager_DeploymentPVCs_Handler,
		},
		{
			MethodName: "ProvisionerExists",
			Handler:    _ResourceManager_ProvisionerExists_Handler,
		},
		{
			MethodName: "ProvisionerUsedBy",
			Handler:    _ResourceManager_ProvisionerUsedBy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/resource_manager.proto",
}
